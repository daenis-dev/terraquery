BASE_QUERIES = [
  # Cities
  # Find cities by matching criteria around population (0 - 400000)
  {
    "natural-language": "Find cities with a population greater than one hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100000"
  },
  {
    "natural-language": "Find cities with a population greater than eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 80000"
  },
  {
    "natural-language": "Find cities with a population greater than forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 45000"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100"
  },
  {
    "natural-language": "Find cities with a population greater than ninety people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 90"
  },
  {
    "natural-language": "Find cities with a population greater than fourteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 14"
  },
  {
    "natural-language": "Find cities with a population greater than seventy nine thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 79000"
  },
  {
    "natural-language": "Find cities with a population greater than fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 50000"
  },
  {
    "natural-language": "Find cities with a population greater than seven hundred sixty two people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 762"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred nineteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 319"
  },
  {
    "natural-language": "Find cities with a population greater than eight hundred forty six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 846"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred sixty eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 268000"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred thousand four hundred sixteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100416"
  },
  {
    "natural-language": "Find cities with a population greater than two thousand four hundred fifty nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 2459"
  },
  {
    "natural-language": "Find cities with a population greater than thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 30000"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 150000"
  },
  {
    "natural-language": "Find cities with a population greater than seven hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 700"
  },
  {
    "natural-language": "Find cities with a population greater than eighty six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 86"
  },
  {
    "natural-language": "Find cities with a population greater than thirty eight people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 38"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 400000"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 120000"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred thousand nineteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 300019"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 200000"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred thousand five hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100500"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 105000"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred five thousand five hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 105500"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred fifty thousand five hundred fifty five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 155555"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 250000"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 110000"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred ten thousand one hundred eleven people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 110111"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred eleven thousand one hundred eleven people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 111111"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred thirty three thousand nine hundred seventy people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 133970"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 300000"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred sixty eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 368000"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred thirty three thousand three hundred thirty three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 333333"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 355000"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 390000"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 380000"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 308000"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 345000"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred forty thousand five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 340005"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred fifty thousand two hundred six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 350206"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred forty seven thousand nine hundred three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 347903"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred sixteen thousand three hundred ninety nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 316399"
  },
  {
    "natural-language": "Find cities with a population greater than three hundred twenty thousand seven hundred twelve people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 320712"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred twenty two thousand two hundred twenty two people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 222222"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 255000"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 290000"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 280000"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 208000"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 245000"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred forty thousand five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 240005"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred fifty thousand two hundred six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 250206"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred forty seven thousand nine hundred three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 247903"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred sixteen thousand two hundred ninety nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 216299"
  },
  {
    "natural-language": "Find cities with a population greater than two hundred twenty thousand seven hundred twelve people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 220712"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred sixty eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 468000"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred forty four thousand four hundred fourty four people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 444444"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 455000"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 490000"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 480000"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 408000"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 445000"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred forty thousand five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 440005"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred fifty thousand two hundred six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 450206"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred forty seven thousand nine hundred three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 447903"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred sixteen thousand two hundred ninety nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 416299"
  },
  {
    "natural-language": "Find cities with a population greater than four hundred twenty thousand seven hundred forteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 420714"
  },
  {
    "natural-language": "Find cities with a population greater than one hundred and fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 150000"
  },
  {
    "natural-language": "Find cities with a population greater than 100000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100000"
  },
  {
    "natural-language": "Find cities with a population greater than 80000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 80000"
  },
  {
    "natural-language": "Find cities with a population greater than 45000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 45000"
  },
  {
    "natural-language": "Find cities with a population greater than 100 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100"
  },
  {
    "natural-language": "Find cities with a population greater than 90 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 90"
  },
  {
    "natural-language": "Find cities with a population greater than 14 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 14"
  },
  {
    "natural-language": "Find cities with a population greater than 79000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 79000"
  },
  {
    "natural-language": "Find cities with a population greater than 50000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 50000"
  },
  {
    "natural-language": "Find cities with a population greater than 762 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 762"
  },
  {
    "natural-language": "Find cities with a population greater than 319 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 319"
  },
  {
    "natural-language": "Find cities with a population greater than 846 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 846"
  },
  {
    "natural-language": "Find cities with a population greater than 268000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 268000"
  },
  {
    "natural-language": "Find cities with a population greater than 100416 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100416"
  },
  {
    "natural-language": "Find cities with a population greater than 2459 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 2459"
  },
  {
    "natural-language": "Find cities with a population greater than 30000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 30000"
  },
  {
    "natural-language": "Find cities with a population greater than 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 150000"
  },
  {
    "natural-language": "Find cities with a population greater than 700 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 700"
  },
  {
    "natural-language": "Find cities with a population greater than 86 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 86"
  },
  {
    "natural-language": "Find cities with a population greater than 38 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 38"
  },
  {
    "natural-language": "Find cities with a population greater than 400000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 400000"
  },
  {
    "natural-language": "Find cities with a population greater than 120000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 120000"
  },
  {
    "natural-language": "Find cities with a population greater than 300019 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 300019"
  },
  {
    "natural-language": "Find cities with a population greater than 200000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 200000"
  },
  {
    "natural-language": "Find cities with a population greater than 100500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100500"
  },
  {
    "natural-language": "Find cities with a population greater than 105000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 105000"
  },
  {
    "natural-language": "Find cities with a population greater than 105500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 105500"
  },
  {
    "natural-language": "Find cities with a population greater than 155555 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 155555"
  },
  {
    "natural-language": "Find cities with a population greater than 250000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 250000"
  },
  {
    "natural-language": "Find cities with a population greater than 110000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 110000"
  },
  {
    "natural-language": "Find cities with a population greater than 110111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 110111"
  },
  {
    "natural-language": "Find cities with a population greater than 111111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 111111"
  },
  {
    "natural-language": "Find cities with a population greater than 133970 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 133970"
  },
  {
    "natural-language": "Find cities with a population greater than 300000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 300000"
  },
  {
    "natural-language": "Find cities with a population greater than 368000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 368000"
  },
  {
    "natural-language": "Find cities with a population greater than 333333 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 333333"
  },
  {
    "natural-language": "Find cities with a population greater than 355000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 355000"
  },
  {
    "natural-language": "Find cities with a population greater than 390000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 390000"
  },
  {
    "natural-language": "Find cities with a population greater than 380000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 380000"
  },
  {
    "natural-language": "Find cities with a population greater than 308000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 308000"
  },
  {
    "natural-language": "Find cities with a population greater than 345000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 345000"
  },
  {
    "natural-language": "Find cities with a population greater than 340005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 340005"
  },
  {
    "natural-language": "Find cities with a population greater than 350206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 350206"
  },
  {
    "natural-language": "Find cities with a population greater than 347903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 347903"
  },
  {
    "natural-language": "Find cities with a population greater than 316399 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 316399"
  },
  {
    "natural-language": "Find cities with a population greater than 320712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 320712"
  },
  {
    "natural-language": "Find cities with a population greater than 222222 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 222222"
  },
  {
    "natural-language": "Find cities with a population greater than 255000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 255000"
  },
  {
    "natural-language": "Find cities with a population greater than 290000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 290000"
  },
  {
    "natural-language": "Find cities with a population greater than 280000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 280000"
  },
  {
    "natural-language": "Find cities with a population greater than 208000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 208000"
  },
  {
    "natural-language": "Find cities with a population greater than 245000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 245000"
  },
  {
    "natural-language": "Find cities with a population greater than 240005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 240005"
  },
  {
    "natural-language": "Find cities with a population greater than 250206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 250206"
  },
  {
    "natural-language": "Find cities with a population greater than 247903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 247903"
  },
  {
    "natural-language": "Find cities with a population greater than 216299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 216299"
  },
  {
    "natural-language": "Find cities with a population greater than 220712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 220712"
  },
  {
    "natural-language": "Find cities with a population greater than 468000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 468000"
  },
  {
    "natural-language": "Find cities with a population greater than 444444 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 444444"
  },
  {
    "natural-language": "Find cities with a population greater than 455000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 455000"
  },
  {
    "natural-language": "Find cities with a population greater than 490000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 490000"
  },
  {
    "natural-language": "Find cities with a population greater than 480000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 480000"
  },
  {
    "natural-language": "Find cities with a population greater than 408000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 408000"
  },
  {
    "natural-language": "Find cities with a population greater than 445000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 445000"
  },
  {
    "natural-language": "Find cities with a population greater than 440005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 440005"
  },
  {
    "natural-language": "Find cities with a population greater than 450206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 450206"
  },
  {
    "natural-language": "Find cities with a population greater than 447903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 447903"
  },
  {
    "natural-language": "Find cities with a population greater than 416299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 416299"
  },
  {
    "natural-language": "Find cities with a population greater than 420714 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 420714"
  },
  {
    "natural-language": "Find cities with a population greater than 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 150000"
  },
  {
    "natural-language": "Find cities with a population greater than 100,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100000"
  },
  {
    "natural-language": "Find cities with a population greater than 80,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 80000"
  },
  {
    "natural-language": "Find cities with a population greater than 45,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 45000"
  },
  {
    "natural-language": "Find cities with a population greater than 100 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100"
  },
  {
    "natural-language": "Find cities with a population greater than 90 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 90"
  },
  {
    "natural-language": "Find cities with a population greater than 14 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 14"
  },
  {
    "natural-language": "Find cities with a population greater than 79,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 79000"
  },
  {
    "natural-language": "Find cities with a population greater than 50,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 50000"
  },
  {
    "natural-language": "Find cities with a population greater than 762 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 762"
  },
  {
    "natural-language": "Find cities with a population greater than 319 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 319"
  },
  {
    "natural-language": "Find cities with a population greater than 846 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 846"
  },
  {
    "natural-language": "Find cities with a population greater than 268,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 268000"
  },
  {
    "natural-language": "Find cities with a population greater than 100,416 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100416"
  },
  {
    "natural-language": "Find cities with a population greater than 2,459 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 2459"
  },
  {
    "natural-language": "Find cities with a population greater than 30,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 30000"
  },
  {
    "natural-language": "Find cities with a population greater than 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 150000"
  },
  {
    "natural-language": "Find cities with a population greater than 700 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 700"
  },
  {
    "natural-language": "Find cities with a population greater than 86 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 86"
  },
  {
    "natural-language": "Find cities with a population greater than 38 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 38"
  },
  {
    "natural-language": "Find cities with a population greater than 400,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 400000"
  },
  {
    "natural-language": "Find cities with a population greater than 120,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 120000"
  },
  {
    "natural-language": "Find cities with a population greater than 300,019 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 300019"
  },
  {
    "natural-language": "Find cities with a population greater than 200,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 200000"
  },
  {
    "natural-language": "Find cities with a population greater than 100,500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100500"
  },
  {
    "natural-language": "Find cities with a population greater than 105,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 105000"
  },
  {
    "natural-language": "Find cities with a population greater than 105,500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 105500"
  },
  {
    "natural-language": "Find cities with a population greater than 155,555 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 155555"
  },
  {
    "natural-language": "Find cities with a population greater than 250,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 250000"
  },
  {
    "natural-language": "Find cities with a population greater than 110,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 110000"
  },
  {
    "natural-language": "Find cities with a population greater than 110,111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 110111"
  },
  {
    "natural-language": "Find cities with a population greater than 111,111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 111111"
  },
  {
    "natural-language": "Find cities with a population greater than 133,970 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 133970"
  },
  {
    "natural-language": "Find cities with a population greater than 300,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 300000"
  },
  {
    "natural-language": "Find cities with a population greater than 368,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 368000"
  },
  {
    "natural-language": "Find cities with a population greater than 333,333 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 333333"
  },
  {
    "natural-language": "Find cities with a population greater than 355,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 355000"
  },
  {
    "natural-language": "Find cities with a population greater than 390,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 390000"
  },
  {
    "natural-language": "Find cities with a population greater than 380,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 380000"
  },
  {
    "natural-language": "Find cities with a population greater than 308,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 308000"
  },
  {
    "natural-language": "Find cities with a population greater than 345,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 345000"
  },
  {
    "natural-language": "Find cities with a population greater than 340,005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 340005"
  },
  {
    "natural-language": "Find cities with a population greater than 350,206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 350206"
  },
  {
    "natural-language": "Find cities with a population greater than 347,903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 347903"
  },
  {
    "natural-language": "Find cities with a population greater than 316,399 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 316399"
  },
  {
    "natural-language": "Find cities with a population greater than 320,712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 320712"
  },
  {
    "natural-language": "Find cities with a population greater than 222,222 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 222222"
  },
  {
    "natural-language": "Find cities with a population greater than 255,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 255000"
  },
  {
    "natural-language": "Find cities with a population greater than 290,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 290000"
  },
  {
    "natural-language": "Find cities with a population greater than 280,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 280000"
  },
  {
    "natural-language": "Find cities with a population greater than 208,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 208000"
  },
  {
    "natural-language": "Find cities with a population greater than 245,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 245000"
  },
  {
    "natural-language": "Find cities with a population greater than 240,005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 240005"
  },
  {
    "natural-language": "Find cities with a population greater than 250,206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 250206"
  },
  {
    "natural-language": "Find cities with a population greater than 247,903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 247903"
  },
  {
    "natural-language": "Find cities with a population greater than 216,299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 216299"
  },
  {
    "natural-language": "Find cities with a population greater than 220,712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 220712"
  },
  {
    "natural-language": "Find cities with a population greater than 468,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 468000"
  },
  {
    "natural-language": "Find cities with a population greater than 444,444 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 444444"
  },
  {
    "natural-language": "Find cities with a population greater than 455,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 455000"
  },
  {
    "natural-language": "Find cities with a population greater than 490,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 490000"
  },
  {
    "natural-language": "Find cities with a population greater than 480,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 480000"
  },
  {
    "natural-language": "Find cities with a population greater than 408,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 408000"
  },
  {
    "natural-language": "Find cities with a population greater than 445,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 445000"
  },
  {
    "natural-language": "Find cities with a population greater than 440,005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 440005"
  },
  {
    "natural-language": "Find cities with a population greater than 450,206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 450206"
  },
  {
    "natural-language": "Find cities with a population greater than 447,903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 447903"
  },
  {
    "natural-language": "Find cities with a population greater than 416,299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 416299"
  },
  {
    "natural-language": "Find cities with a population greater than 420,714 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 420714"
  },
  {
    "natural-language": "Find cities with a population greater than 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 150000"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100000"
  },
  {
    "natural-language": "Find cities with a population of at least eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 80000"
  },
  {
    "natural-language": "Find cities with a population of at least forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 45000"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100"
  },
  {
    "natural-language": "Find cities with a population of at least ninety people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 90"
  },
  {
    "natural-language": "Find cities with a population of at least fourteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 14"
  },
  {
    "natural-language": "Find cities with a population of at least seventy nine thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 79000"
  },
  {
    "natural-language": "Find cities with a population of at least fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 50000"
  },
  {
    "natural-language": "Find cities with a population of at least seven hundred sixty two people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 762"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred nineteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 319"
  },
  {
    "natural-language": "Find cities with a population of at least eight hundred forty six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 846"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred sixty eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 268000"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred thousand four hundred sixteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100416"
  },
  {
    "natural-language": "Find cities with a population of at least two thousand four hundred fifty nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 2459"
  },
  {
    "natural-language": "Find cities with a population of at least thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 30000"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 150000"
  },
  {
    "natural-language": "Find cities with a population of at least seven hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 700"
  },
  {
    "natural-language": "Find cities with a population of at least eighty six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 86"
  },
  {
    "natural-language": "Find cities with a population of at least thirty eight people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 38"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 400000"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 120000"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred thousand nineteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 300019"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 200000"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred thousand five hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100500"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 105000"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred five thousand five hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 105500"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred fifty thousand five hundred fifty five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 155555"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 250000"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 110000"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred ten thousand one hundred eleven people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 110111"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred eleven thousand one hundred eleven people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 111111"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred thirty three thousand nine hundred seventy people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 133970"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 300000"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred sixty eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 368000"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred thirty three thousand three hundred thirty three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 333333"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 355000"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 390000"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 380000"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 308000"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 345000"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred forty thousand five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 340005"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred fifty thousand two hundred six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 350206"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred forty seven thousand nine hundred three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 347903"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred sixteen thousand three hundred ninety nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 316399"
  },
  {
    "natural-language": "Find cities with a population of at least three hundred twenty thousand seven hundred twelve people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 320712"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred twenty two thousand two hundred twenty two people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 222222"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 255000"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 290000"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 280000"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 208000"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 245000"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred forty thousand five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 240005"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred fifty thousand two hundred six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 250206"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred forty seven thousand nine hundred three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 247903"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred sixteen thousand two hundred ninety nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 216299"
  },
  {
    "natural-language": "Find cities with a population of at least two hundred twenty thousand seven hundred twelve people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 220712"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred sixty eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 468000"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred forty four thousand four hundred fourty four people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 444444"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 455000"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 490000"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 480000"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 408000"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 445000"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred forty thousand five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 440005"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred fifty thousand two hundred six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 450206"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred forty seven thousand nine hundred three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 447903"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred sixteen thousand two hundred ninety nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 416299"
  },
  {
    "natural-language": "Find cities with a population of at least four hundred twenty thousand seven hundred forteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 420714"
  },
  {
    "natural-language": "Find cities with a population of at least one hundred and fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 150000"
  },
  {
    "natural-language": "Find cities with a population of at least 100000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100000"
  },
  {
    "natural-language": "Find cities with a population of at least 80000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 80000"
  },
  {
    "natural-language": "Find cities with a population of at least 45000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 45000"
  },
  {
    "natural-language": "Find cities with a population of at least 100 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100"
  },
  {
    "natural-language": "Find cities with a population of at least 90 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 90"
  },
  {
    "natural-language": "Find cities with a population of at least 14 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 14"
  },
  {
    "natural-language": "Find cities with a population of at least 79000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 79000"
  },
  {
    "natural-language": "Find cities with a population of at least 50000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 50000"
  },
  {
    "natural-language": "Find cities with a population of at least 762 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 762"
  },
  {
    "natural-language": "Find cities with a population of at least 319 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 319"
  },
  {
    "natural-language": "Find cities with a population of at least 846 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 846"
  },
  {
    "natural-language": "Find cities with a population of at least 268000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 268000"
  },
  {
    "natural-language": "Find cities with a population of at least 100416 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100416"
  },
  {
    "natural-language": "Find cities with a population of at least 2459 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 2459"
  },
  {
    "natural-language": "Find cities with a population of at least 30000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 30000"
  },
  {
    "natural-language": "Find cities with a population of at least 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 150000"
  },
  {
    "natural-language": "Find cities with a population of at least 700 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 700"
  },
  {
    "natural-language": "Find cities with a population of at least 86 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 86"
  },
  {
    "natural-language": "Find cities with a population of at least 38 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 38"
  },
  {
    "natural-language": "Find cities with a population of at least 400000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 400000"
  },
  {
    "natural-language": "Find cities with a population of at least 120000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 120000"
  },
  {
    "natural-language": "Find cities with a population of at least 300019 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 300019"
  },
  {
    "natural-language": "Find cities with a population of at least 200000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 200000"
  },
  {
    "natural-language": "Find cities with a population of at least 100500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100500"
  },
  {
    "natural-language": "Find cities with a population of at least 105000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 105000"
  },
  {
    "natural-language": "Find cities with a population of at least 105500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 105500"
  },
  {
    "natural-language": "Find cities with a population of at least 155555 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 155555"
  },
  {
    "natural-language": "Find cities with a population of at least 250000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 250000"
  },
  {
    "natural-language": "Find cities with a population of at least 110000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 110000"
  },
  {
    "natural-language": "Find cities with a population of at least 110111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 110111"
  },
  {
    "natural-language": "Find cities with a population of at least 111111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 111111"
  },
  {
    "natural-language": "Find cities with a population of at least 133970 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 133970"
  },
  {
    "natural-language": "Find cities with a population of at least 300000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 300000"
  },
  {
    "natural-language": "Find cities with a population of at least 368000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 368000"
  },
  {
    "natural-language": "Find cities with a population of at least 333333 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 333333"
  },
  {
    "natural-language": "Find cities with a population of at least 355000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 355000"
  },
  {
    "natural-language": "Find cities with a population of at least 390000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 390000"
  },
  {
    "natural-language": "Find cities with a population of at least 380000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 380000"
  },
  {
    "natural-language": "Find cities with a population of at least 308000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 308000"
  },
  {
    "natural-language": "Find cities with a population of at least 345000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 345000"
  },
  {
    "natural-language": "Find cities with a population of at least 340005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 340005"
  },
  {
    "natural-language": "Find cities with a population of at least 350206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 350206"
  },
  {
    "natural-language": "Find cities with a population of at least 347903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 347903"
  },
  {
    "natural-language": "Find cities with a population of at least 316399 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 316399"
  },
  {
    "natural-language": "Find cities with a population of at least 320712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 320712"
  },
  {
    "natural-language": "Find cities with a population of at least 222222 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 222222"
  },
  {
    "natural-language": "Find cities with a population of at least 255000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 255000"
  },
  {
    "natural-language": "Find cities with a population of at least 290000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 290000"
  },
  {
    "natural-language": "Find cities with a population of at least 280000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 280000"
  },
  {
    "natural-language": "Find cities with a population of at least 208000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 208000"
  },
  {
    "natural-language": "Find cities with a population of at least 245000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 245000"
  },
  {
    "natural-language": "Find cities with a population of at least 240005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 240005"
  },
  {
    "natural-language": "Find cities with a population of at least 250206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 250206"
  },
  {
    "natural-language": "Find cities with a population of at least 247903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 247903"
  },
  {
    "natural-language": "Find cities with a population of at least 216299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 216299"
  },
  {
    "natural-language": "Find cities with a population of at least 220712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 220712"
  },
  {
    "natural-language": "Find cities with a population of at least 468000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 468000"
  },
  {
    "natural-language": "Find cities with a population of at least 444444 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 444444"
  },
  {
    "natural-language": "Find cities with a population of at least 455000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 455000"
  },
  {
    "natural-language": "Find cities with a population of at least 490000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 490000"
  },
  {
    "natural-language": "Find cities with a population of at least 480000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 480000"
  },
  {
    "natural-language": "Find cities with a population of at least 408000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 408000"
  },
  {
    "natural-language": "Find cities with a population of at least 445000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 445000"
  },
  {
    "natural-language": "Find cities with a population of at least 440005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 440005"
  },
  {
    "natural-language": "Find cities with a population of at least 450206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 450206"
  },
  {
    "natural-language": "Find cities with a population of at least 447903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 447903"
  },
  {
    "natural-language": "Find cities with a population of at least 416299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 416299"
  },
  {
    "natural-language": "Find cities with a population of at least 420714 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 420714"
  },
  {
    "natural-language": "Find cities with a population of at least 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 150000"
  },
  {
    "natural-language": "Find cities with a population of at least 100,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100000"
  },
  {
    "natural-language": "Find cities with a population of at least 80,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 80000"
  },
  {
    "natural-language": "Find cities with a population of at least 45,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 45000"
  },
  {
    "natural-language": "Find cities with a population of at least 100 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100"
  },
  {
    "natural-language": "Find cities with a population of at least 90 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 90"
  },
  {
    "natural-language": "Find cities with a population of at least 14 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 14"
  },
  {
    "natural-language": "Find cities with a population of at least 79,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 79000"
  },
  {
    "natural-language": "Find cities with a population of at least 50,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 50000"
  },
  {
    "natural-language": "Find cities with a population of at least 762 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 762"
  },
  {
    "natural-language": "Find cities with a population of at least 319 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 319"
  },
  {
    "natural-language": "Find cities with a population of at least 846 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 846"
  },
  {
    "natural-language": "Find cities with a population of at least 268,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 268000"
  },
  {
    "natural-language": "Find cities with a population of at least 100,416 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100416"
  },
  {
    "natural-language": "Find cities with a population of at least 2,459 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 2459"
  },
  {
    "natural-language": "Find cities with a population of at least 30,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 30000"
  },
  {
    "natural-language": "Find cities with a population of at least 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 150000"
  },
  {
    "natural-language": "Find cities with a population of at least 700 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 700"
  },
  {
    "natural-language": "Find cities with a population of at least 86 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 86"
  },
  {
    "natural-language": "Find cities with a population of at least 38 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 38"
  },
  {
    "natural-language": "Find cities with a population of at least 400,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 400000"
  },
  {
    "natural-language": "Find cities with a population of at least 120,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 120000"
  },
  {
    "natural-language": "Find cities with a population of at least 300,019 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 300019"
  },
  {
    "natural-language": "Find cities with a population of at least 200,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 200000"
  },
  {
    "natural-language": "Find cities with a population of at least 100,500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100500"
  },
  {
    "natural-language": "Find cities with a population of at least 105,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 105000"
  },
  {
    "natural-language": "Find cities with a population of at least 105,500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 105500"
  },
  {
    "natural-language": "Find cities with a population of at least 155,555 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 155555"
  },
  {
    "natural-language": "Find cities with a population of at least 250,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 250000"
  },
  {
    "natural-language": "Find cities with a population of at least 110,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 110000"
  },
  {
    "natural-language": "Find cities with a population of at least 110,111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 110111"
  },
  {
    "natural-language": "Find cities with a population of at least 111,111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 111111"
  },
  {
    "natural-language": "Find cities with a population of at least 133,970 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 133970"
  },
  {
    "natural-language": "Find cities with a population of at least 300,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 300000"
  },
  {
    "natural-language": "Find cities with a population of at least 368,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 368000"
  },
  {
    "natural-language": "Find cities with a population of at least 333,333 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 333333"
  },
  {
    "natural-language": "Find cities with a population of at least 355,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 355000"
  },
  {
    "natural-language": "Find cities with a population of at least 390,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 390000"
  },
  {
    "natural-language": "Find cities with a population of at least 380,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 380000"
  },
  {
    "natural-language": "Find cities with a population of at least 308,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 308000"
  },
  {
    "natural-language": "Find cities with a population of at least 345,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 345000"
  },
  {
    "natural-language": "Find cities with a population of at least 340,005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 340005"
  },
  {
    "natural-language": "Find cities with a population of at least 350,206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 350206"
  },
  {
    "natural-language": "Find cities with a population of at least 347,903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 347903"
  },
  {
    "natural-language": "Find cities with a population of at least 316,399 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 316399"
  },
  {
    "natural-language": "Find cities with a population of at least 320,712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 320712"
  },
  {
    "natural-language": "Find cities with a population of at least 222,222 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 222222"
  },
  {
    "natural-language": "Find cities with a population of at least 255,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 255000"
  },
  {
    "natural-language": "Find cities with a population of at least 290,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 290000"
  },
  {
    "natural-language": "Find cities with a population of at least 280,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 280000"
  },
  {
    "natural-language": "Find cities with a population of at least 208,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 208000"
  },
  {
    "natural-language": "Find cities with a population of at least 245,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 245000"
  },
  {
    "natural-language": "Find cities with a population of at least 240,005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 240005"
  },
  {
    "natural-language": "Find cities with a population of at least 250,206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 250206"
  },
  {
    "natural-language": "Find cities with a population of at least 247,903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 247903"
  },
  {
    "natural-language": "Find cities with a population of at least 216,299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 216299"
  },
  {
    "natural-language": "Find cities with a population of at least 220,712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 220712"
  },
  {
    "natural-language": "Find cities with a population of at least 468,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 468000"
  },
  {
    "natural-language": "Find cities with a population of at least 444,444 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 444444"
  },
  {
    "natural-language": "Find cities with a population of at least 455,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 455000"
  },
  {
    "natural-language": "Find cities with a population of at least 490,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 490000"
  },
  {
    "natural-language": "Find cities with a population of at least 480,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 480000"
  },
  {
    "natural-language": "Find cities with a population of at least 408,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 408000"
  },
  {
    "natural-language": "Find cities with a population of at least 445,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 445000"
  },
  {
    "natural-language": "Find cities with a population of at least 440,005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 440005"
  },
  {
    "natural-language": "Find cities with a population of at least 450,206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 450206"
  },
  {
    "natural-language": "Find cities with a population of at least 447,903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 447903"
  },
  {
    "natural-language": "Find cities with a population of at least 416,299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 416299"
  },
  {
    "natural-language": "Find cities with a population of at least 420,714 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 420714"
  },
  {
    "natural-language": "Find cities with a population of at least 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 150000"
  },
  {
    "natural-language": "Find cities with a population less than one hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100000"
  },
  {
    "natural-language": "Find cities with a population less than eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 80000"
  },
  {
    "natural-language": "Find cities with a population less than forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 45000"
  },
  {
    "natural-language": "Find cities with a population less than one hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100"
  },
  {
    "natural-language": "Find cities with a population less than ninety people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 90"
  },
  {
    "natural-language": "Find cities with a population less than fourteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 14"
  },
  {
    "natural-language": "Find cities with a population less than seventy nine thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 79000"
  },
  {
    "natural-language": "Find cities with a population less than fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 50000"
  },
  {
    "natural-language": "Find cities with a population less than seven hundred sixty two people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 762"
  },
  {
    "natural-language": "Find cities with a population less than three hundred nineteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 319"
  },
  {
    "natural-language": "Find cities with a population less than eight hundred forty six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 846"
  },
  {
    "natural-language": "Find cities with a population less than two hundred sixty eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 268000"
  },
  {
    "natural-language": "Find cities with a population less than one hundred thousand four hundred sixteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100416"
  },
  {
    "natural-language": "Find cities with a population less than two thousand four hundred fifty nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 2459"
  },
  {
    "natural-language": "Find cities with a population less than thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 30000"
  },
  {
    "natural-language": "Find cities with a population less than one hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 150000"
  },
  {
    "natural-language": "Find cities with a population less than seven hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 700"
  },
  {
    "natural-language": "Find cities with a population less than eighty six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 86"
  },
  {
    "natural-language": "Find cities with a population less than thirty eight people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 38"
  },
  {
    "natural-language": "Find cities with a population less than four hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 400000"
  },
  {
    "natural-language": "Find cities with a population less than one hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 120000"
  },
  {
    "natural-language": "Find cities with a population less than three hundred thousand nineteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 300019"
  },
  {
    "natural-language": "Find cities with a population less than two hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 200000"
  },
  {
    "natural-language": "Find cities with a population less than one hundred thousand five hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100500"
  },
  {
    "natural-language": "Find cities with a population less than one hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 105000"
  },
  {
    "natural-language": "Find cities with a population less than one hundred five thousand five hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 105500"
  },
  {
    "natural-language": "Find cities with a population less than one hundred fifty thousand five hundred fifty five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 155555"
  },
  {
    "natural-language": "Find cities with a population less than two hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 250000"
  },
  {
    "natural-language": "Find cities with a population less than one hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 110000"
  },
  {
    "natural-language": "Find cities with a population less than one hundred ten thousand one hundred eleven people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 110111"
  },
  {
    "natural-language": "Find cities with a population less than one hundred eleven thousand one hundred eleven people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 111111"
  },
  {
    "natural-language": "Find cities with a population less than one hundred thirty three thousand nine hundred seventy people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 133970"
  },
  {
    "natural-language": "Find cities with a population less than three hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 300000"
  },
  {
    "natural-language": "Find cities with a population less than three hundred sixty eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 368000"
  },
  {
    "natural-language": "Find cities with a population less than three hundred thirty three thousand three hundred thirty three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 333333"
  },
  {
    "natural-language": "Find cities with a population less than three hundred fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 355000"
  },
  {
    "natural-language": "Find cities with a population less than three hundred ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 390000"
  },
  {
    "natural-language": "Find cities with a population less than three hundred eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 380000"
  },
  {
    "natural-language": "Find cities with a population less than three hundred eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 308000"
  },
  {
    "natural-language": "Find cities with a population less than three hundred forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 345000"
  },
  {
    "natural-language": "Find cities with a population less than three hundred forty thousand five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 340005"
  },
  {
    "natural-language": "Find cities with a population less than three hundred fifty thousand two hundred six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 350206"
  },
  {
    "natural-language": "Find cities with a population less than three hundred forty seven thousand nine hundred three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 347903"
  },
  {
    "natural-language": "Find cities with a population less than three hundred sixteen thousand three hundred ninety nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 316399"
  },
  {
    "natural-language": "Find cities with a population less than three hundred twenty thousand seven hundred twelve people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 320712"
  },
  {
    "natural-language": "Find cities with a population less than two hundred twenty two thousand two hundred twenty two people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 222222"
  },
  {
    "natural-language": "Find cities with a population less than two hundred fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 255000"
  },
  {
    "natural-language": "Find cities with a population less than two hundred ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 290000"
  },
  {
    "natural-language": "Find cities with a population less than two hundred eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 280000"
  },
  {
    "natural-language": "Find cities with a population less than two hundred eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 208000"
  },
  {
    "natural-language": "Find cities with a population less than two hundred forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 245000"
  },
  {
    "natural-language": "Find cities with a population less than two hundred forty thousand five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 240005"
  },
  {
    "natural-language": "Find cities with a population less than two hundred fifty thousand two hundred six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 250206"
  },
  {
    "natural-language": "Find cities with a population less than two hundred forty seven thousand nine hundred three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 247903"
  },
  {
    "natural-language": "Find cities with a population less than two hundred sixteen thousand two hundred ninety nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 216299"
  },
  {
    "natural-language": "Find cities with a population less than two hundred twenty thousand seven hundred twelve people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 220712"
  },
  {
    "natural-language": "Find cities with a population less than four hundred sixty eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 468000"
  },
  {
    "natural-language": "Find cities with a population less than four hundred forty four thousand four hundred fourty four people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 444444"
  },
  {
    "natural-language": "Find cities with a population less than four hundred fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 455000"
  },
  {
    "natural-language": "Find cities with a population less than four hundred ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 490000"
  },
  {
    "natural-language": "Find cities with a population less than four hundred eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 480000"
  },
  {
    "natural-language": "Find cities with a population less than four hundred eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 408000"
  },
  {
    "natural-language": "Find cities with a population less than four hundred forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 445000"
  },
  {
    "natural-language": "Find cities with a population less than four hundred forty thousand five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 440005"
  },
  {
    "natural-language": "Find cities with a population less than four hundred fifty thousand two hundred six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 450206"
  },
  {
    "natural-language": "Find cities with a population less than four hundred forty seven thousand nine hundred three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 447903"
  },
  {
    "natural-language": "Find cities with a population less than four hundred sixteen thousand two hundred ninety nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 416299"
  },
  {
    "natural-language": "Find cities with a population less than four hundred twenty thousand seven hundred forteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 420714"
  },
  {
    "natural-language": "Find cities with a population less than one hundred and fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 150000"
  },
  {
    "natural-language": "Find cities with a population less than 100000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100000"
  },
  {
    "natural-language": "Find cities with a population less than 80000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 80000"
  },
  {
    "natural-language": "Find cities with a population less than 45000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 45000"
  },
  {
    "natural-language": "Find cities with a population less than 100 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100"
  },
  {
    "natural-language": "Find cities with a population less than 90 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 90"
  },
  {
    "natural-language": "Find cities with a population less than 14 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 14"
  },
  {
    "natural-language": "Find cities with a population less than 79000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 79000"
  },
  {
    "natural-language": "Find cities with a population less than 50000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 50000"
  },
  {
    "natural-language": "Find cities with a population less than 762 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 762"
  },
  {
    "natural-language": "Find cities with a population less than 319 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 319"
  },
  {
    "natural-language": "Find cities with a population less than 846 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 846"
  },
  {
    "natural-language": "Find cities with a population less than 268000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 268000"
  },
  {
    "natural-language": "Find cities with a population less than 100416 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100416"
  },
  {
    "natural-language": "Find cities with a population less than 2459 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 2459"
  },
  {
    "natural-language": "Find cities with a population less than 30000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 30000"
  },
  {
    "natural-language": "Find cities with a population less than 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 150000"
  },
  {
    "natural-language": "Find cities with a population less than 700 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 700"
  },
  {
    "natural-language": "Find cities with a population less than 86 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 86"
  },
  {
    "natural-language": "Find cities with a population less than 38 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 38"
  },
  {
    "natural-language": "Find cities with a population less than 400000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 400000"
  },
  {
    "natural-language": "Find cities with a population less than 120000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 120000"
  },
  {
    "natural-language": "Find cities with a population less than 300019 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 300019"
  },
  {
    "natural-language": "Find cities with a population less than 200000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 200000"
  },
  {
    "natural-language": "Find cities with a population less than 100500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100500"
  },
  {
    "natural-language": "Find cities with a population less than 105000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 105000"
  },
  {
    "natural-language": "Find cities with a population less than 105500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 105500"
  },
  {
    "natural-language": "Find cities with a population less than 155555 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 155555"
  },
  {
    "natural-language": "Find cities with a population less than 250000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 250000"
  },
  {
    "natural-language": "Find cities with a population less than 110000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 110000"
  },
  {
    "natural-language": "Find cities with a population less than 110111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 110111"
  },
  {
    "natural-language": "Find cities with a population less than 111111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 111111"
  },
  {
    "natural-language": "Find cities with a population less than 133970 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 133970"
  },
  {
    "natural-language": "Find cities with a population less than 300000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 300000"
  },
  {
    "natural-language": "Find cities with a population less than 368000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 368000"
  },
  {
    "natural-language": "Find cities with a population less than 333333 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 333333"
  },
  {
    "natural-language": "Find cities with a population less than 355000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 355000"
  },
  {
    "natural-language": "Find cities with a population less than 390000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 390000"
  },
  {
    "natural-language": "Find cities with a population less than 380000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 380000"
  },
  {
    "natural-language": "Find cities with a population less than 308000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 308000"
  },
  {
    "natural-language": "Find cities with a population less than 345000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 345000"
  },
  {
    "natural-language": "Find cities with a population less than 340005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 340005"
  },
  {
    "natural-language": "Find cities with a population less than 350206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 350206"
  },
  {
    "natural-language": "Find cities with a population less than 347903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 347903"
  },
  {
    "natural-language": "Find cities with a population less than 316399 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 316399"
  },
  {
    "natural-language": "Find cities with a population less than 320712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 320712"
  },
  {
    "natural-language": "Find cities with a population less than 222222 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 222222"
  },
  {
    "natural-language": "Find cities with a population less than 255000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 255000"
  },
  {
    "natural-language": "Find cities with a population less than 290000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 290000"
  },
  {
    "natural-language": "Find cities with a population less than 280000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 280000"
  },
  {
    "natural-language": "Find cities with a population less than 208000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 208000"
  },
  {
    "natural-language": "Find cities with a population less than 245000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 245000"
  },
  {
    "natural-language": "Find cities with a population less than 240005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 240005"
  },
  {
    "natural-language": "Find cities with a population less than 250206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 250206"
  },
  {
    "natural-language": "Find cities with a population less than 247903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 247903"
  },
  {
    "natural-language": "Find cities with a population less than 216299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 216299"
  },
  {
    "natural-language": "Find cities with a population less than 220712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 220712"
  },
  {
    "natural-language": "Find cities with a population less than 468000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 468000"
  },
  {
    "natural-language": "Find cities with a population less than 444444 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 444444"
  },
  {
    "natural-language": "Find cities with a population less than 455000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 455000"
  },
  {
    "natural-language": "Find cities with a population less than 490000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 490000"
  },
  {
    "natural-language": "Find cities with a population less than 480000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 480000"
  },
  {
    "natural-language": "Find cities with a population less than 408000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 408000"
  },
  {
    "natural-language": "Find cities with a population less than 445000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 445000"
  },
  {
    "natural-language": "Find cities with a population less than 440005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 440005"
  },
  {
    "natural-language": "Find cities with a population less than 450206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 450206"
  },
  {
    "natural-language": "Find cities with a population less than 447903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 447903"
  },
  {
    "natural-language": "Find cities with a population less than 416299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 416299"
  },
  {
    "natural-language": "Find cities with a population less than 420714 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 420714"
  },
  {
    "natural-language": "Find cities with a population less than 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 150000"
  },
  {
    "natural-language": "Find cities with a population less than 100,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100000"
  },
  {
    "natural-language": "Find cities with a population less than 80,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 80000"
  },
  {
    "natural-language": "Find cities with a population less than 45,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 45000"
  },
  {
    "natural-language": "Find cities with a population less than 100 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100"
  },
  {
    "natural-language": "Find cities with a population less than 90 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 90"
  },
  {
    "natural-language": "Find cities with a population less than 14 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 14"
  },
  {
    "natural-language": "Find cities with a population less than 79,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 79000"
  },
  {
    "natural-language": "Find cities with a population less than 50,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 50000"
  },
  {
    "natural-language": "Find cities with a population less than 762 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 762"
  },
  {
    "natural-language": "Find cities with a population less than 319 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 319"
  },
  {
    "natural-language": "Find cities with a population less than 846 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 846"
  },
  {
    "natural-language": "Find cities with a population less than 268,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 268000"
  },
  {
    "natural-language": "Find cities with a population less than 100,416 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100416"
  },
  {
    "natural-language": "Find cities with a population less than 2,459 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 2459"
  },
  {
    "natural-language": "Find cities with a population less than 30,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 30000"
  },
  {
    "natural-language": "Find cities with a population less than 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 150000"
  },
  {
    "natural-language": "Find cities with a population less than 700 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 700"
  },
  {
    "natural-language": "Find cities with a population less than 86 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 86"
  },
  {
    "natural-language": "Find cities with a population less than 38 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 38"
  },
  {
    "natural-language": "Find cities with a population less than 400,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 400000"
  },
  {
    "natural-language": "Find cities with a population less than 120,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 120000"
  },
  {
    "natural-language": "Find cities with a population less than 300,019 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 300019"
  },
  {
    "natural-language": "Find cities with a population less than 200,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 200000"
  },
  {
    "natural-language": "Find cities with a population less than 100,500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100500"
  },
  {
    "natural-language": "Find cities with a population less than 105,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 105000"
  },
  {
    "natural-language": "Find cities with a population less than 105,500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 105500"
  },
  {
    "natural-language": "Find cities with a population less than 155,555 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 155555"
  },
  {
    "natural-language": "Find cities with a population less than 250,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 250000"
  },
  {
    "natural-language": "Find cities with a population less than 110,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 110000"
  },
  {
    "natural-language": "Find cities with a population less than 110,111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 110111"
  },
  {
    "natural-language": "Find cities with a population less than 111,111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 111111"
  },
  {
    "natural-language": "Find cities with a population less than 133,970 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 133970"
  },
  {
    "natural-language": "Find cities with a population less than 300,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 300000"
  },
  {
    "natural-language": "Find cities with a population less than 368,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 368000"
  },
  {
    "natural-language": "Find cities with a population less than 333,333 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 333333"
  },
  {
    "natural-language": "Find cities with a population less than 355,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 355000"
  },
  {
    "natural-language": "Find cities with a population less than 390,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 390000"
  },
  {
    "natural-language": "Find cities with a population less than 380,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 380000"
  },
  {
    "natural-language": "Find cities with a population less than 308,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 308000"
  },
  {
    "natural-language": "Find cities with a population less than 345,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 345000"
  },
  {
    "natural-language": "Find cities with a population less than 340,005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 340005"
  },
  {
    "natural-language": "Find cities with a population less than 350,206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 350206"
  },
  {
    "natural-language": "Find cities with a population less than 347,903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 347903"
  },
  {
    "natural-language": "Find cities with a population less than 316,399 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 316399"
  },
  {
    "natural-language": "Find cities with a population less than 320,712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 320712"
  },
  {
    "natural-language": "Find cities with a population less than 222,222 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 222222"
  },
  {
    "natural-language": "Find cities with a population less than 255,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 255000"
  },
  {
    "natural-language": "Find cities with a population less than 290,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 290000"
  },
  {
    "natural-language": "Find cities with a population less than 280,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 280000"
  },
  {
    "natural-language": "Find cities with a population less than 208,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 208000"
  },
  {
    "natural-language": "Find cities with a population less than 245,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 245000"
  },
  {
    "natural-language": "Find cities with a population less than 240,005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 240005"
  },
  {
    "natural-language": "Find cities with a population less than 250,206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 250206"
  },
  {
    "natural-language": "Find cities with a population less than 247,903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 247903"
  },
  {
    "natural-language": "Find cities with a population less than 216,299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 216299"
  },
  {
    "natural-language": "Find cities with a population less than 220,712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 220712"
  },
  {
    "natural-language": "Find cities with a population less than 468,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 468000"
  },
  {
    "natural-language": "Find cities with a population less than 444,444 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 444444"
  },
  {
    "natural-language": "Find cities with a population less than 455,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 455000"
  },
  {
    "natural-language": "Find cities with a population less than 490,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 490000"
  },
  {
    "natural-language": "Find cities with a population less than 480,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 480000"
  },
  {
    "natural-language": "Find cities with a population less than 408,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 408000"
  },
  {
    "natural-language": "Find cities with a population less than 445,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 445000"
  },
  {
    "natural-language": "Find cities with a population less than 440,005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 440005"
  },
  {
    "natural-language": "Find cities with a population less than 450,206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 450206"
  },
  {
    "natural-language": "Find cities with a population less than 447,903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 447903"
  },
  {
    "natural-language": "Find cities with a population less than 416,299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 416299"
  },
  {
    "natural-language": "Find cities with a population less than 420,714 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 420714"
  },
  {
    "natural-language": "Find cities with a population less than 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 150000"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100000"
  },
  {
    "natural-language": "Find cities with a population of at most eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 80000"
  },
  {
    "natural-language": "Find cities with a population of at most forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 45000"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100"
  },
  {
    "natural-language": "Find cities with a population of at most ninety people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 90"
  },
  {
    "natural-language": "Find cities with a population of at most fourteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 14"
  },
  {
    "natural-language": "Find cities with a population of at most seventy nine thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 79000"
  },
  {
    "natural-language": "Find cities with a population of at most fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 50000"
  },
  {
    "natural-language": "Find cities with a population of at most seven hundred sixty two people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 762"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred nineteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 319"
  },
  {
    "natural-language": "Find cities with a population of at most eight hundred forty six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 846"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred sixty eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 268000"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred thousand four hundred sixteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100416"
  },
  {
    "natural-language": "Find cities with a population of at most two thousand four hundred fifty nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 2459"
  },
  {
    "natural-language": "Find cities with a population of at most thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 30000"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 150000"
  },
  {
    "natural-language": "Find cities with a population of at most seven hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 700"
  },
  {
    "natural-language": "Find cities with a population of at most eighty six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 86"
  },
  {
    "natural-language": "Find cities with a population of at most thirty eight people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 38"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 400000"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 120000"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred thousand nineteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 300019"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 200000"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred thousand five hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100500"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 105000"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred five thousand five hundred people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 105500"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred fifty thousand five hundred fifty five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 155555"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 250000"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 110000"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred ten thousand one hundred eleven people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 110111"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred eleven thousand one hundred eleven people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 111111"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred thirty three thousand nine hundred seventy people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 133970"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 300000"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred sixty eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 368000"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred thirty three thousand three hundred thirty three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 333333"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 355000"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 390000"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 380000"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 308000"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 345000"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred forty thousand five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 340005"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred fifty thousand two hundred six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 350206"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred forty seven thousand nine hundred three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 347903"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred sixteen thousand three hundred ninety nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 316399"
  },
  {
    "natural-language": "Find cities with a population of at most three hundred twenty thousand seven hundred twelve people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 320712"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred twenty two thousand two hundred twenty two people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 222222"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 255000"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 290000"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 280000"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 208000"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 245000"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred forty thousand five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 240005"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred fifty thousand two hundred six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 250206"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred forty seven thousand nine hundred three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 247903"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred sixteen thousand two hundred ninety nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 216299"
  },
  {
    "natural-language": "Find cities with a population of at most two hundred twenty thousand seven hundred twelve people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 220712"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred sixty eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 468000"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred forty four thousand four hundred fourty four people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 444444"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 455000"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 490000"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 480000"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred eight thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 408000"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 445000"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred forty thousand five people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 440005"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred fifty thousand two hundred six people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 450206"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred forty seven thousand nine hundred three people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 447903"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred sixteen thousand two hundred ninety nine people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 416299"
  },
  {
    "natural-language": "Find cities with a population of at most four hundred twenty thousand seven hundred forteen people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 420714"
  },
  {
    "natural-language": "Find cities with a population of at most one hundred and fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 150000"
  },
  {
    "natural-language": "Find cities with a population of at most 100000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100000"
  },
  {
    "natural-language": "Find cities with a population of at most 80000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 80000"
  },
  {
    "natural-language": "Find cities with a population of at most 45000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 45000"
  },
  {
    "natural-language": "Find cities with a population of at most 100 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100"
  },
  {
    "natural-language": "Find cities with a population of at most 90 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 90"
  },
  {
    "natural-language": "Find cities with a population of at most 14 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 14"
  },
  {
    "natural-language": "Find cities with a population of at most 79000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 79000"
  },
  {
    "natural-language": "Find cities with a population of at most 50000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 50000"
  },
  {
    "natural-language": "Find cities with a population of at most 762 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 762"
  },
  {
    "natural-language": "Find cities with a population of at most 319 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 319"
  },
  {
    "natural-language": "Find cities with a population of at most 846 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 846"
  },
  {
    "natural-language": "Find cities with a population of at most 268000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 268000"
  },
  {
    "natural-language": "Find cities with a population of at most 100416 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100416"
  },
  {
    "natural-language": "Find cities with a population of at most 2459 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 2459"
  },
  {
    "natural-language": "Find cities with a population of at most 30000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 30000"
  },
  {
    "natural-language": "Find cities with a population of at most 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 150000"
  },
  {
    "natural-language": "Find cities with a population of at most 700 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 700"
  },
  {
    "natural-language": "Find cities with a population of at most 86 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 86"
  },
  {
    "natural-language": "Find cities with a population of at most 38 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 38"
  },
  {
    "natural-language": "Find cities with a population of at most 400000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 400000"
  },
  {
    "natural-language": "Find cities with a population of at most 120000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 120000"
  },
  {
    "natural-language": "Find cities with a population of at most 300019 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 300019"
  },
  {
    "natural-language": "Find cities with a population of at most 200000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 200000"
  },
  {
    "natural-language": "Find cities with a population of at most 100500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100500"
  },
  {
    "natural-language": "Find cities with a population of at most 105000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 105000"
  },
  {
    "natural-language": "Find cities with a population of at most 105500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 105500"
  },
  {
    "natural-language": "Find cities with a population of at most 155555 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 155555"
  },
  {
    "natural-language": "Find cities with a population of at most 250000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 250000"
  },
  {
    "natural-language": "Find cities with a population of at most 110000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 110000"
  },
  {
    "natural-language": "Find cities with a population of at most 110111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 110111"
  },
  {
    "natural-language": "Find cities with a population of at most 111111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 111111"
  },
  {
    "natural-language": "Find cities with a population of at most 133970 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 133970"
  },
  {
    "natural-language": "Find cities with a population of at most 300000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 300000"
  },
  {
    "natural-language": "Find cities with a population of at most 368000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 368000"
  },
  {
    "natural-language": "Find cities with a population of at most 333333 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 333333"
  },
  {
    "natural-language": "Find cities with a population of at most 355000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 355000"
  },
  {
    "natural-language": "Find cities with a population of at most 390000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 390000"
  },
  {
    "natural-language": "Find cities with a population of at most 380000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 380000"
  },
  {
    "natural-language": "Find cities with a population of at most 308000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 308000"
  },
  {
    "natural-language": "Find cities with a population of at most 345000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 345000"
  },
  {
    "natural-language": "Find cities with a population of at most 340005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 340005"
  },
  {
    "natural-language": "Find cities with a population of at most 350206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 350206"
  },
  {
    "natural-language": "Find cities with a population of at most 347903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 347903"
  },
  {
    "natural-language": "Find cities with a population of at most 316399 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 316399"
  },
  {
    "natural-language": "Find cities with a population of at most 320712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 320712"
  },
  {
    "natural-language": "Find cities with a population of at most 222222 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 222222"
  },
  {
    "natural-language": "Find cities with a population of at most 255000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 255000"
  },
  {
    "natural-language": "Find cities with a population of at most 290000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 290000"
  },
  {
    "natural-language": "Find cities with a population of at most 280000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 280000"
  },
  {
    "natural-language": "Find cities with a population of at most 208000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 208000"
  },
  {
    "natural-language": "Find cities with a population of at most 245000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 245000"
  },
  {
    "natural-language": "Find cities with a population of at most 240005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 240005"
  },
  {
    "natural-language": "Find cities with a population of at most 250206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 250206"
  },
  {
    "natural-language": "Find cities with a population of at most 247903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 247903"
  },
  {
    "natural-language": "Find cities with a population of at most 216299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 216299"
  },
  {
    "natural-language": "Find cities with a population of at most 220712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 220712"
  },
  {
    "natural-language": "Find cities with a population of at most 468000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 468000"
  },
  {
    "natural-language": "Find cities with a population of at most 444444 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 444444"
  },
  {
    "natural-language": "Find cities with a population of at most 455000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 455000"
  },
  {
    "natural-language": "Find cities with a population of at most 490000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 490000"
  },
  {
    "natural-language": "Find cities with a population of at most 480000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 480000"
  },
  {
    "natural-language": "Find cities with a population of at most 408000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 408000"
  },
  {
    "natural-language": "Find cities with a population of at most 445000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 445000"
  },
  {
    "natural-language": "Find cities with a population of at most 440005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 440005"
  },
  {
    "natural-language": "Find cities with a population of at most 450206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 450206"
  },
  {
    "natural-language": "Find cities with a population of at most 447903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 447903"
  },
  {
    "natural-language": "Find cities with a population of at most 416299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 416299"
  },
  {
    "natural-language": "Find cities with a population of at most 420714 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 420714"
  },
  {
    "natural-language": "Find cities with a population of at most 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 150000"
  },
  {
    "natural-language": "Find cities with a population of at most 100,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100000"
  },
  {
    "natural-language": "Find cities with a population of at most 80,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 80000"
  },
  {
    "natural-language": "Find cities with a population of at most 45,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 45000"
  },
  {
    "natural-language": "Find cities with a population of at most 100 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100"
  },
  {
    "natural-language": "Find cities with a population of at most 90 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 90"
  },
  {
    "natural-language": "Find cities with a population of at most 14 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 14"
  },
  {
    "natural-language": "Find cities with a population of at most 79,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 79000"
  },
  {
    "natural-language": "Find cities with a population of at most 50,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 50000"
  },
  {
    "natural-language": "Find cities with a population of at most 762 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 762"
  },
  {
    "natural-language": "Find cities with a population of at most 319 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 319"
  },
  {
    "natural-language": "Find cities with a population of at most 846 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 846"
  },
  {
    "natural-language": "Find cities with a population of at most 268,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 268000"
  },
  {
    "natural-language": "Find cities with a population of at most 100,416 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100416"
  },
  {
    "natural-language": "Find cities with a population of at most 2,459 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 2459"
  },
  {
    "natural-language": "Find cities with a population of at most 30,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 30000"
  },
  {
    "natural-language": "Find cities with a population of at most 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 150000"
  },
  {
    "natural-language": "Find cities with a population of at most 700 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 700"
  },
  {
    "natural-language": "Find cities with a population of at most 86 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 86"
  },
  {
    "natural-language": "Find cities with a population of at most 38 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 38"
  },
  {
    "natural-language": "Find cities with a population of at most 400,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 400000"
  },
  {
    "natural-language": "Find cities with a population of at most 120,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 120000"
  },
  {
    "natural-language": "Find cities with a population of at most 300,019 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 300019"
  },
  {
    "natural-language": "Find cities with a population of at most 200,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 200000"
  },
  {
    "natural-language": "Find cities with a population of at most 100,500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100500"
  },
  {
    "natural-language": "Find cities with a population of at most 105,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 105000"
  },
  {
    "natural-language": "Find cities with a population of at most 105,500 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 105500"
  },
  {
    "natural-language": "Find cities with a population of at most 155,555 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 155555"
  },
  {
    "natural-language": "Find cities with a population of at most 250,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 250000"
  },
  {
    "natural-language": "Find cities with a population of at most 110,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 110000"
  },
  {
    "natural-language": "Find cities with a population of at most 110,111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 110111"
  },
  {
    "natural-language": "Find cities with a population of at most 111,111 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 111111"
  },
  {
    "natural-language": "Find cities with a population of at most 133,970 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 133970"
  },
  {
    "natural-language": "Find cities with a population of at most 300,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 300000"
  },
  {
    "natural-language": "Find cities with a population of at most 368,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 368000"
  },
  {
    "natural-language": "Find cities with a population of at most 333,333 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 333333"
  },
  {
    "natural-language": "Find cities with a population of at most 355,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 355000"
  },
  {
    "natural-language": "Find cities with a population of at most 390,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 390000"
  },
  {
    "natural-language": "Find cities with a population of at most 380,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 380000"
  },
  {
    "natural-language": "Find cities with a population of at most 308,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 308000"
  },
  {
    "natural-language": "Find cities with a population of at most 345,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 345000"
  },
  {
    "natural-language": "Find cities with a population of at most 340,005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 340005"
  },
  {
    "natural-language": "Find cities with a population of at most 350,206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 350206"
  },
  {
    "natural-language": "Find cities with a population of at most 347,903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 347903"
  },
  {
    "natural-language": "Find cities with a population of at most 316,399 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 316399"
  },
  {
    "natural-language": "Find cities with a population of at most 320,712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 320712"
  },
  {
    "natural-language": "Find cities with a population of at most 222,222 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 222222"
  },
  {
    "natural-language": "Find cities with a population of at most 255,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 255000"
  },
  {
    "natural-language": "Find cities with a population of at most 290,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 290000"
  },
  {
    "natural-language": "Find cities with a population of at most 280,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 280000"
  },
  {
    "natural-language": "Find cities with a population of at most 208,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 208000"
  },
  {
    "natural-language": "Find cities with a population of at most 245,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 245000"
  },
  {
    "natural-language": "Find cities with a population of at most 240,005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 240005"
  },
  {
    "natural-language": "Find cities with a population of at most 250,206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 250206"
  },
  {
    "natural-language": "Find cities with a population of at most 247,903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 247903"
  },
  {
    "natural-language": "Find cities with a population of at most 216,299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 216299"
  },
  {
    "natural-language": "Find cities with a population of at most 220,712 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 220712"
  },
  {
    "natural-language": "Find cities with a population of at most 468,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 468000"
  },
  {
    "natural-language": "Find cities with a population of at most 444,444 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 444444"
  },
  {
    "natural-language": "Find cities with a population of at most 455,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 455000"
  },
  {
    "natural-language": "Find cities with a population of at most 490,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 490000"
  },
  {
    "natural-language": "Find cities with a population of at most 480,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 480000"
  },
  {
    "natural-language": "Find cities with a population of at most 408,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 408000"
  },
  {
    "natural-language": "Find cities with a population of at most 445,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 445000"
  },
  {
    "natural-language": "Find cities with a population of at most 440,005 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 440005"
  },
  {
    "natural-language": "Find cities with a population of at most 450,206 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 450206"
  },
  {
    "natural-language": "Find cities with a population of at most 447,903 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 447903"
  },
  {
    "natural-language": "Find cities with a population of at most 416,299 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 416299"
  },
  {
    "natural-language": "Find cities with a population of at most 420,714 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 420714"
  },
  {
    "natural-language": "Find cities with a population of at most 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 150000"
  },
  {
    "natural-language": "Find cities and order by population, descending",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities ORDER BY population DESC"
  },
  {
    "natural-language": "Find cities and order by size, descending",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities ORDER BY ST_Area(boundary) DESC"
  },
  {
    "natural-language": "Find cities and order by area, descending",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities ORDER BY ST_Area(boundary) DESC"
  },  
  # Find cities by matching criteria around buildings ( 1 - 20)
  {
    "natural-language": "Find cities that contain at least one building that is owned by an individual",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 1"
  },
  {
    "natural-language": "Find cities that contain at least two buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 2"
  },
  {
    "natural-language": "Find cities that contain at least three buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 3"
  },
  {
    "natural-language": "Find cities that contain at least four buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 4"
  },
  {
    "natural-language": "Find cities that contain at least five buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 5"
  },
  {
    "natural-language": "Find cities that contain at least six buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 6"
  },
  {
    "natural-language": "Find cities that contain at least seven buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 7"
  },
  {
    "natural-language": "Find cities that contain at least eight buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 8"
  },
  {
    "natural-language": "Find cities that contain at least nine buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 9"
  },
  {
    "natural-language": "Find cities that contain at least ten buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 10"
  },
  {
    "natural-language": "Find cities that contain at least eleven buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 11"
  },
  {
    "natural-language": "Find cities that contain at least twelve buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 12"
  },
  {
    "natural-language": "Find cities that contain at least thirteen buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 13"
  },
  {
    "natural-language": "Find cities that contain at least fourteen buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 14"
  },
  {
    "natural-language": "Find cities that contain at least fifteen buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 15"
  },
  {
    "natural-language": "Find cities that contain at least sixteen buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 16"
  },
  {
    "natural-language": "Find cities that contain at least seventeen buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 17"
  },
  {
    "natural-language": "Find cities that contain at least eighteen buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 18"
  },
  {
    "natural-language": "Find cities that contain at least nineteen buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 19"
  },
  {
    "natural-language": "Find cities that contain at least twenty buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 20"
  },
  {
    "natural-language": "Find cities that contain at least 1 building that is owned by an individual",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 1"
  },
  {
    "natural-language": "Find cities that contain at least 2 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 2"
  },
  {
    "natural-language": "Find cities that contain at least 3 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 3"
  },
  {
    "natural-language": "Find cities that contain at least 4 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 4"
  },
  {
    "natural-language": "Find cities that contain at least 5 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 5"
  },
  {
    "natural-language": "Find cities that contain at least 6 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 6"
  },
  {
    "natural-language": "Find cities that contain at least 7 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 7"
  },
  {
    "natural-language": "Find cities that contain at least 8 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 8"
  },
  {
    "natural-language": "Find cities that contain at least 9 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 9"
  },
  {
    "natural-language": "Find cities that contain at least 10 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 10"
  },
  {
    "natural-language": "Find cities that contain at least 11 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 11"
  },
  {
    "natural-language": "Find cities that contain at least 12 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 12"
  },
  {
    "natural-language": "Find cities that contain at least 13 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 13"
  },
  {
    "natural-language": "Find cities that contain at least 14 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 14"
  },
  {
    "natural-language": "Find cities that contain at least 15 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 15"
  },
  {
    "natural-language": "Find cities that contain at least 16 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 16"
  },
  {
    "natural-language": "Find cities that contain at least 17 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 17"
  },
  {
    "natural-language": "Find cities that contain at least 18 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 18"
  },
  {
    "natural-language": "Find cities that contain at least 19 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 19"
  },
  {
    "natural-language": "Find cities that contain at least 20 buildings that are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY c.id HAVING COUNT(b.id) >= 20"
  },
  {
    "natural-language": "Find cities that contain at least one building that is owned by a group",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 1"
  },
  {
    "natural-language": "Find cities that contain at least two buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 2"
  },
  {
    "natural-language": "Find cities that contain at least three buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 3"
  },
  {
    "natural-language": "Find cities that contain at least four buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 4"
  },
  {
    "natural-language": "Find cities that contain at least five buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 5"
  },
  {
    "natural-language": "Find cities that contain at least six buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 6"
  },
  {
    "natural-language": "Find cities that contain at least seven buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 7"
  },
  {
    "natural-language": "Find cities that contain at least eight buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 8"
  },
  {
    "natural-language": "Find cities that contain at least nine buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 9"
  },
  {
    "natural-language": "Find cities that contain at least ten buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 10"
  },
  {
    "natural-language": "Find cities that contain at least eleven buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 11"
  },
  {
    "natural-language": "Find cities that contain at least twelve buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 12"
  },
  {
    "natural-language": "Find cities that contain at least thirteen buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 13"
  },
  {
    "natural-language": "Find cities that contain at least fourteen buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 14"
  },
  {
    "natural-language": "Find cities that contain at least fifteen buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 15"
  },
  {
    "natural-language": "Find cities that contain at least sixteen buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 16"
  },
  {
    "natural-language": "Find cities that contain at least seventeen buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 17"
  },
  {
    "natural-language": "Find cities that contain at least eighteen buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 18"
  },
  {
    "natural-language": "Find cities that contain at least nineteen buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 19"
  },
  {
    "natural-language": "Find cities that contain at least twenty buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 20"
  },
  {
    "natural-language": "Find cities that contain at least 1 building that is owned by an individual",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 1"
  },
  {
    "natural-language": "Find cities that contain at least 2 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 2"
  },
  {
    "natural-language": "Find cities that contain at least 3 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 3"
  },
  {
    "natural-language": "Find cities that contain at least 4 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 4"
  },
  {
    "natural-language": "Find cities that contain at least 5 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 5"
  },
  {
    "natural-language": "Find cities that contain at least 6 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 6"
  },
  {
    "natural-language": "Find cities that contain at least 7 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 7"
  },
  {
    "natural-language": "Find cities that contain at least 8 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 8"
  },
  {
    "natural-language": "Find cities that contain at least 9 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 9"
  },
  {
    "natural-language": "Find cities that contain at least 10 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 10"
  },
  {
    "natural-language": "Find cities that contain at least 11 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 11"
  },
  {
    "natural-language": "Find cities that contain at least 12 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 12"
  },
  {
    "natural-language": "Find cities that contain at least 13 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 13"
  },
  {
    "natural-language": "Find cities that contain at least 14 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 14"
  },
  {
    "natural-language": "Find cities that contain at least 15 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 15"
  },
  {
    "natural-language": "Find cities that contain at least 16 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 16"
  },
  {
    "natural-language": "Find cities that contain at least 17 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 17"
  },
  {
    "natural-language": "Find cities that contain at least 18 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 18"
  },
  {
    "natural-language": "Find cities that contain at least 19 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 19"
  },
  {
    "natural-language": "Find cities that contain at least 20 buildings that are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY c.id HAVING COUNT(b.id) >= 20"
  },
  {
    "natural-language": "Find cities where the majority of buildings are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id GROUP BY c.id HAVING SUM(CASE WHEN o.is_group = FALSE THEN 1 ELSE 0 END) > SUM(CASE WHEN o.is_group = TRUE THEN 1 ELSE 0 END)"
  },
  {
    "natural-language": "Find cities where the minority of buildings are owned by individuals",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id GROUP BY c.id HAVING SUM(CASE WHEN o.is_group = TRUE THEN 1 ELSE 0 END) > SUM(CASE WHEN o.is_group = FALSE THEN 1 ELSE 0 END)"
  },
  {
    "natural-language": "Find cities where the majority of buildings are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id GROUP BY c.id HAVING COUNT(CASE WHEN o.is_group = TRUE THEN 1 END) > COUNT(CASE WHEN o.is_group = FALSE THEN 1 END)"
  },
  {
    "natural-language": "Find cities where the minority of buildings are owned by groups",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id GROUP BY c.id HAVING COUNT(CASE WHEN o.is_group = FALSE THEN 1 END) > COUNT(CASE WHEN o.is_group = TRUE THEN 1 END)"
  },
  {
    "natural-language": "Find the city with the most buildings",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id ORDER BY COUNT(b.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the least buildings",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN buildings b ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id ORDER BY COUNT(b.id) ASC LIMIT 1"
  },

  # Find cities by matching criteria around number of parks (1 - 20)
  {
    "natural-language": "Find the city with the greatest number of parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id ORDER BY COUNT(p.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest number of parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id ORDER BY COUNT(p.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find cities with no parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c WHERE NOT EXISTS (SELECT 1 FROM parks p WHERE ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)))"
  },
  {
    "natural-language": "Find cities with at least one park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 1 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least two parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 2 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least three parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 3 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least four parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 4 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least five parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 5 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least six parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 6 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least seven parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 7 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least eight parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 8 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least nine parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 9 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least ten parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 10 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least eleven parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 11 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least twelve parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 12 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least thirteen parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 13 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least fourteen parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 14 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least fifteen parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 15 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least sixteen parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 16 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least seventeen parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 17 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least eighteen parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 18 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least nineteen parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 19 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least twenty parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 20 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 1 park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 1 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 2 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 2 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 3 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 3 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 4 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 4 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 5 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 5 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 6 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 6 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 7 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 7 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 8 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 8 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 9 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 9 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 10 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 10 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 11 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 11 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 12 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 12 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 13 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 13 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 14 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 14 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 15 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 15 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 16 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 16 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 17 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 17 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 18 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 18 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 19 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 19 ORDER BY COUNT(p.id)"
  },
  {
    "natural-language": "Find cities with at least 20 parks",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING COUNT(p.id) >= 20 ORDER BY COUNT(p.id)"
  },

  # Find cities by matching criteria around park area (1 - 10)
  {
    "natural-language": "Find all cities that contain at least one square kilometer of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 1000"
  },
  {
    "natural-language": "Find all cities that contain at least two square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 2000"
  },
  {
    "natural-language": "Find all cities that contain at least three square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 3000"
  },
  {
    "natural-language": "Find all cities that contain at least four square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 4000"
  },
  {
    "natural-language": "Find all cities that contain at least five square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 5000"
  },
  {
    "natural-language": "Find all cities that contain at least six square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 6000"
  },
  {
    "natural-language": "Find all cities that contain at least seven square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 7000"
  },
  {
    "natural-language": "Find all cities that contain at least eight square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 8000"
  },
  {
    "natural-language": "Find all cities that contain at least nine square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 9000"
  },
  {
    "natural-language": "Find all cities that contain at least ten square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 10000"
  },
  {
    "natural-language": "Find all cities that contain at least 1 square kilometer of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 1000"
  },
  {
    "natural-language": "Find all cities that contain at least 2 square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 2000"
  },
  {
    "natural-language": "Find all cities that contain at least 3 square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 3000"
  },
  {
    "natural-language": "Find all cities that contain at least 4 square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 4000"
  },
  {
    "natural-language": "Find all cities that contain at least 5 square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 5000"
  },
  {
    "natural-language": "Find all cities that contain at least 6 square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 6000"
  },
  {
    "natural-language": "Find all cities that contain at least 7 square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 7000"
  },
  {
    "natural-language": "Find all cities that contain at least 8 square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 8000"
  },
  {
    "natural-language": "Find all cities that contain at least 9 square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 9000"
  },
  {
    "natural-language": "Find all cities that contain at least 10 square kilometers of park",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary, SUM(ST_Area(ST_Transform(p.boundary, 3857))) AS total_area FROM cities c JOIN parks p ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id HAVING SUM(ST_Area(ST_Transform(p.boundary, 3857))) >= 10000"
  },
 
  # Find cities by matching criteria around number of roads (1 - 20)
  {
    "natural-language": "Find the city with the fewest number roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the greatest number of roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find cities that contain at least one entire road",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 1"
  },
  {
    "natural-language": "Find cities that contain at least two entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 2"
  },
  {
    "natural-language": "Find cities that contain at least three entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 3"
  },
  {
    "natural-language": "Find cities that contain at least four entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 4"
  },
  {
    "natural-language": "Find cities that contain at least five entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 5"
  },
  {
    "natural-language": "Find cities that contain at least six entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 6"
  },
  {
    "natural-language": "Find cities that contain at least seven entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 7"
  },
  {
    "natural-language": "Find cities that contain at least eight entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 8"
  },
  {
    "natural-language": "Find cities that contain at least nine entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 9"
  },
  {
    "natural-language": "Find cities that contain at least ten entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 10"
  },
  {
    "natural-language": "Find cities that contain at least eleven entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 11"
  },
  {
    "natural-language": "Find cities that contain at least twelve entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 12"
  },
  {
    "natural-language": "Find cities that contain at least thirteen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 13"
  },
  {
    "natural-language": "Find cities that contain at least fourteen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 14"
  },
  {
    "natural-language": "Find cities that contain at least fifteen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 15"
  },
  {
    "natural-language": "Find cities that contain at least sixteen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 16"
  },
  {
    "natural-language": "Find cities that contain at least seventeen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 17"
  },
  {
    "natural-language": "Find cities that contain at least eighteen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 18"
  },
  {
    "natural-language": "Find cities that contain at least nineteen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 19"
  },
  {
    "natural-language": "Find cities that contain at least twenty entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 20"
  },
  {
    "natural-language": "Find cities that fully contain at least one road",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 1"
  },
  {
    "natural-language": "Find cities that fully contain at least two roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 2"
  },
  {
    "natural-language": "Find cities that fully contain at least three roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 3"
  },
  {
    "natural-language": "Find cities that fully contain at least four roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 4"
  },
  {
    "natural-language": "Find cities that fully contain at least five roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 5"
  },
  {
    "natural-language": "Find cities that fully contain at least six roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 6"
  },
  {
    "natural-language": "Find cities that fully contain at least seven roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 7"
  },
  {
    "natural-language": "Find cities that fully contain at least eight roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 8"
  },
  {
    "natural-language": "Find cities that fully contain at least nine roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 9"
  },
  {
    "natural-language": "Find cities that fully contain at least ten roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 10"
  },
  {
    "natural-language": "Find cities that fully contain at least eleven roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 11"
  },
  {
    "natural-language": "Find cities that fully contain at least twelve roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 12"
  },
  {
    "natural-language": "Find cities that fully contain at least thirteen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 13"
  },
  {
    "natural-language": "Find cities that fully contain at least fourteen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 14"
  },
  {
    "natural-language": "Find cities that fully contain at least fifteen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 15"
  },
  {
    "natural-language": "Find cities that fully contain at least sixteen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 16"
  },
  {
    "natural-language": "Find cities that fully contain at least seventeen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 17"
  },
  {
    "natural-language": "Find cities that fully contain at least eighteen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 18"
  },
  {
    "natural-language": "Find cities that fully contain at least nineteen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 19"
  },
  {
    "natural-language": "Find cities that fully contain at least twenty roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 20"
  },

  {
    "natural-language": "Find cities that contain a part of at least one road",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 1"
  },
  {
    "natural-language": "Find cities that contain a part of at least two roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 2"
  },
  {
    "natural-language": "Find cities that contain a part of at least three roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 3"
  },
  {
    "natural-language": "Find cities that contain a part of at least four roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 4"
  },
  {
    "natural-language": "Find cities that contain a part of at least five roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 5"
  },
  {
    "natural-language": "Find cities that contain a part of at least six roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 6"
  },
  {
    "natural-language": "Find cities that contain a part of at least seven roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 7"
  },
  {
    "natural-language": "Find cities that contain a part of at least eight roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 8"
  },
  {
    "natural-language": "Find cities that contain a part of at least nine roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 9"
  },
  {
    "natural-language": "Find cities that contain a part of at least ten roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 10"
  },
  {
    "natural-language": "Find cities that contain a part of at least eleven roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 11"
  },
  {
    "natural-language": "Find cities that contain a part of at least twelve roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 12"
  },
  {
    "natural-language": "Find cities that contain a part of at least thirteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 13"
  },
  {
    "natural-language": "Find cities that contain a part of at least fourteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 14"
  },
  {
    "natural-language": "Find cities that contain a part of at least fifteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 15"
  },
  {
    "natural-language": "Find cities that contain a part of at least sixteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 16"
  },
  {
    "natural-language": "Find cities that contain a part of at least seventeen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 17"
  },
  {
    "natural-language": "Find cities that contain a part of at least eighteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 18"
  },
  {
    "natural-language": "Find cities that contain a part of at least nineteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 19"
  },
  {
    "natural-language": "Find cities that contain a part of at least twenty roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 20"
  },
  {
    "natural-language": "Find cities that contain part of at least one road",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 1"
  },
  {
    "natural-language": "Find cities that contain part of at least two roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 2"
  },
  {
    "natural-language": "Find cities that contain part of at least three roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 3"
  },
  {
    "natural-language": "Find cities that contain part of at least four roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 4"
  },
  {
    "natural-language": "Find cities that contain part of at least five roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 5"
  },
  {
    "natural-language": "Find cities that contain part of at least six roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 6"
  },
  {
    "natural-language": "Find cities that contain part of at least seven roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 7"
  },
  {
    "natural-language": "Find cities that contain part of at least eight roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 8"
  },
  {
    "natural-language": "Find cities that contain part of at least nine roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 9"
  },
  {
    "natural-language": "Find cities that contain part of at least ten roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 10"
  },
  {
    "natural-language": "Find cities that contain part of at least eleven roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 11"
  },
  {
    "natural-language": "Find cities that contain part of at least twelve roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 12"
  },
  {
    "natural-language": "Find cities that contain part of at least thirteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 13"
  },
  {
    "natural-language": "Find cities that contain part of at least fourteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 14"
  },
  {
    "natural-language": "Find cities that contain part of at least fifteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 15"
  },
  {
    "natural-language": "Find cities that contain part of at least sixteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 16"
  },
  {
    "natural-language": "Find cities that contain part of at least seventeen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 17"
  },
  {
    "natural-language": "Find cities that contain part of at least eighteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 18"
  },
  {
    "natural-language": "Find cities that contain part of at least nineteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 19"
  },
  {
    "natural-language": "Find cities that contain part of at least twenty roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 20"
  },
  {
    "natural-language": "Find cities that contain a section of at least one road",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 1"
  },
  {
    "natural-language": "Find cities that contain a section of at least two roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 2"
  },
  {
    "natural-language": "Find cities that contain a section of at least three roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 3"
  },
  {
    "natural-language": "Find cities that contain a section of at least four roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 4"
  },
  {
    "natural-language": "Find cities that contain a section of at least five roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 5"
  },
  {
    "natural-language": "Find cities that contain a section of at least six roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 6"
  },
  {
    "natural-language": "Find cities that contain a section of at least seven roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 7"
  },
  {
    "natural-language": "Find cities that contain a section of at least eight roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 8"
  },
  {
    "natural-language": "Find cities that contain a section of at least nine roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 9"
  },
  {
    "natural-language": "Find cities that contain a section of at least ten roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 10"
  },
  {
    "natural-language": "Find cities that contain a section of at least eleven roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 11"
  },
  {
    "natural-language": "Find cities that contain a section of at least twelve roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 12"
  },
  {
    "natural-language": "Find cities that contain a section of at least thirteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 13"
  },
  {
    "natural-language": "Find cities that contain a section of at least fourteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 14"
  },
  {
    "natural-language": "Find cities that contain a section of at least fifteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 15"
  },
  {
    "natural-language": "Find cities that contain a section of at least sixteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 16"
  },
  {
    "natural-language": "Find cities that contain a section of at least seventeen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 17"
  },
  {
    "natural-language": "Find cities that contain a section of at least eighteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 18"
  },
  {
    "natural-language": "Find cities that contain a section of at least nineteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 19"
  },
  {
    "natural-language": "Find cities that contain a section of at least twenty roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 20"
  },
  {
    "natural-language": "Find cities that contain at least 1 entire road",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 1"
  },
  {
    "natural-language": "Find cities that contain at least 2 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 2"
  },
  {
    "natural-language": "Find cities that contain at least 3 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 3"
  },
  {
    "natural-language": "Find cities that contain at least 4 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 4"
  },
  {
    "natural-language": "Find cities that contain at least 5 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 5"
  },
  {
    "natural-language": "Find cities that contain at least 6 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 6"
  },
  {
    "natural-language": "Find cities that contain at least 7 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 7"
  },
  {
    "natural-language": "Find cities that contain at least 8 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 8"
  },
  {
    "natural-language": "Find cities that contain at least 9 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 9"
  },
  {
    "natural-language": "Find cities that contain at least 10 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 10"
  },
  {
    "natural-language": "Find cities that contain at least 11 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 11"
  },
  {
    "natural-language": "Find cities that contain at least 12 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 12"
  },
  {
    "natural-language": "Find cities that contain at least 13 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 13"
  },
  {
    "natural-language": "Find cities that contain at least 14 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 14"
  },
  {
    "natural-language": "Find cities that contain at least 15 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 15"
  },
  {
    "natural-language": "Find cities that contain at least 16 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 16"
  },
  {
    "natural-language": "Find cities that contain at least 17 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 17"
  },
  {
    "natural-language": "Find cities that contain at least 18 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 18"
  },
  {
    "natural-language": "Find cities that contain at least 19 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 19"
  },
  {
    "natural-language": "Find cities that contain at least 20 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 20"
  },
  {
    "natural-language": "Find cities that fully contain at least 1 road",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 1"
  },
  {
    "natural-language": "Find cities that fully contain at least 2 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 2"
  },
  {
    "natural-language": "Find cities that fully contain at least 3 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 3"
  },
  {
    "natural-language": "Find cities that fully contain at least 4 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 4"
  },
  {
    "natural-language": "Find cities that fully contain at least 5 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 5"
  },
  {
    "natural-language": "Find cities that fully contain at least 6 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 6"
  },
  {
    "natural-language": "Find cities that fully contain at least 7 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 7"
  },
  {
    "natural-language": "Find cities that fully contain at least 8 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 8"
  },
  {
    "natural-language": "Find cities that fully contain at least 9 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 9"
  },
  {
    "natural-language": "Find cities that fully contain at least 10 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 10"
  },
  {
    "natural-language": "Find cities that fully contain at least 11 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 11"
  },
  {
    "natural-language": "Find cities that fully contain at least 12 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 12"
  },
  {
    "natural-language": "Find cities that fully contain at least 13 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 13"
  },
  {
    "natural-language": "Find cities that fully contain at least 14 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 14"
  },
  {
    "natural-language": "Find cities that fully contain at least 15 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 15"
  },
  {
    "natural-language": "Find cities that fully contain at least 16 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 16"
  },
  {
    "natural-language": "Find cities that fully contain at least 17 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 17"
  },
  {
    "natural-language": "Find cities that fully contain at least 18 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 18"
  },
  {
    "natural-language": "Find cities that fully contain at least 19 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 19"
  },
  {
    "natural-language": "Find cities that fully contain at least 20 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 20"
  },
  {
    "natural-language": "Find cities that contain a part of at least 1 road",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 1"
  },
  {
    "natural-language": "Find cities that contain a part of at least 2 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 2"
  },
  {
    "natural-language": "Find cities that contain a part of at least 3 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 3"
  },
  {
    "natural-language": "Find cities that contain a part of at least 4 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 4"
  },
  {
    "natural-language": "Find cities that contain a part of at least 5 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 5"
  },
  {
    "natural-language": "Find cities that contain a part of at least 6 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 6"
  },
  {
    "natural-language": "Find cities that contain a part of at least 7 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 7"
  },
  {
    "natural-language": "Find cities that contain a part of at least 8 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 8"
  },
  {
    "natural-language": "Find cities that contain a part of at least 9 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 9"
  },
  {
    "natural-language": "Find cities that contain a part of at least 10 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 10"
  },
  {
    "natural-language": "Find cities that contain a part of at least 11 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 11"
  },
  {
    "natural-language": "Find cities that contain a part of at least 12 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 12"
  },
  {
    "natural-language": "Find cities that contain a part of at least 13 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 13"
  },
  {
    "natural-language": "Find cities that contain a part of at least 14 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 14"
  },
  {
    "natural-language": "Find cities that contain a part of at least 15 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 15"
  },
  {
    "natural-language": "Find cities that contain a part of at least 16 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 16"
  },
  {
    "natural-language": "Find cities that contain a part of at least 17 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 17"
  },
  {
    "natural-language": "Find cities that contain a part of at least 18 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 18"
  },
  {
    "natural-language": "Find cities that contain a part of at least 19 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 19"
  },
  {
    "natural-language": "Find cities that contain a part of at least 20 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 20"
  },
  {
    "natural-language": "Find cities that contain part of at least 1 road",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 1"
  },
  {
    "natural-language": "Find cities that contain part of at least 2 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 2"
  },
  {
    "natural-language": "Find cities that contain part of at least 3 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 3"
  },
  {
    "natural-language": "Find cities that contain part of at least 4 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 4"
  },
  {
    "natural-language": "Find cities that contain part of at least 5 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 5"
  },
  {
    "natural-language": "Find cities that contain part of at least 6 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 6"
  },
  {
    "natural-language": "Find cities that contain part of at least 7 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 7"
  },
  {
    "natural-language": "Find cities that contain part of at least 8 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 8"
  },
  {
    "natural-language": "Find cities that contain part of at least 9 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 9"
  },
  {
    "natural-language": "Find cities that contain part of at least 10 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 10"
  },
  {
    "natural-language": "Find cities that contain part of at least 11 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 11"
  },
  {
    "natural-language": "Find cities that contain part of at least 12 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 12"
  },
  {
    "natural-language": "Find cities that contain part of at least 13 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 13"
  },
  {
    "natural-language": "Find cities that contain part of at least 14 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 14"
  },
  {
    "natural-language": "Find cities that contain part of at least 15 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 15"
  },
  {
    "natural-language": "Find cities that contain part of at least 16 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 16"
  },
  {
    "natural-language": "Find cities that contain part of at least 17 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 17"
  },
  {
    "natural-language": "Find cities that contain part of at least 18 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 18"
  },
  {
    "natural-language": "Find cities that contain part of at least 19 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 19"
  },
  {
    "natural-language": "Find cities that contain part of at least 20 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 20"
  },
  {
    "natural-language": "Find cities that contain a section of at least 1 road",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 1"
  },
  {
    "natural-language": "Find cities that contain a section of at least 2 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 2"
  },
  {
    "natural-language": "Find cities that contain a section of at least 3 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 3"
  },
  {
    "natural-language": "Find cities that contain a section of at least 4 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 4"
  },
  {
    "natural-language": "Find cities that contain a section of at least 5 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 5"
  },
  {
    "natural-language": "Find cities that contain a section of at least 6 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 6"
  },
  {
    "natural-language": "Find cities that contain a section of at least 7 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 7"
  },
  {
    "natural-language": "Find cities that contain a section of at least 8 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 8"
  },
  {
    "natural-language": "Find cities that contain a section of at least 9 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 9"
  },
  {
    "natural-language": "Find cities that contain a section of at least 10 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 10"
  },
  {
    "natural-language": "Find cities that contain a section of at least 11 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 11"
  },
  {
    "natural-language": "Find cities that contain a section of at least 12 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 12"
  },
  {
    "natural-language": "Find cities that contain a section of at least 13 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 13"
  },
  {
    "natural-language": "Find cities that contain a section of at least 14 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 14"
  },
  {
    "natural-language": "Find cities that contain a section of at least 15 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 15"
  },
  {
    "natural-language": "Find cities that contain a section of at least 16 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 16"
  },
  {
    "natural-language": "Find cities that contain a section of at least 17 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 17"
  },
  {
    "natural-language": "Find cities that contain a section of at least 18 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 18"
  },
  {
    "natural-language": "Find cities that contain a section of at least 19 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 19"
  },
  {
    "natural-language": "Find cities that contain a section of at least 20 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) >= 20"
  },
  {
    "natural-language": "Find cities that contain at most one entire road",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 1"
  },
  {
    "natural-language": "Find cities that contain at most two entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 2"
  },
  {
    "natural-language": "Find cities that contain at most three entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 3"
  },
  {
    "natural-language": "Find cities that contain at most four entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 4"
  },
  {
    "natural-language": "Find cities that contain at most five entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 5"
  },
  {
    "natural-language": "Find cities that contain at most six entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 6"
  },
  {
    "natural-language": "Find cities that contain at most seven entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 7"
  },
  {
    "natural-language": "Find cities that contain at most eight entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 8"
  },
  {
    "natural-language": "Find cities that contain at most nine entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 9"
  },
  {
    "natural-language": "Find cities that contain at most ten entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 10"
  },
  {
    "natural-language": "Find cities that contain at most eleven entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 11"
  },
  {
    "natural-language": "Find cities that contain at most twelve entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 12"
  },
  {
    "natural-language": "Find cities that contain at most thirteen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 13"
  },
  {
    "natural-language": "Find cities that contain at most fourteen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 14"
  },
  {
    "natural-language": "Find cities that contain at most fifteen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 15"
  },
  {
    "natural-language": "Find cities that contain at most sixteen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 16"
  },
  {
    "natural-language": "Find cities that contain at most seventeen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 17"
  },
  {
    "natural-language": "Find cities that contain at most eighteen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 18"
  },
  {
    "natural-language": "Find cities that contain at most nineteen entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 19"
  },
  {
    "natural-language": "Find cities that contain at most twenty entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 20"
  },
  {
    "natural-language": "Find cities that fully contain at most one road",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 1"
  },
  {
    "natural-language": "Find cities that fully contain at most two roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 2"
  },
  {
    "natural-language": "Find cities that fully contain at most three roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 3"
  },
  {
    "natural-language": "Find cities that fully contain at most four roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 4"
  },
  {
    "natural-language": "Find cities that fully contain at most five roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 5"
  },
  {
    "natural-language": "Find cities that fully contain at most six roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 6"
  },
  {
    "natural-language": "Find cities that fully contain at most seven roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 7"
  },
  {
    "natural-language": "Find cities that fully contain at most eight roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 8"
  },
  {
    "natural-language": "Find cities that fully contain at most nine roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 9"
  },
  {
    "natural-language": "Find cities that fully contain at most ten roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 10"
  },
  {
    "natural-language": "Find cities that fully contain at most eleven roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 11"
  },
  {
    "natural-language": "Find cities that fully contain at most twelve roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 12"
  },
  {
    "natural-language": "Find cities that fully contain at most thirteen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 13"
  },
  {
    "natural-language": "Find cities that fully contain at most fourteen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 14"
  },
  {
    "natural-language": "Find cities that fully contain at most fifteen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 15"
  },
  {
    "natural-language": "Find cities that fully contain at most sixteen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 16"
  },
  {
    "natural-language": "Find cities that fully contain at most seventeen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 17"
  },
  {
    "natural-language": "Find cities that fully contain at most eighteen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 18"
  },
  {
    "natural-language": "Find cities that fully contain at most nineteen roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 19"
  },
  {
    "natural-language": "Find cities that fully contain at most twenty roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 20"
  },
  {
    "natural-language": "Find cities that contain a part of at most one road",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 1"
  },
  {
    "natural-language": "Find cities that contain a part of at most two roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 2"
  },
  {
    "natural-language": "Find cities that contain a part of at most three roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 3"
  },
  {
    "natural-language": "Find cities that contain a part of at most four roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 4"
  },
  {
    "natural-language": "Find cities that contain a part of at most five roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 5"
  },
  {
    "natural-language": "Find cities that contain a part of at most six roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 6"
  },
  {
    "natural-language": "Find cities that contain a part of at most seven roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 7"
  },
  {
    "natural-language": "Find cities that contain a part of at most eight roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 8"
  },
  {
    "natural-language": "Find cities that contain a part of at most nine roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 9"
  },
  {
    "natural-language": "Find cities that contain a part of at most ten roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 10"
  },
  {
    "natural-language": "Find cities that contain a part of at most eleven roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 11"
  },
  {
    "natural-language": "Find cities that contain a part of at most twelve roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 12"
  },
  {
    "natural-language": "Find cities that contain a part of at most thirteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 13"
  },
  {
    "natural-language": "Find cities that contain a part of at most fourteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 14"
  },
  {
    "natural-language": "Find cities that contain a part of at most fifteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 15"
  },
  {
    "natural-language": "Find cities that contain a part of at most sixteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 16"
  },
  {
    "natural-language": "Find cities that contain a part of at most seventeen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 17"
  },
  {
    "natural-language": "Find cities that contain a part of at most eighteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 18"
  },
  {
    "natural-language": "Find cities that contain a part of at most nineteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 19"
  },
  {
    "natural-language": "Find cities that contain a part of at most twenty roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 20"
  },
  {
    "natural-language": "Find cities that contain part of at most one road",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 1"
  },
  {
    "natural-language": "Find cities that contain part of at most two roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 2"
  },
  {
    "natural-language": "Find cities that contain part of at most three roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 3"
  },
  {
    "natural-language": "Find cities that contain part of at most four roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 4"
  },
  {
    "natural-language": "Find cities that contain part of at most five roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 5"
  },
  {
    "natural-language": "Find cities that contain part of at most six roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 6"
  },
  {
    "natural-language": "Find cities that contain part of at most seven roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 7"
  },
  {
    "natural-language": "Find cities that contain part of at most eight roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 8"
  },
  {
    "natural-language": "Find cities that contain part of at most nine roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 9"
  },
  {
    "natural-language": "Find cities that contain part of at most ten roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 10"
  },
  {
    "natural-language": "Find cities that contain part of at most eleven roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 11"
  },
  {
    "natural-language": "Find cities that contain part of at most twelve roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 12"
  },
  {
    "natural-language": "Find cities that contain part of at most thirteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 13"
  },
  {
    "natural-language": "Find cities that contain part of at most fourteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 14"
  },
  {
    "natural-language": "Find cities that contain part of at most fifteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 15"
  },
  {
    "natural-language": "Find cities that contain part of at most sixteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 16"
  },
  {
    "natural-language": "Find cities that contain part of at most seventeen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 17"
  },
  {
    "natural-language": "Find cities that contain part of at most eighteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 18"
  },
  {
    "natural-language": "Find cities that contain part of at most nineteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 19"
  },
  {
    "natural-language": "Find cities that contain part of at most twenty roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 20"
  },
  {
    "natural-language": "Find cities that contain a section of at most one road",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 1"
  },
  {
    "natural-language": "Find cities that contain a section of at most two roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 2"
  },
  {
    "natural-language": "Find cities that contain a section of at most three roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 3"
  },
  {
    "natural-language": "Find cities that contain a section of at most four roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 4"
  },
  {
    "natural-language": "Find cities that contain a section of at most five roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 5"
  },
  {
    "natural-language": "Find cities that contain a section of at most six roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 6"
  },
  {
    "natural-language": "Find cities that contain a section of at most seven roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 7"
  },
  {
    "natural-language": "Find cities that contain a section of at most eight roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 8"
  },
  {
    "natural-language": "Find cities that contain a section of at most nine roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 9"
  },
  {
    "natural-language": "Find cities that contain a section of at most ten roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 10"
  },
  {
    "natural-language": "Find cities that contain a section of at most eleven roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 11"
  },
  {
    "natural-language": "Find cities that contain a section of at most twelve roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 12"
  },
  {
    "natural-language": "Find cities that contain a section of at most thirteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 13"
  },
  {
    "natural-language": "Find cities that contain a section of at most fourteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 14"
  },
  {
    "natural-language": "Find cities that contain a section of at most fifteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 15"
  },
  {
    "natural-language": "Find cities that contain a section of at most sixteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 16"
  },
  {
    "natural-language": "Find cities that contain a section of at most seventeen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 17"
  },
  {
    "natural-language": "Find cities that contain a section of at most eighteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 18"
  },
  {
    "natural-language": "Find cities that contain a section of at most nineteen roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 19"
  },
  {
    "natural-language": "Find cities that contain a section of at most twenty roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 20"
  },
  {
    "natural-language": "Find cities that contain at most 1 entire road",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 1"
  },
  {
    "natural-language": "Find cities that contain at most 2 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 2"
  },
  {
    "natural-language": "Find cities that contain at most 3 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 3"
  },
  {
    "natural-language": "Find cities that contain at most 4 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 4"
  },
  {
    "natural-language": "Find cities that contain at most 5 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 5"
  },
  {
    "natural-language": "Find cities that contain at most 6 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 6"
  },
  {
    "natural-language": "Find cities that contain at most 7 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 7"
  },
  {
    "natural-language": "Find cities that contain at most 8 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 8"
  },
  {
    "natural-language": "Find cities that contain at most 9 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 9"
  },
  {
    "natural-language": "Find cities that contain at most 10 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 10"
  },
  {
    "natural-language": "Find cities that contain at most 11 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 11"
  },
  {
    "natural-language": "Find cities that contain at most 12 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 12"
  },
  {
    "natural-language": "Find cities that contain at most 13 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 13"
  },
  {
    "natural-language": "Find cities that contain at most 14 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 14"
  },
  {
    "natural-language": "Find cities that contain at most 15 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 15"
  },
  {
    "natural-language": "Find cities that contain at most 16 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 16"
  },
  {
    "natural-language": "Find cities that contain at most 17 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 17"
  },
  {
    "natural-language": "Find cities that contain at most 18 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 18"
  },
  {
    "natural-language": "Find cities that contain at most 19 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 19"
  },
  {
    "natural-language": "Find cities that contain at most 20 entire roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 20"
  },
  {
    "natural-language": "Find cities that fully contain at most 1 road",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 1"
  },
  {
    "natural-language": "Find cities that fully contain at most 2 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 2"
  },
  {
    "natural-language": "Find cities that fully contain at most 3 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 3"
  },
  {
    "natural-language": "Find cities that fully contain at most 4 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 4"
  },
  {
    "natural-language": "Find cities that fully contain at most 5 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 5"
  },
  {
    "natural-language": "Find cities that fully contain at most 6 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 6"
  },
  {
    "natural-language": "Find cities that fully contain at most 7 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 7"
  },
  {
    "natural-language": "Find cities that fully contain at most 8 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 8"
  },
  {
    "natural-language": "Find cities that fully contain at most 9 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 9"
  },
  {
    "natural-language": "Find cities that fully contain at most 10 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 10"
  },
  {
    "natural-language": "Find cities that fully contain at most 11 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 11"
  },
  {
    "natural-language": "Find cities that fully contain at most 12 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 12"
  },
  {
    "natural-language": "Find cities that fully contain at most 13 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 13"
  },
  {
    "natural-language": "Find cities that fully contain at most 14 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 14"
  },
  {
    "natural-language": "Find cities that fully contain at most 15 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 15"
  },
  {
    "natural-language": "Find cities that fully contain at most 16 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 16"
  },
  {
    "natural-language": "Find cities that fully contain at most 17 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 17"
  },
  {
    "natural-language": "Find cities that fully contain at most 18 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 18"
  },
  {
    "natural-language": "Find cities that fully contain at most 19 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 19"
  },
  {
    "natural-language": "Find cities that fully contain at most 20 roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Contains(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 20"
  },
  {
    "natural-language": "Find cities that contain a part of at most 1 road",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 1"
  },
  {
    "natural-language": "Find cities that contain a part of at most 2 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 2"
  },
  {
    "natural-language": "Find cities that contain a part of at most 3 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 3"
  },
  {
    "natural-language": "Find cities that contain a part of at most 4 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 4"
  },
  {
    "natural-language": "Find cities that contain a part of at most 5 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 5"
  },
  {
    "natural-language": "Find cities that contain a part of at most 6 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 6"
  },
  {
    "natural-language": "Find cities that contain a part of at most 7 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 7"
  },
  {
    "natural-language": "Find cities that contain a part of at most 8 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 8"
  },
  {
    "natural-language": "Find cities that contain a part of at most 9 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 9"
  },
  {
    "natural-language": "Find cities that contain a part of at most 10 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 10"
  },
  {
    "natural-language": "Find cities that contain a part of at most 11 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 11"
  },
  {
    "natural-language": "Find cities that contain a part of at most 12 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 12"
  },
  {
    "natural-language": "Find cities that contain a part of at most 13 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 13"
  },
  {
    "natural-language": "Find cities that contain a part of at most 14 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 14"
  },
  {
    "natural-language": "Find cities that contain a part of at most 15 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 15"
  },
  {
    "natural-language": "Find cities that contain a part of at most 16 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 16"
  },
  {
    "natural-language": "Find cities that contain a part of at most 17 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 17"
  },
  {
    "natural-language": "Find cities that contain a part of at most 18 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 18"
  },
  {
    "natural-language": "Find cities that contain a part of at most 19 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 19"
  },
  {
    "natural-language": "Find cities that contain a part of at most 20 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 20"
  },
  {
    "natural-language": "Find cities that contain part of at most 1 road",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 1"
  },
  {
    "natural-language": "Find cities that contain part of at most 2 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 2"
  },
  {
    "natural-language": "Find cities that contain part of at most 3 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 3"
  },
  {
    "natural-language": "Find cities that contain part of at most 4 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 4"
  },
  {
    "natural-language": "Find cities that contain part of at most 5 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 5"
  },
  {
    "natural-language": "Find cities that contain part of at most 6 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 6"
  },
  {
    "natural-language": "Find cities that contain part of at most 7 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 7"
  },
  {
    "natural-language": "Find cities that contain part of at most 8 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 8"
  },
  {
    "natural-language": "Find cities that contain part of at most 9 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 9"
  },
  {
    "natural-language": "Find cities that contain part of at most 10 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 10"
  },
  {
    "natural-language": "Find cities that contain part of at most 11 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 11"
  },
  {
    "natural-language": "Find cities that contain part of at most 12 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 12"
  },
  {
    "natural-language": "Find cities that contain part of at most 13 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 13"
  },
  {
    "natural-language": "Find cities that contain part of at most 14 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 14"
  },
  {
    "natural-language": "Find cities that contain part of at most 15 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 15"
  },
  {
    "natural-language": "Find cities that contain part of at most 16 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 16"
  },
  {
    "natural-language": "Find cities that contain part of at most 17 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 17"
  },
  {
    "natural-language": "Find cities that contain part of at most 18 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 18"
  },
  {
    "natural-language": "Find cities that contain part of at most 19 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 19"
  },
  {
    "natural-language": "Find cities that contain part of at most 20 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 20"
  },
  {
    "natural-language": "Find cities that contain a section of at most 1 road",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 1"
  },
  {
    "natural-language": "Find cities that contain a section of at most 2 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 2"
  },
  {
    "natural-language": "Find cities that contain a section of at most 3 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 3"
  },
  {
    "natural-language": "Find cities that contain a section of at most 4 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 4"
  },
  {
    "natural-language": "Find cities that contain a section of at most 5 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 5"
  },
  {
    "natural-language": "Find cities that contain a section of at most 6 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 6"
  },
  {
    "natural-language": "Find cities that contain a section of at most 7 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 7"
  },
  {
    "natural-language": "Find cities that contain a section of at most 8 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 8"
  },
  {
    "natural-language": "Find cities that contain a section of at most 9 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 9"
  },
  {
    "natural-language": "Find cities that contain a section of at most 10 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 10"
  },
  {
    "natural-language": "Find cities that contain a section of at most 11 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 11"
  },
  {
    "natural-language": "Find cities that contain a section of at most 12 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 12"
  },
  {
    "natural-language": "Find cities that contain a section of at most 13 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 13"
  },
  {
    "natural-language": "Find cities that contain a section of at most 14 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 14"
  },
  {
    "natural-language": "Find cities that contain a section of at most 15 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 15"
  },
  {
    "natural-language": "Find cities that contain a section of at most 16 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 16"
  },
  {
    "natural-language": "Find cities that contain a section of at most 17 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 17"
  },
  {
    "natural-language": "Find cities that contain a section of at most 18 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 18"
  },
  {
    "natural-language": "Find cities that contain a section of at most 19 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 19"
  },
  {
    "natural-language": "Find cities that contain a section of at most 20 roads",
    "sql": "SELECT c.id, c.name, COUNT(r.id) AS road_count FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) GROUP BY c.id, c.name HAVING COUNT(r.id) <= 20"
  },

  # Find cities by matching criteria around intersecting roads (1 - 20)
  {
    "natural-language": "Find the city with the fewest number of intersecting roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id ORDER BY COUNT(DISTINCT r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the greatest number of intersecting roads",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) GROUP BY c.id ORDER BY COUNT(DISTINCT r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find cities that contain at least one intersection",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 1"
  },
  {
    "natural-language": "Find cities that contain at least two intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 2"
  },
  {
    "natural-language": "Find cities that contain at least three intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 3"
  },
  {
    "natural-language": "Find cities that contain at least four intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 4"
  },
  {
    "natural-language": "Find cities that contain at least five intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 5"
  },
  {
    "natural-language": "Find cities that contain at least six intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 6"
  },
  {
    "natural-language": "Find cities that contain at least seven intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 7"
  },
  {
    "natural-language": "Find cities that contain at least eight intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 8"
  },
  {
    "natural-language": "Find cities that contain at least nine intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 9"
  },
  {
    "natural-language": "Find cities that contain at least ten intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 10"
  },
  {
    "natural-language": "Find cities that contain at least eleven intersection",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 11"
  },
  {
    "natural-language": "Find cities that contain at least twelve intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 12"
  },
  {
    "natural-language": "Find cities that contain at least thirteen intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 13"
  },
  {
    "natural-language": "Find cities that contain at least fourteen intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 14"
  },
  {
    "natural-language": "Find cities that contain at least fifteen intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 15"
  },
  {
    "natural-language": "Find cities that contain at least sixteen intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 16"
  },
  {
    "natural-language": "Find cities that contain at least seventeen intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 17"
  },
  {
    "natural-language": "Find cities that contain at least eighteen intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 18"
  },
  {
    "natural-language": "Find cities that contain at least nineteen intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 19"
  },
  {
    "natural-language": "Find cities that contain at least twenty intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 20"
  },
  {
    "natural-language": "Find cities that contain at least 1 intersection",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 1"
  },
  {
    "natural-language": "Find cities that contain at least 2 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 2"
  },
  {
    "natural-language": "Find cities that contain at least 3 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 3"
  },
  {
    "natural-language": "Find cities that contain at least 4 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 4"
  },
  {
    "natural-language": "Find cities that contain at least 5 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 5"
  },
  {
    "natural-language": "Find cities that contain at least 6 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 6"
  },
  {
    "natural-language": "Find cities that contain at least 7 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 7"
  },
  {
    "natural-language": "Find cities that contain at least 8 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 8"
  },
  {
    "natural-language": "Find cities that contain at least 9 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 9"
  },
  {
    "natural-language": "Find cities that contain at least 10 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 10"
  },
  {
    "natural-language": "Find cities that contain at least 11 intersection",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 11"
  },
  {
    "natural-language": "Find cities that contain at least 12 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 12"
  },
  {
    "natural-language": "Find cities that contain at least 13 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 13"
  },
  {
    "natural-language": "Find cities that contain at least 14 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 14"
  },
  {
    "natural-language": "Find cities that contain at least 15 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 15"
  },
  {
    "natural-language": "Find cities that contain at least 16 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 16"
  },
  {
    "natural-language": "Find cities that contain at least 17 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 17"
  },
  {
    "natural-language": "Find cities that contain at least 18 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 18"
  },
  {
    "natural-language": "Find cities that contain at least 19 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 19"
  },
  {
    "natural-language": "Find cities that contain at least 20 intersections",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_NumGeometries(boundary) >= 20"
  },

  # Find cities with an area greater than (1 - 200 sq km)
  {
    "natural-language": "Find cities with an area greater than one square kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 1000000"
  },
  {
    "natural-language": "Find cities with an area greater than two square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 2000000"
  },
  {
    "natural-language": "Find cities with an area greater than three square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 3000000"
  },
  {
    "natural-language": "Find cities with an area greater than four square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 4000000"
  },
  {
    "natural-language": "Find cities with an area greater than five square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 5000000"
  },
  {
    "natural-language": "Find cities with an area greater than six square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 6000000"
  },
  {
    "natural-language": "Find cities with an area greater than seven square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 7000000"
  },
  {
    "natural-language": "Find cities with an area greater than eight square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 8000000"
  },
  {
    "natural-language": "Find cities with an area greater than nine square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 9000000"
  },
  {
    "natural-language": "Find cities with an area greater than ten square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 10000000"
  },
  {
    "natural-language": "Find cities with an area greater than eleven square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 11000000"
  },
  {
    "natural-language": "Find cities with an area greater than twelve square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 12000000"
  },
  {
    "natural-language": "Find cities with an area greater than thirteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 13000000"
  },
  {
    "natural-language": "Find cities with an area greater than fourteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 14000000"
  },
  {
    "natural-language": "Find cities with an area greater than fifteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 15000000"
  },
  {
    "natural-language": "Find cities with an area greater than sixteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 16000000"
  },
  {
    "natural-language": "Find cities with an area greater than seventeen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 17000000"
  },
  {
    "natural-language": "Find cities with an area greater than eighteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 18000000"
  },
  {
    "natural-language": "Find cities with an area greater than nineteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 19000000"
  },
  {
    "natural-language": "Find cities with an area greater than twenty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 20000000"
  },
  {
    "natural-language": "Find cities with an area greater than twenty one square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 21000000"
  },
  {
    "natural-language": "Find cities with an area greater than twenty two square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 22000000"
  },
  {
    "natural-language": "Find cities with an area greater than twenty three square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 23000000"
  },
  {
    "natural-language": "Find cities with an area greater than twenty four square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 24000000"
  },
  {
    "natural-language": "Find cities with an area greater than twenty five square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 25000000"
  },
  {
    "natural-language": "Find cities with an area greater than twenty six square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 26000000"
  },
  {
    "natural-language": "Find cities with an area greater than twenty seven square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 27000000"
  },
  {
    "natural-language": "Find cities with an area greater than twenty eight square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 28000000"
  },
  {
    "natural-language": "Find cities with an area greater than twenty nine square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 29000000"
  },
  {
    "natural-language": "Find cities with an area greater than thirty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 30000000"
  },
  {
    "natural-language": "Find cities with an area greater than forty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 40000000"
  },
  {
    "natural-language": "Find cities with an area greater than fifty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 50000000"
  },
  {
    "natural-language": "Find cities with an area greater than sixty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 60000000"
  },
  {
    "natural-language": "Find cities with an area greater than seventy square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 70000000"
  },
  {
    "natural-language": "Find cities with an area greater than eighty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 80000000"
  },
  {
    "natural-language": "Find cities with an area greater than ninety square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 90000000"
  },
  {
    "natural-language": "Find cities with an area greater than one hundred square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 100000000"
  },
  {
    "natural-language": "Find cities with an area greater than one hundred ten square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 110000000"
  },
  {
    "natural-language": "Find cities with an area greater than one hundred twenty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 120000000"
  },
  {
    "natural-language": "Find cities with an area greater than one hundred thirty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 130000000"
  },
  {
    "natural-language": "Find cities with an area greater than one hundred forty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 140000000"
  },
  {
    "natural-language": "Find cities with an area greater than one hundred fifty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 150000000"
  },
  {
    "natural-language": "Find cities with an area greater than two hundred square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 200000000"
  },
  {
    "natural-language": "Find cities with an area greater than 1 square kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 1000000"
  },
  {
    "natural-language": "Find cities with an area greater than 2 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 2000000"
  },
  {
    "natural-language": "Find cities with an area greater than 3 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 3000000"
  },
  {
    "natural-language": "Find cities with an area greater than 4 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 4000000"
  },
  {
    "natural-language": "Find cities with an area greater than 5 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 5000000"
  },
  {
    "natural-language": "Find cities with an area greater than 6 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 6000000"
  },
  {
    "natural-language": "Find cities with an area greater than 7 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 7000000"
  },
  {
    "natural-language": "Find cities with an area greater than 8 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 8000000"
  },
  {
    "natural-language": "Find cities with an area greater than 9 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 9000000"
  },
  {
    "natural-language": "Find cities with an area greater than 10 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 10000000"
  },
  {
    "natural-language": "Find cities with an area greater than 11 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 11000000"
  },
  {
    "natural-language": "Find cities with an area greater than 12 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 12000000"
  },
  {
    "natural-language": "Find cities with an area greater than 13 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 13000000"
  },
  {
    "natural-language": "Find cities with an area greater than 14 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 14000000"
  },
  {
    "natural-language": "Find cities with an area greater than 15 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 15000000"
  },
  {
    "natural-language": "Find cities with an area greater than 16 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 16000000"
  },
  {
    "natural-language": "Find cities with an area greater than 17 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 17000000"
  },
  {
    "natural-language": "Find cities with an area greater than 18 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 18000000"
  },
  {
    "natural-language": "Find cities with an area greater than 19 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 19000000"
  },
  {
    "natural-language": "Find cities with an area greater than 20 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 20000000"
  },
  {
    "natural-language": "Find cities with an area greater than 21 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 21000000"
  },
  {
    "natural-language": "Find cities with an area greater than 22 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 22000000"
  },
  {
    "natural-language": "Find cities with an area greater than 23 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 23000000"
  },
  {
    "natural-language": "Find cities with an area greater than 24 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 24000000"
  },
  {
    "natural-language": "Find cities with an area greater than 25 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 25000000"
  },
  {
    "natural-language": "Find cities with an area greater than 26 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 26000000"
  },
  {
    "natural-language": "Find cities with an area greater than 27 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 27000000"
  },
  {
    "natural-language": "Find cities with an area greater than 28 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 28000000"
  },
  {
    "natural-language": "Find cities with an area greater than 29 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 29000000"
  },
  {
    "natural-language": "Find cities with an area greater than 30 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 30000000"
  },
  {
    "natural-language": "Find cities with an area greater than 40 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 40000000"
  },
  {
    "natural-language": "Find cities with an area greater than 50 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 50000000"
  },
  {
    "natural-language": "Find cities with an area greater than 60 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 60000000"
  },
  {
    "natural-language": "Find cities with an area greater than 70 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 70000000"
  },
  {
    "natural-language": "Find cities with an area greater than 80 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 80000000"
  },
  {
    "natural-language": "Find cities with an area greater than 90 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 90000000"
  },
  {
    "natural-language": "Find cities with an area greater than 100 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 100000000"
  },
  {
    "natural-language": "Find cities with an area greater than 110 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 110000000"
  },
  {
    "natural-language": "Find cities with an area greater than 120 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 120000000"
  },
  {
    "natural-language": "Find cities with an area greater than 130 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 130000000"
  },
  {
    "natural-language": "Find cities with an area greater than 140 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 140000000"
  },
  {
    "natural-language": "Find cities with an area greater than 150 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 150000000"
  },
  {
    "natural-language": "Find cities with an area greater than 200 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) > 200000000"
  },

  # Find cities with an area of at least (1 - 200 sq km)
  {
    "natural-language": "Find cities with an area of at least one square kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 1000000"
  },
  {
    "natural-language": "Find cities with an area of at least two square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 2000000"
  },
  {
    "natural-language": "Find cities with an area of at least three square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 3000000"
  },
  {
    "natural-language": "Find cities with an area of at least four square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 4000000"
  },
  {
    "natural-language": "Find cities with an area of at least five square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 5000000"
  },
  {
    "natural-language": "Find cities with an area of at least six square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 6000000"
  },
  {
    "natural-language": "Find cities with an area of at least seven square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 7000000"
  },
  {
    "natural-language": "Find cities with an area of at least eight square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 8000000"
  },
  {
    "natural-language": "Find cities with an area of at least nine square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 9000000"
  },
  {
    "natural-language": "Find cities with an area of at least ten square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 10000000"
  },
  {
    "natural-language": "Find cities with an area of at least eleven square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 11000000"
  },
  {
    "natural-language": "Find cities with an area of at least twelve square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 12000000"
  },
  {
    "natural-language": "Find cities with an area of at least thirteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 13000000"
  },
  {
    "natural-language": "Find cities with an area of at least fourteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 14000000"
  },
  {
    "natural-language": "Find cities with an area of at least fifteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 15000000"
  },
  {
    "natural-language": "Find cities with an area of at least sixteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 16000000"
  },
  {
    "natural-language": "Find cities with an area of at least seventeen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 17000000"
  },
  {
    "natural-language": "Find cities with an area of at least eighteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 18000000"
  },
  {
    "natural-language": "Find cities with an area of at least nineteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 19000000"
  },
  {
    "natural-language": "Find cities with an area of at least twenty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 20000000"
  },
  {
    "natural-language": "Find cities with an area of at least twenty one square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 21000000"
  },
  {
    "natural-language": "Find cities with an area of at least twenty two square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 22000000"
  },
  {
    "natural-language": "Find cities with an area of at least twenty three square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 23000000"
  },
  {
    "natural-language": "Find cities with an area of at least twenty four square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 24000000"
  },
  {
    "natural-language": "Find cities with an area of at least twenty five square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 25000000"
  },
  {
    "natural-language": "Find cities with an area of at least twenty six square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 26000000"
  },
  {
    "natural-language": "Find cities with an area of at least twenty seven square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 27000000"
  },
  {
    "natural-language": "Find cities with an area of at least twenty eight square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 28000000"
  },
  {
    "natural-language": "Find cities with an area of at least twenty nine square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 29000000"
  },
  {
    "natural-language": "Find cities with an area of at least thirty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 30000000"
  },
  {
    "natural-language": "Find cities with an area of at least forty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 40000000"
  },
  {
    "natural-language": "Find cities with an area of at least fifty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 50000000"
  },
  {
    "natural-language": "Find cities with an area of at least sixty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 60000000"
  },
  {
    "natural-language": "Find cities with an area of at least seventy square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 70000000"
  },
  {
    "natural-language": "Find cities with an area of at least eighty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 80000000"
  },
  {
    "natural-language": "Find cities with an area of at least ninety square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 90000000"
  },
  {
    "natural-language": "Find cities with an area of at least one hundred square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 100000000"
  },
  {
    "natural-language": "Find cities with an area of at least one hundred ten square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 110000000"
  },
  {
    "natural-language": "Find cities with an area of at least one hundred twenty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 120000000"
  },
  {
    "natural-language": "Find cities with an area of at least one hundred thirty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 130000000"
  },
  {
    "natural-language": "Find cities with an area of at least one hundred forty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 140000000"
  },
  {
    "natural-language": "Find cities with an area of at least one hundred fifty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 150000000"
  },
  {
    "natural-language": "Find cities with an area of at least two hundred square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 200000000"
  },
  {
    "natural-language": "Find cities with an area of at least 1 square kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 1000000"
  },
  {
    "natural-language": "Find cities with an area of at least 2 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 2000000"
  },
  {
    "natural-language": "Find cities with an area of at least 3 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 3000000"
  },
  {
    "natural-language": "Find cities with an area of at least 4 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 4000000"
  },
  {
    "natural-language": "Find cities with an area of at least 5 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 5000000"
  },
  {
    "natural-language": "Find cities with an area of at least 6 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 6000000"
  },
  {
    "natural-language": "Find cities with an area of at least 7 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 7000000"
  },
  {
    "natural-language": "Find cities with an area of at least 8 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 8000000"
  },
  {
    "natural-language": "Find cities with an area of at least 9 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 9000000"
  },
  {
    "natural-language": "Find cities with an area of at least 10 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 10000000"
  },
  {
    "natural-language": "Find cities with an area of at least 11 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 11000000"
  },
  {
    "natural-language": "Find cities with an area of at least 12 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 12000000"
  },
  {
    "natural-language": "Find cities with an area of at least 13 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 13000000"
  },
  {
    "natural-language": "Find cities with an area of at least 14 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 14000000"
  },
  {
    "natural-language": "Find cities with an area of at least 15 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 15000000"
  },
  {
    "natural-language": "Find cities with an area of at least 16 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 16000000"
  },
  {
    "natural-language": "Find cities with an area of at least 17 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 17000000"
  },
  {
    "natural-language": "Find cities with an area of at least 18 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 18000000"
  },
  {
    "natural-language": "Find cities with an area of at least 19 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 19000000"
  },
  {
    "natural-language": "Find cities with an area of at least 20 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 20000000"
  },
  {
    "natural-language": "Find cities with an area of at least 21 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 21000000"
  },
  {
    "natural-language": "Find cities with an area of at least 22 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 22000000"
  },
  {
    "natural-language": "Find cities with an area of at least 23 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 23000000"
  },
  {
    "natural-language": "Find cities with an area of at least 24 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 24000000"
  },
  {
    "natural-language": "Find cities with an area of at least 25 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 25000000"
  },
  {
    "natural-language": "Find cities with an area of at least 26 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 26000000"
  },
  {
    "natural-language": "Find cities with an area of at least 27 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 27000000"
  },
  {
    "natural-language": "Find cities with an area of at least 28 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 28000000"
  },
  {
    "natural-language": "Find cities with an area of at least 29 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 29000000"
  },
  {
    "natural-language": "Find cities with an area of at least 30 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 30000000"
  },
  {
    "natural-language": "Find cities with an area of at least 40 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 40000000"
  },
  {
    "natural-language": "Find cities with an area of at least 50 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 50000000"
  },
  {
    "natural-language": "Find cities with an area of at least 60 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 60000000"
  },
  {
    "natural-language": "Find cities with an area of at least 70 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 70000000"
  },
  {
    "natural-language": "Find cities with an area of at least 80 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 80000000"
  },
  {
    "natural-language": "Find cities with an area of at least 90 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 90000000"
  },
  {
    "natural-language": "Find cities with an area of at least 100 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 100000000"
  },
  {
    "natural-language": "Find cities with an area of at least 110 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 110000000"
  },
  {
    "natural-language": "Find cities with an area of at least 120 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 120000000"
  },
  {
    "natural-language": "Find cities with an area of at least 130 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 130000000"
  },
  {
    "natural-language": "Find cities with an area of at least 140 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 140000000"
  },
  {
    "natural-language": "Find cities with an area of at least 150 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 150000000"
  },
  {
    "natural-language": "Find cities with an area of at least 200 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) >= 200000000"
  },

  # Find cities with an area less than (1 - 200 sq km)
  {
    "natural-language": "Find cities with an area less than one square kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 1000000"
  },
  {
    "natural-language": "Find cities with an area less than two square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 2000000"
  },
  {
    "natural-language": "Find cities with an area less than three square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 3000000"
  },
  {
    "natural-language": "Find cities with an area less than four square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 4000000"
  },
  {
    "natural-language": "Find cities with an area less than five square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 5000000"
  },
  {
    "natural-language": "Find cities with an area less than six square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 6000000"
  },
  {
    "natural-language": "Find cities with an area less than seven square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 7000000"
  },
  {
    "natural-language": "Find cities with an area less than eight square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 8000000"
  },
  {
    "natural-language": "Find cities with an area less than nine square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 9000000"
  },
  {
    "natural-language": "Find cities with an area less than ten square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 10000000"
  },
  {
    "natural-language": "Find cities with an area less than eleven square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 11000000"
  },
  {
    "natural-language": "Find cities with an area less than twelve square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 12000000"
  },
  {
    "natural-language": "Find cities with an area less than thirteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 13000000"
  },
  {
    "natural-language": "Find cities with an area less than fourteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 14000000"
  },
  {
    "natural-language": "Find cities with an area less than fifteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 15000000"
  },
  {
    "natural-language": "Find cities with an area less than sixteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 16000000"
  },
  {
    "natural-language": "Find cities with an area less than seventeen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 17000000"
  },
  {
    "natural-language": "Find cities with an area less than eighteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 18000000"
  },
  {
    "natural-language": "Find cities with an area less than nineteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 19000000"
  },
  {
    "natural-language": "Find cities with an area less than twenty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 20000000"
  },
  {
    "natural-language": "Find cities with an area less than twenty one square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 21000000"
  },
  {
    "natural-language": "Find cities with an area less than twenty two square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 22000000"
  },
  {
    "natural-language": "Find cities with an area less than twenty three square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 23000000"
  },
  {
    "natural-language": "Find cities with an area less than twenty four square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 24000000"
  },
  {
    "natural-language": "Find cities with an area less than twenty five square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 25000000"
  },
  {
    "natural-language": "Find cities with an area less than twenty six square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 26000000"
  },
  {
    "natural-language": "Find cities with an area less than twenty seven square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 27000000"
  },
  {
    "natural-language": "Find cities with an area less than twenty eight square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 28000000"
  },
  {
    "natural-language": "Find cities with an area less than twenty nine square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 29000000"
  },
  {
    "natural-language": "Find cities with an area less than thirty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 30000000"
  },
  {
    "natural-language": "Find cities with an area less than forty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 40000000"
  },
  {
    "natural-language": "Find cities with an area less than fifty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 50000000"
  },
  {
    "natural-language": "Find cities with an area less than sixty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 60000000"
  },
  {
    "natural-language": "Find cities with an area less than seventy square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 70000000"
  },
  {
    "natural-language": "Find cities with an area less than eighty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 80000000"
  },
  {
    "natural-language": "Find cities with an area less than ninety square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 90000000"
  },
  {
    "natural-language": "Find cities with an area less than one hundred square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 100000000"
  },
  {
    "natural-language": "Find cities with an area less than one hundred ten square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 110000000"
  },
  {
    "natural-language": "Find cities with an area less than one hundred twenty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 120000000"
  },
  {
    "natural-language": "Find cities with an area less than one hundred thirty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 130000000"
  },
  {
    "natural-language": "Find cities with an area less than one hundred forty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 140000000"
  },
  {
    "natural-language": "Find cities with an area less than one hundred fifty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 150000000"
  },
  {
    "natural-language": "Find cities with an area less than two hundred square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 200000000"
  },
  {
    "natural-language": "Find cities with an area less than 1 square kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 1000000"
  },
  {
    "natural-language": "Find cities with an area less than 2 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 2000000"
  },
  {
    "natural-language": "Find cities with an area less than 3 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 3000000"
  },
  {
    "natural-language": "Find cities with an area less than 4 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 4000000"
  },
  {
    "natural-language": "Find cities with an area less than 5 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 5000000"
  },
  {
    "natural-language": "Find cities with an area less than 6 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 6000000"
  },
  {
    "natural-language": "Find cities with an area less than 7 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 7000000"
  },
  {
    "natural-language": "Find cities with an area less than 8 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 8000000"
  },
  {
    "natural-language": "Find cities with an area less than 9 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 9000000"
  },
  {
    "natural-language": "Find cities with an area less than 10 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 10000000"
  },
  {
    "natural-language": "Find cities with an area less than 11 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 11000000"
  },
  {
    "natural-language": "Find cities with an area less than 12 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 12000000"
  },
  {
    "natural-language": "Find cities with an area less than 13 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 13000000"
  },
  {
    "natural-language": "Find cities with an area less than 14 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 14000000"
  },
  {
    "natural-language": "Find cities with an area less than 15 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 15000000"
  },
  {
    "natural-language": "Find cities with an area less than 16 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 16000000"
  },
  {
    "natural-language": "Find cities with an area less than 17 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 17000000"
  },
  {
    "natural-language": "Find cities with an area less than 18 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 18000000"
  },
  {
    "natural-language": "Find cities with an area less than 19 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 19000000"
  },
  {
    "natural-language": "Find cities with an area less than 20 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 20000000"
  },
  {
    "natural-language": "Find cities with an area less than 21 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 21000000"
  },
  {
    "natural-language": "Find cities with an area less than 22 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 22000000"
  },
  {
    "natural-language": "Find cities with an area less than 23 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 23000000"
  },
  {
    "natural-language": "Find cities with an area less than 24 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 24000000"
  },
  {
    "natural-language": "Find cities with an area less than 25 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 25000000"
  },
  {
    "natural-language": "Find cities with an area less than 26 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 26000000"
  },
  {
    "natural-language": "Find cities with an area less than 27 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 27000000"
  },
  {
    "natural-language": "Find cities with an area less than 28 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 28000000"
  },
  {
    "natural-language": "Find cities with an area less than 29 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 29000000"
  },
  {
    "natural-language": "Find cities with an area less than 30 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 30000000"
  },
  {
    "natural-language": "Find cities with an area less than 40 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 40000000"
  },
  {
    "natural-language": "Find cities with an area less than 50 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 50000000"
  },
  {
    "natural-language": "Find cities with an area less than 60 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 60000000"
  },
  {
    "natural-language": "Find cities with an area less than 70 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 70000000"
  },
  {
    "natural-language": "Find cities with an area less than 80 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 80000000"
  },
  {
    "natural-language": "Find cities with an area less than 90 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 90000000"
  },
  {
    "natural-language": "Find cities with an area less than 100 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 100000000"
  },
  {
    "natural-language": "Find cities with an area less than 110 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 110000000"
  },
  {
    "natural-language": "Find cities with an area less than 120 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 120000000"
  },
  {
    "natural-language": "Find cities with an area less than 130 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 130000000"
  },
  {
    "natural-language": "Find cities with an area less than 140 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 140000000"
  },
  {
    "natural-language": "Find cities with an area less than 150 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 150000000"
  },
  {
    "natural-language": "Find cities with an area less than 200 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) < 200000000"
  },

  # Find cities with an area of at most (1 - 200 sq km)
  {
    "natural-language": "Find cities with an area of at most one square kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 1000000"
  },
  {
    "natural-language": "Find cities with an area of at most two square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 2000000"
  },
  {
    "natural-language": "Find cities with an area of at most three square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 3000000"
  },
  {
    "natural-language": "Find cities with an area of at most four square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 4000000"
  },
  {
    "natural-language": "Find cities with an area of at most five square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 5000000"
  },
  {
    "natural-language": "Find cities with an area of at most six square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 6000000"
  },
  {
    "natural-language": "Find cities with an area of at most seven square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 7000000"
  },
  {
    "natural-language": "Find cities with an area of at most eight square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 8000000"
  },
  {
    "natural-language": "Find cities with an area of at most nine square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 9000000"
  },
  {
    "natural-language": "Find cities with an area of at most ten square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 10000000"
  },
  {
    "natural-language": "Find cities with an area of at most eleven square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 11000000"
  },
  {
    "natural-language": "Find cities with an area of at most twelve square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 12000000"
  },
  {
    "natural-language": "Find cities with an area of at most thirteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 13000000"
  },
  {
    "natural-language": "Find cities with an area of at most fourteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 14000000"
  },
  {
    "natural-language": "Find cities with an area of at most fifteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 15000000"
  },
  {
    "natural-language": "Find cities with an area of at most sixteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 16000000"
  },
  {
    "natural-language": "Find cities with an area of at most seventeen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 17000000"
  },
  {
    "natural-language": "Find cities with an area of at most eighteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 18000000"
  },
  {
    "natural-language": "Find cities with an area of at most nineteen square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 19000000"
  },
  {
    "natural-language": "Find cities with an area of at most twenty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 20000000"
  },
  {
    "natural-language": "Find cities with an area of at most twenty one square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 21000000"
  },
  {
    "natural-language": "Find cities with an area of at most twenty two square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 22000000"
  },
  {
    "natural-language": "Find cities with an area of at most twenty three square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 23000000"
  },
  {
    "natural-language": "Find cities with an area of at most twenty four square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 24000000"
  },
  {
    "natural-language": "Find cities with an area of at most twenty five square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 25000000"
  },
  {
    "natural-language": "Find cities with an area of at most twenty six square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 26000000"
  },
  {
    "natural-language": "Find cities with an area of at most twenty seven square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 27000000"
  },
  {
    "natural-language": "Find cities with an area of at most twenty eight square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 28000000"
  },
  {
    "natural-language": "Find cities with an area of at most twenty nine square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 29000000"
  },
  {
    "natural-language": "Find cities with an area of at most thirty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 30000000"
  },
  {
    "natural-language": "Find cities with an area of at most forty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 40000000"
  },
  {
    "natural-language": "Find cities with an area of at most fifty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 50000000"
  },
  {
    "natural-language": "Find cities with an area of at most sixty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 60000000"
  },
  {
    "natural-language": "Find cities with an area of at most seventy square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 70000000"
  },
  {
    "natural-language": "Find cities with an area of at most eighty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 80000000"
  },
  {
    "natural-language": "Find cities with an area of at most ninety square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 90000000"
  },
  {
    "natural-language": "Find cities with an area of at most one hundred square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 100000000"
  },
  {
    "natural-language": "Find cities with an area of at most one hundred ten square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 110000000"
  },
  {
    "natural-language": "Find cities with an area of at most one hundred twenty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 120000000"
  },
  {
    "natural-language": "Find cities with an area of at most one hundred thirty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 130000000"
  },
  {
    "natural-language": "Find cities with an area of at most one hundred forty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 140000000"
  },
  {
    "natural-language": "Find cities with an area of at most one hundred fifty square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 150000000"
  },
  {
    "natural-language": "Find cities with an area of at most two hundred square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 200000000"
  },
  {
    "natural-language": "Find cities with an area of at most 1 square kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 1000000"
  },
  {
    "natural-language": "Find cities with an area of at most 2 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 2000000"
  },
  {
    "natural-language": "Find cities with an area of at most 3 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 3000000"
  },
  {
    "natural-language": "Find cities with an area of at most 4 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 4000000"
  },
  {
    "natural-language": "Find cities with an area of at most 5 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 5000000"
  },
  {
    "natural-language": "Find cities with an area of at most 6 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 6000000"
  },
  {
    "natural-language": "Find cities with an area of at most 7 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 7000000"
  },
  {
    "natural-language": "Find cities with an area of at most 8 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 8000000"
  },
  {
    "natural-language": "Find cities with an area of at most 9 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 9000000"
  },
  {
    "natural-language": "Find cities with an area of at most 10 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 10000000"
  },
  {
    "natural-language": "Find cities with an area of at most 11 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 11000000"
  },
  {
    "natural-language": "Find cities with an area of at most 12 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 12000000"
  },
  {
    "natural-language": "Find cities with an area of at most 13 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 13000000"
  },
  {
    "natural-language": "Find cities with an area of at most 14 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 14000000"
  },
  {
    "natural-language": "Find cities with an area of at most 15 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 15000000"
  },
  {
    "natural-language": "Find cities with an area of at most 16 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 16000000"
  },
  {
    "natural-language": "Find cities with an area of at most 17 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 17000000"
  },
  {
    "natural-language": "Find cities with an area of at most 18 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 18000000"
  },
  {
    "natural-language": "Find cities with an area of at most 19 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 19000000"
  },
  {
    "natural-language": "Find cities with an area of at most 20 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 20000000"
  },
  {
    "natural-language": "Find cities with an area of at most 21 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 21000000"
  },
  {
    "natural-language": "Find cities with an area of at most 22 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 22000000"
  },
  {
    "natural-language": "Find cities with an area of at most 23 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 23000000"
  },
  {
    "natural-language": "Find cities with an area of at most 24 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 24000000"
  },
  {
    "natural-language": "Find cities with an area of at most 25 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 25000000"
  },
  {
    "natural-language": "Find cities with an area of at most 26 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 26000000"
  },
  {
    "natural-language": "Find cities with an area of at most 27 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 27000000"
  },
  {
    "natural-language": "Find cities with an area of at most 28 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 28000000"
  },
  {
    "natural-language": "Find cities with an area of at most 29 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 29000000"
  },
  {
    "natural-language": "Find cities with an area of at most 30 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 30000000"
  },
  {
    "natural-language": "Find cities with an area of at most 40 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 40000000"
  },
  {
    "natural-language": "Find cities with an area of at most 50 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 50000000"
  },
  {
    "natural-language": "Find cities with an area of at most 60 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 60000000"
  },
  {
    "natural-language": "Find cities with an area of at most 70 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 70000000"
  },
  {
    "natural-language": "Find cities with an area of at most 80 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 80000000"
  },
  {
    "natural-language": "Find cities with an area of at most 90 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 90000000"
  },
  {
    "natural-language": "Find cities with an area of at most 100 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 100000000"
  },
  {
    "natural-language": "Find cities with an area of at most 110 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 110000000"
  },
  {
    "natural-language": "Find cities with an area of at most 120 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 120000000"
  },
  {
    "natural-language": "Find cities with an area of at most 130 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 130000000"
  },
  {
    "natural-language": "Find cities with an area of at most 140 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 140000000"
  },
  {
    "natural-language": "Find cities with an area of at most 150 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 150000000"
  },
  {
    "natural-language": "Find cities with an area of at most 200 square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE ST_Area(ST_Transform(boundary, 3857)) <= 200000000"
  },

  # Find cities by matching criteria around roads and population
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 10000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 10000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 20000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 20000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 30000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 30000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 40000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 40000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 45000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 45000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 50000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 50000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 55000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 55000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 60000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 60000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 65000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 65000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 70000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 70000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 75000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 75000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 80000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 80000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 85000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 85000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 90000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 90000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 95000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 95000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 100000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 110000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 110000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 120000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 120000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 150000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 150000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 180000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 180000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 200000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 200000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 250000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 250000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 300000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 300000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than 400000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 400000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 10000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 20000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than thirty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 30000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than forty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 40000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than forty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 45000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 50000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than fifty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 55000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than sixty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 60000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than sixty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 65000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than seventy thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 70000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than seventy five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 75000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 80000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than eighty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 85000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than ninety thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 90000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than ninety five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 95000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than one hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than one hundred ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 110000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than one hundred twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 120000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than one hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 150000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than one hundred eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 180000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than two hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 200000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than two hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 250000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than three hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 300000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population greater than four hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 400000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 10000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 10000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 20000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 20000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 30000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 30000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 40000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 40000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 45000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 45000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 50000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 50000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 55000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 55000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 60000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 60000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 65000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 65000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 70000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 70000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 75000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 75000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 80000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 80000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 85000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 85000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 90000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 90000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 95000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 95000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 100000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 110000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 110000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 120000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 120000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 150000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 150000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 180000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 180000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 200000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 200000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 250000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 250000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 300000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 300000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least 400000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 400000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 10000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 20000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least thirty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 30000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least forty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 40000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least forty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 45000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 50000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least fifty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 55000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least sixty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 60000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least sixty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 65000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least seventy thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 70000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least seventy five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 75000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 80000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least eighty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 85000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least ninety thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 90000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least ninety five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 95000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least one hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least one hundred ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 110000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least one hundred twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 120000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least one hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 150000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least one hundred eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 180000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least two hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 200000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least two hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 250000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least three hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 300000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at least four hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 400000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 10000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 10000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 20000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 20000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 30000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 30000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 40000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 40000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 45000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 45000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 50000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 50000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 55000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 55000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 60000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 60000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 65000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 65000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 70000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 70000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 75000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 75000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 80000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 80000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 85000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 85000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 90000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 90000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 95000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 95000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 100000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 110000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 110000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 120000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 120000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 150000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 150000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 180000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 180000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 200000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 200000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 250000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 250000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 300000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 300000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than 400000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 400000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 10000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 20000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than thirty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 30000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than forty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 40000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than forty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 45000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 50000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than fifty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 55000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than sixty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 60000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than sixty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 65000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than seventy thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 70000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than seventy five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 75000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 80000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than eighty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 85000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than ninety thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 90000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than ninety five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 95000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than one hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than one hundred ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 110000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than one hundred twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 120000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than one hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 150000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than one hundred eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 180000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than two hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 200000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than two hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 250000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than three hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 300000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population less than four hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 400000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 10000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 10000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 20000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 20000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 30000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 30000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 40000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 40000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 45000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 45000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 50000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 50000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 55000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 55000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 60000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 60000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 65000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 65000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 70000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 70000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 75000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 75000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 80000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 80000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 85000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 85000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 90000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 90000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 95000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 95000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 100000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 110000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 110000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 120000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 120000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 150000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 150000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 180000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 180000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 200000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 200000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 250000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 250000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 300000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 300000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most 400000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 400000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 10000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 20000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most thirty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 30000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most forty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 40000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most forty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 45000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 50000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most fifty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 55000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most sixty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 60000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most sixty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 65000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most seventy thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 70000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most seventy five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 75000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 80000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most eighty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 85000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most ninety thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 90000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most ninety five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 95000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most one hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most one hundred ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 110000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most one hundred twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 120000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most one hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 150000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most one hundred eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 180000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most two hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 200000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most two hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 250000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most three hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 300000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the fewest roads and a population of at most four hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 400000 GROUP BY c.id ORDER BY COUNT(r.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 10000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 10000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 20000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 20000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 30000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 30000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 40000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 40000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 45000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 45000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 50000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 50000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 55000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 55000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 60000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 60000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 65000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 65000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 70000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 70000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 75000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 75000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 80000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 80000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 85000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 85000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 90000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 90000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 95000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 95000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 100000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 110000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 110000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 120000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 120000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 150000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 150000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 180000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 180000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 200000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 200000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 250000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 250000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 300000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 300000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than 400000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 400000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 10000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 20000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than thirty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 30000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than forty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 40000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than forty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 45000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 50000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than fifty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 55000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than sixty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 60000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than sixty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 65000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than seventy thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 70000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than seventy five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 75000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 80000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than eighty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 85000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than ninety thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 90000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than ninety five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 95000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than one hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than one hundred ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 110000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than one hundred twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 120000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than one hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 150000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than one hundred eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 180000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than two hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 200000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than two hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 250000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than three hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 300000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population greater than four hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 400000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 10000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 10000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 20000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 20000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 30000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 30000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 40000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 40000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 45000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 45000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 50000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 50000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 55000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 55000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 60000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 60000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 65000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 65000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 70000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 70000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 75000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 75000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 80000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 80000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 85000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 85000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 90000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 90000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 95000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 95000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 100000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 110000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 110000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 120000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 120000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 150000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 150000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 180000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 180000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 200000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 200000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 250000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 250000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 300000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 300000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least 400000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 400000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 10000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 20000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least thirty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 30000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least forty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 40000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least forty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 45000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 50000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least fifty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 55000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least sixty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 60000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least sixty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 65000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least seventy thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 70000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least seventy five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 75000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 80000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least eighty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 85000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least ninety thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 90000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least ninety five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 95000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least one hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least one hundred ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 110000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least one hundred twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 120000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least one hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 150000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least one hundred eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 180000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least two hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 200000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least two hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 250000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least three hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 300000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at least four hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 400000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 10000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 10000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 20000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 20000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 30000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 30000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 40000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 40000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 45000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 45000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 50000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 50000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 55000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 55000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 60000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 60000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 65000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 65000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 70000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 70000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 75000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 75000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 80000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 80000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 85000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 85000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 90000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 90000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 95000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 95000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 100000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 110000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 110000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 120000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 120000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 150000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 150000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 180000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 180000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 200000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 200000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 250000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 250000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 300000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 300000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than 400000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 400000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 10000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 20000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than thirty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 30000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than forty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 40000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than forty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 45000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 50000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than fifty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 55000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than sixty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 60000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than sixty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 65000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than seventy thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 70000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than seventy five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 75000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 80000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than eighty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 85000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than ninety thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 90000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than ninety five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 95000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than one hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than one hundred ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 110000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than one hundred twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 120000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than one hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 150000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than one hundred eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 180000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than two hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 200000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than two hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 250000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than three hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 300000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population less than four hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 400000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 10000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 10000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 20000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 20000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 30000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 30000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 40000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 40000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 45000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 45000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 50000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 50000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 55000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 55000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 60000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 60000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 65000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 65000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 70000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 70000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 75000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 75000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 80000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 80000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 85000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 85000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 90000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 90000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 95000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 95000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 100000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 110000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 110000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 120000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 120000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 150000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 150000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 180000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 180000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 200000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 200000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 250000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 250000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 300000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 300000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most 400000 people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 400000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 10000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 20000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most thirty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 30000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most forty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 40000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most forty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 45000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 50000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most fifty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 55000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most sixty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 60000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most sixty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 65000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most seventy thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 70000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most seventy five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 75000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 80000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most eighty five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 85000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most ninety thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 90000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most ninety five thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 95000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most one hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most one hundred ten thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 110000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most one hundred twenty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 120000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most one hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 150000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most one hundred eighty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 180000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most two hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 200000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most two hundred fifty thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 250000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most three hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 300000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the most roads and a population of at most four hundred thousand people",
    "sql": "SELECT c.name, ST_AsGeoJSON(c.boundary) AS boundary FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 400000 GROUP BY c.id ORDER BY COUNT(r.id) DESC LIMIT 1"
  },
  # Find cities by matching criteria around area and population
  {
    "natural-language": "Find the city with the smallest area and a population greater than five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 5000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 10000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 15000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 20000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 25000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 30000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than thirty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 35000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 40000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 45000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 50000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 55000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than sixty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 60000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than sixty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 65000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than seventy thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 70000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than seventy five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 75000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 80000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than eighty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 85000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 90000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than ninety five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 95000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than one hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than one hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 105000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than one hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 110000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than one hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 115000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than one hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 120000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than one hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 125000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than one hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 130000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than one hundred forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 140000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than one hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 150000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than two hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 200000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than two hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 205000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than two hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 210000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than two hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 215000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than two hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 220000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than two hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 225000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than two hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 230000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than three hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 300000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than three hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 305000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than three hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 310000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than three hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 315000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than three hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 320000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than three hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 325000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than three hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 330000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than four hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 400000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 5000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 5000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 10000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 10000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 15000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 15000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 20000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 20000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 25000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 25000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 30000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 30000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 35000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 35000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 40000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 40000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 45000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 45000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 50000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 50000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 55000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 55000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 60000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 60000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 65000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 65000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 70000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 70000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 75000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 75000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 80000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 80000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 85000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 85000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 90000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 90000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 95000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 95000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 100000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 105000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 105000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 110000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 110000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 115000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 115000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 120000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 120000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 125000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 125000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 130000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 130000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 140000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 140000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 150000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 200000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 200000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 205000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 205000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 210000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 210000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 215000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 215000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 220000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 220000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 225000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 225000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 230000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 230000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 300000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 300000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 305000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 305000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 310000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 310000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 315000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 315000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 320000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 320000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 325000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 325000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 330000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 330000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 400000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 400000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 5,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 5000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 10,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 10000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 15,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 15000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 20,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 20000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 25,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 25000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 30,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 30000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 35,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 35000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 40,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 40000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 45,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 45000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 50,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 50000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 55,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 55000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 60,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 60000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 65,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 65000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 70,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 70000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 75,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 75000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 80,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 80000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 85,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 85000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 90,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 90000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 95,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 95000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 100,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 105,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 105000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 110,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 110000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 115,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 115000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 120,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 120000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 125,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 125000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 130,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 130000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 140,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 140000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 150000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 200,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 200000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 205,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 205000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 210,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 210000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 215,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 215000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 220,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 220000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 225,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 225000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 230,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 230000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 300,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 300000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 305,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 305000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 310,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 310000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 315,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 315000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 320,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 320000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 325,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 325000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 330,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 330000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population greater than 400,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 400000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 5000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 10000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 15000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 20000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 25000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 30000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least thirty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 35000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 40000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 45000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 50000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 55000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least sixty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 60000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least sixty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 65000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least seventy thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 70000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least seventy five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 75000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 80000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least eighty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 85000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 90000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least ninety five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 95000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least one hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least one hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 105000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least one hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 110000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least one hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 115000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least one hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 120000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least one hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 125000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least one hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 130000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least one hundred forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 140000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least one hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 150000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least two hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 200000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least two hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 205000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least two hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 210000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least two hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 215000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least two hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 220000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least two hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 225000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least two hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 230000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least three hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 300000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least three hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 305000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least three hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 310000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least three hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 315000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least three hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 320000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least three hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 325000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least three hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 330000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least four hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 400000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 5000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 5000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 10000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 10000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 15000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 15000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 20000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 20000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 25000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 25000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 30000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 30000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 35000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 35000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 40000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 40000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 45000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 45000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 50000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 50000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 55000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 55000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 60000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 60000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 65000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 65000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 70000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 70000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 75000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 75000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 80000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 80000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 85000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 85000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 90000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 90000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 95000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 95000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 100000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 105000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 105000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 110000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 110000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 115000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 115000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 120000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 120000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 125000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 125000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 130000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 130000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 140000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 140000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 150000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 200000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 200000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 205000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 205000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 210000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 210000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 215000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 215000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 220000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 220000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 225000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 225000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 230000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 230000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 300000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 300000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 305000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 305000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 310000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 310000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 315000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 315000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 320000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 320000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 325000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 325000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 330000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 330000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 400000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 400000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 5,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 5000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 10,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 10000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 15,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 15000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 20,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 20000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 25,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 25000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 30,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 30000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 35,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 35000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 40,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 40000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 45,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 45000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 50,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 50000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 55,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 55000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 60,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 60000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 65,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 65000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 70,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 70000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 75,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 75000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 80,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 80000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 85,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 85000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 90,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 90000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 95,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 95000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 100,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 105,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 105000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 110,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 110000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 115,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 115000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 120,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 120000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 125,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 125000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 130,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 130000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 140,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 140000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 150000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 200,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 200000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 205,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 205000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 210,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 210000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 215,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 215000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 220,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 220000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 225,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 225000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 230,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 230000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 300,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 300000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 305,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 305000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 310,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 310000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 315,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 315000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 320,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 320000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 325,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 325000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 330,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 330000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at least 400,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 400000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 5000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 10000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 15000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 20000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 25000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 30000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than thirty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 35000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 40000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 45000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 50000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 55000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than sixty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 60000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than sixty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 65000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than seventy thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 70000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than seventy five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 75000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 80000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than eighty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 85000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 90000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than ninety five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 95000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than one hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than one hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 105000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than one hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 110000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than one hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 115000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than one hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 120000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than one hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 125000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than one hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 130000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than one hundred forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 140000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than one hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 150000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than two hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 200000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than two hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 205000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than two hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 210000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than two hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 215000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than two hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 220000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than two hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 225000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than two hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 230000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than three hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 300000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than three hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 305000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than three hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 310000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than three hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 315000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than three hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 320000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than three hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 325000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than three hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 330000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than four hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 400000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 5000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 5000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 10000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 10000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 15000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 15000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 20000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 20000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 25000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 25000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 30000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 30000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 35000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 35000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 40000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 40000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 45000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 45000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 50000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 50000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 55000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 55000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 60000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 60000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 65000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 65000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 70000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 70000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 75000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 75000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 80000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 80000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 85000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 85000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 90000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 90000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 95000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 95000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 100000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 105000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 105000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 110000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 110000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 115000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 115000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 120000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 120000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 125000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 125000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 130000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 130000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 140000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 140000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 150000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 200000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 200000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 205000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 205000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 210000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 210000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 215000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 215000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 220000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 220000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 225000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 225000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 230000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 230000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 300000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 300000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 305000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 305000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 310000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 310000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 315000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 315000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 320000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 320000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 325000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 325000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 330000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 330000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 400000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 400000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 5,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 5000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 10,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 10000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 15,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 15000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 20,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 20000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 25,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 25000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 30,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 30000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 35,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 35000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 40,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 40000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 45,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 45000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 50,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 50000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 55,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 55000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 60,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 60000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 65,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 65000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 70,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 70000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 75,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 75000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 80,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 80000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 85,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 85000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 90,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 90000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 95,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 95000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 100,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 105,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 105000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 110,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 110000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 115,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 115000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 120,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 120000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 125,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 125000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 130,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 130000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 140,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 140000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 150000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 200,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 200000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 205,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 205000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 210,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 210000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 215,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 215000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 220,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 220000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 225,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 225000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 230,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 230000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 300,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 300000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 305,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 305000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 310,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 310000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 315,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 315000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 320,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 320000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 325,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 325000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 330,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 330000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population less than 400,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 400000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 5000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 10000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 15000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 20000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 25000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 30000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most thirty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 35000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 40000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 45000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 50000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 55000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most sixty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 60000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most sixty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 65000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most seventy thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 70000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most seventy five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 75000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 80000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most eighty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 85000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 90000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most ninety five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 95000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most one hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most one hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 105000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most one hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 110000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most one hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 115000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most one hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 120000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most one hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 125000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most one hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 130000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most one hundred forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 140000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most one hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 150000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most two hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 200000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most two hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 205000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most two hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 210000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most two hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 215000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most two hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 220000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most two hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 225000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most two hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 230000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most three hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 300000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most three hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 305000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most three hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 310000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most three hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 315000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most three hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 320000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most three hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 325000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most three hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 330000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most four hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 400000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 5000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 5000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 10000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 10000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 15000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 15000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 20000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 20000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 25000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 25000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 30000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 30000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 35000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 35000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 40000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 40000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 45000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 45000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 50000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 50000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 55000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 55000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 60000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 60000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 65000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 65000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 70000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 70000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 75000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 75000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 80000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 80000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 85000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 85000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 90000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 90000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 95000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 95000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 100000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 105000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 105000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 110000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 110000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 115000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 115000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 120000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 120000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 125000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 125000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 130000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 130000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 140000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 140000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 150000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 200000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 200000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 205000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 205000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 210000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 210000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 215000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 215000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 220000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 220000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 225000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 225000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 230000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 230000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 300000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 300000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 305000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 305000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 310000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 310000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 315000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 315000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 320000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 320000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 325000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 325000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 330000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 330000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 400000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 400000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 5,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 5000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 10,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 10000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 15,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 15000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 20,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 20000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 25,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 25000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 30,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 30000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 35,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 35000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 40,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 40000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 45,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 45000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 50,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 50000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 55,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 55000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 60,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 60000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 65,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 65000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 70,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 70000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 75,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 75000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 80,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 80000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 85,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 85000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 90,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 90000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 95,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 95000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 100,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 105,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 105000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 110,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 110000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 115,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 115000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 120,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 120000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 125,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 125000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 130,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 130000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 140,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 140000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 150000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 200,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 200000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 205,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 205000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 210,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 210000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 215,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 215000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 220,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 220000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 225,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 225000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 230,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 230000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 300,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 300000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 305,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 305000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 310,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 310000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 315,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 315000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 320,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 320000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 325,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 325000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 330,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 330000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and a population of at most 400,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 400000 ORDER BY ST_Area(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 5000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 10000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 15000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 20000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 25000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 30000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than thirty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 35000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 40000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 45000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 50000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 55000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than sixty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 60000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than sixty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 65000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than seventy thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 70000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than seventy five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 75000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 80000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than eighty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 85000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 90000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than ninety five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 95000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than one hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than one hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 105000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than one hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 110000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than one hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 115000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than one hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 120000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than one hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 125000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than one hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 130000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than one hundred forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 140000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than one hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 150000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than two hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 200000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than two hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 205000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than two hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 210000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than two hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 215000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than two hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 220000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than two hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 225000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than two hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 230000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than three hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 300000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than three hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 305000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than three hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 310000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than three hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 315000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than three hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 320000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than three hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 325000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than three hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 330000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than four hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 400000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 5000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 5000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 10000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 10000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 15000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 15000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 20000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 20000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 25000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 25000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 30000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 30000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 35000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 35000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 40000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 40000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 45000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 45000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 50000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 50000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 55000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 55000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 60000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 60000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 65000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 65000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 70000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 70000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 75000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 75000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 80000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 80000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 85000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 85000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 90000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 90000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 95000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 95000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 100000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 105000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 105000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 110000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 110000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 115000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 115000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 120000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 120000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 125000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 125000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 130000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 130000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 140000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 140000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 150000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 200000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 200000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 205000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 205000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 210000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 210000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 215000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 215000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 220000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 220000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 225000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 225000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 230000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 230000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 300000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 300000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 305000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 305000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 310000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 310000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 315000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 315000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 320000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 320000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 325000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 325000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 330000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 330000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 400000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 400000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 5,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 5000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 10,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 10000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 15,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 15000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 20,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 20000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 25,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 25000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 30,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 30000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 35,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 35000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 40,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 40000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 45,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 45000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 50,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 50000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 55,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 55000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 60,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 60000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 65,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 65000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 70,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 70000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 75,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 75000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 80,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 80000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 85,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 85000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 90,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 90000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 95,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 95000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 100,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 100000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 105,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 105000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 110,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 110000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 115,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 115000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 120,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 120000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 125,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 125000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 130,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 130000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 140,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 140000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 150000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 200,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 200000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 205,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 205000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 210,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 210000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 215,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 215000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 220,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 220000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 225,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 225000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 230,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 230000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 300,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 300000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 305,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 305000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 310,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 310000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 315,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 315000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 320,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 320000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 325,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 325000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 330,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 330000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population greater than 400,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population > 400000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 5000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 10000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 15000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 20000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 25000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 30000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least thirty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 35000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 40000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 45000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 50000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 55000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least sixty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 60000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least sixty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 65000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least seventy thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 70000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least seventy five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 75000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 80000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least eighty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 85000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 90000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least ninety five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 95000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least one hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least one hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 105000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least one hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 110000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least one hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 115000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least one hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 120000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least one hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 125000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least one hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 130000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least one hundred forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 140000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least one hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 150000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least two hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 200000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least two hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 205000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least two hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 210000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least two hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 215000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least two hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 220000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least two hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 225000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least two hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 230000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least three hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 300000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least three hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 305000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least three hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 310000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least three hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 315000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least three hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 320000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least three hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 325000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least three hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 330000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least four hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 400000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 5000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 5000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 10000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 10000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 15000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 15000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 20000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 20000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 25000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 25000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 30000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 30000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 35000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 35000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 40000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 40000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 45000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 45000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 50000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 50000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 55000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 55000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 60000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 60000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 65000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 65000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 70000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 70000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 75000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 75000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 80000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 80000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 85000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 85000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 90000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 90000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 95000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 95000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 100000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 105000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 105000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 110000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 110000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 115000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 115000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 120000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 120000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 125000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 125000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 130000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 130000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 140000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 140000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 150000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 200000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 200000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 205000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 205000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 210000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 210000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 215000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 215000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 220000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 220000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 225000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 225000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 230000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 230000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 300000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 300000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 305000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 305000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 310000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 310000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 315000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 315000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 320000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 320000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 325000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 325000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 330000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 330000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 400000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 400000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 5,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 5000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 10,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 10000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 15,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 15000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 20,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 20000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 25,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 25000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 30,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 30000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 35,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 35000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 40,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 40000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 45,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 45000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 50,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 50000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 55,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 55000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 60,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 60000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 65,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 65000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 70,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 70000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 75,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 75000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 80,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 80000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 85,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 85000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 90,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 90000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 95,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 95000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 100,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 100000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 105,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 105000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 110,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 110000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 115,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 115000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 120,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 120000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 125,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 125000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 130,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 130000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 140,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 140000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 150000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 200,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 200000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 205,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 205000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 210,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 210000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 215,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 215000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 220,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 220000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 225,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 225000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 230,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 230000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 300,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 300000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 305,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 305000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 310,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 310000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 315,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 315000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 320,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 320000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 325,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 325000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 330,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 330000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at least 400,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population >= 400000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 5000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 10000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 15000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 20000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 25000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 30000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than thirty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 35000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 40000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 45000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 50000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 55000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than sixty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 60000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than sixty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 65000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than seventy thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 70000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than seventy five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 75000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 80000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than eighty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 85000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 90000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than ninety five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 95000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than one hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than one hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 105000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than one hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 110000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than one hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 115000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than one hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 120000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than one hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 125000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than one hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 130000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than one hundred forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 140000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than one hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 150000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than two hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 200000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than two hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 205000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than two hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 210000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than two hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 215000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than two hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 220000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than two hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 225000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than two hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 230000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than three hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 300000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than three hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 305000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than three hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 310000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than three hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 315000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than three hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 320000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than three hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 325000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than three hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 330000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than four hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 400000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 5000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 5000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 10000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 10000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 15000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 15000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 20000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 20000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 25000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 25000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 30000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 30000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 35000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 35000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 40000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 40000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 45000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 45000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 50000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 50000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 55000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 55000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 60000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 60000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 65000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 65000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 70000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 70000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 75000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 75000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 80000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 80000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 85000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 85000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 90000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 90000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 95000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 95000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 100000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 105000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 105000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 110000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 110000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 115000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 115000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 120000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 120000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 125000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 125000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 130000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 130000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 140000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 140000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 150000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 200000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 200000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 205000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 205000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 210000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 210000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 215000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 215000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 220000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 220000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 225000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 225000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 230000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 230000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 300000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 300000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 305000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 305000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 310000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 310000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 315000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 315000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 320000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 320000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 325000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 325000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 330000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 330000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 400000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 400000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 5,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 5000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 10,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 10000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 15,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 15000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 20,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 20000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 25,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 25000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 30,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 30000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 35,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 35000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 40,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 40000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 45,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 45000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 50,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 50000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 55,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 55000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 60,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 60000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 65,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 65000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 70,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 70000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 75,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 75000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 80,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 80000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 85,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 85000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 90,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 90000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 95,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 95000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 100,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 100000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 105,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 105000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 110,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 110000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 115,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 115000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 120,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 120000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 125,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 125000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 130,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 130000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 140,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 140000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 150000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 200,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 200000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 205,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 205000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 210,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 210000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 215,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 215000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 220,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 220000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 225,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 225000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 230,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 230000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 300,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 300000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 305,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 305000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 310,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 310000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 315,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 315000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 320,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 320000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 325,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 325000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 330,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 330000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population less than 400,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population < 400000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 5000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 10000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 15000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 20000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 25000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 30000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most thirty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 35000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 40000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most forty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 45000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 50000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most fifty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 55000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most sixty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 60000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most sixty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 65000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most seventy thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 70000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most seventy five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 75000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most eighty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 80000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most eighty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 85000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most ninety thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 90000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most ninety five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 95000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most one hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most one hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 105000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most one hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 110000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most one hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 115000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most one hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 120000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most one hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 125000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most one hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 130000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most one hundred forty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 140000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most one hundred fifty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 150000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most two hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 200000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most two hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 205000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most two hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 210000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most two hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 215000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most two hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 220000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most two hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 225000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most two hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 230000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most three hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 300000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most three hundred five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 305000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most three hundred ten thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 310000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most three hundred fifteen thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 315000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most three hundred twenty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 320000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most three hundred twenty five thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 325000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most three hundred thirty thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 330000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most four hundred thousand people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 400000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 5000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 5000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 10000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 10000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 15000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 15000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 20000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 20000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 25000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 25000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 30000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 30000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 35000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 35000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 40000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 40000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 45000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 45000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 50000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 50000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 55000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 55000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 60000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 60000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 65000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 65000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 70000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 70000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 75000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 75000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 80000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 80000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 85000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 85000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 90000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 90000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 95000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 95000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 100000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 105000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 105000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 110000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 110000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 115000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 115000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 120000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 120000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 125000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 125000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 130000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 130000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 140000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 140000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 150000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 150000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 200000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 200000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 205000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 205000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 210000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 210000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 215000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 215000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 220000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 220000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 225000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 225000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 230000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 230000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 300000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 300000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 305000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 305000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 310000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 310000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 315000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 315000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 320000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 320000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 325000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 325000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 330000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 330000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 400000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 400000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 5,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 5000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 10,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 10000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 15,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 15000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 20,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 20000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 25,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 25000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 30,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 30000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 35,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 35000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 40,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 40000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 45,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 45000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 50,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 50000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 55,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 55000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 60,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 60000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 65,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 65000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 70,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 70000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 75,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 75000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 80,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 80000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 85,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 85000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 90,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 90000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 95,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 95000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 100,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 100000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 105,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 105000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 110,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 110000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 115,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 115000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 120,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 120000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 125,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 125000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 130,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 130000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 140,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 140000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 150,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 150000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 200,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 200000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 205,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 205000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 210,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 210000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 215,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 215000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 220,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 220000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 225,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 225000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 230,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 230000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 300,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 300000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 305,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 305000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 310,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 310000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 315,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 315000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 320,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 320000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 325,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 325000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 330,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 330000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and a population of at most 400,000 people",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities WHERE population <= 400000 ORDER BY ST_Area(boundary) DESC LIMIT 1"
  },
  # Find cities by matching criteria around area and roads
  {
    "natural-language": "Find the city with the largest area and at least one road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 1) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least two roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 2) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least three roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 3) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least four roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 4) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least five roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 5) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least six roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 6) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least seven roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 7) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least eight roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 8) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least nine roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 9) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least ten roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 10) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least eleven road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 11) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least twelve roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 12) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least thirteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 13) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least fourteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 14) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least fifteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 15) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least sixteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 16) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least seventeen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 17) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least eighteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 18) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least nineteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 19) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least twenty roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 20) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 1 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 1) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 2 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 2) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 3 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 3) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 4 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 4) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 5 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 5) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 6 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 6) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 7 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 7) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 8 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 8) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 9 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 9) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 10 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 10) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 11 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 11) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 12 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 12) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 13 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 13) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 14 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 14) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 15 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 15) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 16 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 16) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 17 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 17) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 18 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 18) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 19 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 19) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and at least 20 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 20) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than one road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 1) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than two roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 2) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than three roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 3) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than four roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 4) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than five roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 5) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than six roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 6) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than seven roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 7) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than eight roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 8) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than nine roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 9) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than ten roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 10) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than eleven road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 11) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than twelve roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 12) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than thirteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 13) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than fourteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 14) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than fifteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 15) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than sixteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 16) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than seventeen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 17) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than eighteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 18) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than nineteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 19) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than twenty roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 20) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 1 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 1) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 2 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 2) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 3 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 3) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 4 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 4) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 5 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 5) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 6 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 6) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 7 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 7) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 8 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 8) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 9 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 9) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 10 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 10) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 11 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 11) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 12 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 12) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 13 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 13) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 14 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 14) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 15 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 15) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 16 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 16) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 17 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 17) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 18 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 18) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 19 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 19) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and more than 20 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 20) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than one road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 1) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than two roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 2) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than three roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 3) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than four roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 4) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than five roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 5) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than six roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 6) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than seven roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 7) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than eight roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 8) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than nine roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 9) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than ten roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 10) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than eleven road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 11) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than twelve roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 12) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than thirteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 13) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than fourteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 14) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than fifteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 15) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than sixteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 16) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than seventeen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 17) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than eighteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 18) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than nineteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 19) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than twenty roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 20) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 1 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 1) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 2 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 2) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 3 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 3) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 4 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 4) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 5 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 5) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 6 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 6) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 7 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 7) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 8 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 8) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 9 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 9) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 10 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 10) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 11 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 11) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 12 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 12) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 13 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 13) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 14 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 14) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 15 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 15) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 16 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 16) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 17 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 17) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 18 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 18) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 19 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 19) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and no more than 20 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 20) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than one road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 1) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than two roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 2) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than three roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 3) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than four roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 4) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than five roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 5) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than six roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 6) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than seven roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 7) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than eight roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 8) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than nine roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 9) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than ten roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 10) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than eleven road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 11) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than twelve roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 12) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than thirteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 13) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than fourteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 14) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than fifteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 15) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than sixteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 16) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than seventeen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 17) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than eighteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 18) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than nineteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 19) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than twenty roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 20) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 1 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 1) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 2 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 2) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 3 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 3) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 4 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 4) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 5 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 5) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 6 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 6) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 7 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 7) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 8 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 8) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 9 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 9) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 10 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 10) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 11 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 11) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 12 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 12) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 13 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 13) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 14 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 14) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 15 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 15) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 16 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 16) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 17 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 17) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 18 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 18) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 19 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 19) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the largest area and less than 20 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 20) SELECT name FROM city_road_counts ORDER BY area DESC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least one road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 1) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least two roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 2) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least three roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 3) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least four roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 4) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least five roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 5) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least six roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 6) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least seven roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 7) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least eight roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 8) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least nine roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 9) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least ten roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 10) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least eleven road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 11) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least twelve roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 12) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least thirteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 13) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least fourteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 14) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least fifteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 15) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least sixteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 16) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least seventeen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 17) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least eighteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 18) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least nineteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 19) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least twenty roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 20) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 1 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 1) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 2 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 2) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 3 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 3) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 4 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 4) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 5 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 5) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 6 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 6) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 7 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 7) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 8 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 8) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 9 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 9) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 10 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 10) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 11 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 11) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 12 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 12) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 13 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 13) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 14 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 14) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 15 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 15) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 16 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 16) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 17 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 17) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 18 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 18) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 19 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 19) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and at least 20 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) >= 20) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than one road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 1) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than two roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 2) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than three roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 3) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than four roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 4) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than five roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 5) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than six roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 6) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than seven roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 7) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than eight roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 8) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than nine roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 9) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than ten roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 10) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than eleven road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 11) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than twelve roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 12) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than thirteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 13) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than fourteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 14) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than fifteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 15) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than sixteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 16) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than seventeen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 17) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than eighteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 18) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than nineteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 19) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than twenty roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 20) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 1 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 1) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 2 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 2) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 3 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 3) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 4 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 4) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 5 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 5) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 6 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 6) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 7 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 7) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 8 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 8) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 9 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 9) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 10 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 10) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 11 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 11) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 12 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 12) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 13 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 13) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 14 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 14) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 15 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 15) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 16 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 16) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 17 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 17) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 18 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 18) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 19 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 19) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and more than 20 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) > 20) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than one road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 1) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than two roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 2) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than three roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 3) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than four roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 4) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than five roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 5) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than six roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 6) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than seven roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 7) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than eight roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 8) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than nine roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 9) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than ten roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 10) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than eleven road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 11) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than twelve roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 12) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than thirteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 13) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than fourteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 14) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than fifteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 15) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than sixteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 16) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than seventeen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 17) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than eighteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 18) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than nineteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 19) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than twenty roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 20) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 1 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 1) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 2 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 2) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 3 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 3) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 4 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 4) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 5 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 5) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 6 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 6) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 7 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 7) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 8 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 8) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 9 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 9) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 10 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 10) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 11 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 11) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 12 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 12) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 13 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 13) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 14 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 14) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 15 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 15) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 16 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 16) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 17 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 17) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 18 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 18) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 19 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 19) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and no more than 20 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) <= 20) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than one road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 1) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than two roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 2) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than three roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 3) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than four roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 4) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than five roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 5) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than six roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 6) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than seven roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 7) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than eight roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 8) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than nine roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 9) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than ten roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 10) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than eleven road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 11) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than twelve roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 12) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than thirteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 13) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than fourteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 14) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than fifteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 15) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than sixteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 16) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than seventeen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 17) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than eighteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 18) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than nineteen roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 19) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than twenty roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 20) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 1 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 1) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 2 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 2) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 3 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 3) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 4 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 4) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 5 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 5) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 6 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 6) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 7 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 7) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 8 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 8) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 9 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 9) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 10 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 10) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 11 road",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 11) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 12 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 12) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 13 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 13) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 14 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 14) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 15 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 15) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 16 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 16) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 17 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 17) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 18 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 18) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 19 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 19) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  {
    "natural-language": "Find the city with the smallest area and less than 20 roads",
    "sql": "WITH city_areas AS (SELECT id, name, ST_Area(boundary::geography) AS area FROM cities), city_road_counts AS (SELECT c.id, c.name, COUNT(r.id) AS road_count, ca.area FROM cities c JOIN roads r ON ST_Intersects(ST_Transform(c.boundary, 4326), ST_Transform(r.route, 4326)) JOIN city_areas ca ON c.id = ca.id GROUP BY c.id, c.name, ca.area HAVING COUNT(r.id) < 20) SELECT name FROM city_road_counts ORDER BY area ASC LIMIT 1"
  },
  # Northernmost city, southermost city, etc.
  {
    "natural-language": "Find the northernmost city",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities ORDER BY ST_YMax(boundary) DESC LIMIT 1"
  },
   {
    "natural-language": "Find the southernmost city",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities ORDER BY ST_YMin(boundary) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the easternmost city",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities ORDER BY ST_XMax(boundary) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the westernmost city",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM cities ORDER BY ST_XMin(boundary) ASC LIMIT 1"
  },

  # Roads
  # Roads that intersect the point
  {
    "natural-language": "Find roads that intersect the point at (34.26507894016965, -119.26915119600329)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.26915119600329, 34.26507894016965), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.26805038529929, -119.19346984885188)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.19346984885188, 34.26805038529929), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.205300863788004, -119.15968622949566)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.15968622949566, 34.205300863788004), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.15048144761413, -118.82530359647478)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-118.82530359647478, 34.15048144761413), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.27681840840993, -119.28239503708643)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.28239503708643, 34.27681840840993), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.27950050473732, -119.30074932077764)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.30074932077764, 34.27950050473732), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.44886646434795, -119.22831722096964)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.22831722096964, 34.44886646434795), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.53002604716552, -119.26533992332458)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.26533992332458, 34.53002604716552), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.45257055531265, -119.24638941653723)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.24638941653723, 34.45257055531265), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.24177602838427, -119.02968049260319)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.02968049260319, 34.24177602838427), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.439684074273174, -119.28492364964283)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.28492364964283, 34.439684074273174), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.18975111144517, -119.17746610977325)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.17746610977325, 34.18975111144517), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.21889915415481, -119.15828061225007)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.15828061225007, 34.21889915415481), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.31517917389791, -118.92140871797332)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-118.92140871797332, 34.31517917389791), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.33723599152054, -119.08285389431659)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.08285389431659, 34.33723599152054), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.1733989602336, -119.17755588768398)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.17755588768398, 34.1733989602336), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.228386764809706, -119.20564564992891)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.20564564992891, 34.228386764809706), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.20842363831797, -119.20787290174934)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.20787290174934, 34.20842363831797), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.21887713094734, -119.06974938376794)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.06974938376794, 34.21887713094734), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.21825540312903, -119.0050446763035)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.0050446763035, 34.21825540312903), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.25845391618182, -118.9956221482037)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-118.9956221482037, 34.25845391618182), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.277880525598114, -119.16901264239188)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.16901264239188, 34.277880525598114), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.2399507078217, -118.984900625064)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-118.984900625064, 34.2399507078217), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.23737085361437, -119.04702605854114)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.04702605854114, 34.23737085361437), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.21726021957788, -119.03219326406408)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.03219326406408, 34.21726021957788), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.263748070745045, -119.01117298640172)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.01117298640172, 34.263748070745045), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.34075281014849, -119.1169716884745)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.1169716884745, 34.34075281014849), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.254514915995415, -119.19805080284718)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.19805080284718, 34.254514915995415), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.27304241845619, -119.24773771959808)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.24773771959808, 34.27304241845619), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.421111178370474, -119.30393945027923)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.30393945027923, 34.421111178370474), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.3987203504065, -118.92794303901464)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-118.92794303901464, 34.3987203504065), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.20620156077104, -119.14447740529138)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.14447740529138, 34.20620156077104), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.29604089933662, -118.84969638442925)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-118.84969638442925, 34.29604089933662), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.226535877457316, -119.05122706598993)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.05122706598993, 34.226535877457316), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.406807317194634, -118.9150133497815)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-118.9150133497815, 34.406807317194634), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.378780133551075, -118.91577347565624)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-118.91577347565624, 34.378780133551075), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.174751869554825, -119.23223160268773)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.23223160268773, 34.174751869554825), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.2211382359803, -119.18011543749964)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.18011543749964, 34.2211382359803), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.282560743353145, -118.67086097200007)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-118.67086097200007, 34.282560743353145), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.296036257545154, -118.84181714915407)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-118.84181714915407, 34.296036257545154), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.2064813707438, -119.16427752328438)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.16427752328438, 34.2064813707438), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.17894623977626, -118.87721671398127)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-118.87721671398127, 34.17894623977626), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.27890072051965, -118.9008783702391)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-118.9008783702391, 34.27890072051965), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.4556125227839, -119.2062038878815)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.2062038878815, 34.4556125227839), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.39584528195177, -119.45095793475929)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.45095793475929, 34.39584528195177), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.35270711075476, -119.30524405335618)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.30524405335618, 34.35270711075476), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.288990619588695, -119.29550947134541)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.29550947134541, 34.288990619588695), 4326))"
  },
  {
    "natural-language": "Find roads that intersect the point at (34.27282167316378, -119.09376425752103)",
    "sql": "SELECT name FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_SetSRID(ST_MakePoint(-119.09376425752103, 34.27282167316378), 4326))"
  },
  # Roads that are km long
  {
    "natural-language": "Find roads that are longer than half of a kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 500"
  },
  {
    "natural-language": "Find roads that are longer than one kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 1000"
  },
  {
    "natural-language": "Find roads that are longer than one and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 1500"
  },
  {
    "natural-language": "Find roads that are longer than two kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 2000"
  },
  {
    "natural-language": "Find roads that are longer than two and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 2500"
  },
  {
    "natural-language": "Find roads that are longer than three kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 3000"
  },
  {
    "natural-language": "Find roads that are longer than three and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 3500"
  },
  {
    "natural-language": "Find roads that are longer than four kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 4000"
  },
  {
    "natural-language": "Find roads that are longer than four and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 4500"
  },
  {
    "natural-language": "Find roads that are longer than five kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 5000"
  },
  {
    "natural-language": "Find roads that are longer than five and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 5500"
  },
  {
    "natural-language": "Find roads that are longer than six kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 6000"
  },
  {
    "natural-language": "Find roads that are longer than six and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 6500"
  },
  {
    "natural-language": "Find roads that are longer than seven kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 7000"
  },
  {
    "natural-language": "Find roads that are longer than seven and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 7500"
  },
  {
    "natural-language": "Find roads that are longer than eight kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 8000"
  },
  {
    "natural-language": "Find roads that are longer than eight and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 8500"
  },
  {
    "natural-language": "Find roads that are longer than nine kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 9000"
  },
  {
    "natural-language": "Find roads that are longer than nine and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 9500"
  },
  {
    "natural-language": "Find roads that are longer than ten kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 10000"
  },
  {
    "natural-language": "Find roads that are longer than ten and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 10500"
  },
  {
    "natural-language": "Find roads that are longer than eleven kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 11000"
  },
  {
    "natural-language": "Find roads that are longer than eleven and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 11500"
  },
  {
    "natural-language": "Find roads that are longer than twelve kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 12000"
  },
  {
    "natural-language": "Find roads that are longer than twelve and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 12500"
  },
  {
    "natural-language": "Find roads that are longer than thirteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 13000"
  },
  {
    "natural-language": "Find roads that are longer than thirteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 13500"
  },
  {
    "natural-language": "Find roads that are longer than fourteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 14000"
  },
  {
    "natural-language": "Find roads that are longer than fourteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 14500"
  },
  {
    "natural-language": "Find roads that are longer than fifteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 15000"
  },
  {
    "natural-language": "Find roads that are longer than fifteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 15500"
  },
  {
    "natural-language": "Find roads that are longer than sixteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 16000"
  },
  {
    "natural-language": "Find roads that are longer than sixteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 16500"
  },
  {
    "natural-language": "Find roads that are longer than seventeen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 17000"
  },
  {
    "natural-language": "Find roads that are longer than seventeen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 17500"
  },
  {
    "natural-language": "Find roads that are longer than eighteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 18000"
  },
  {
    "natural-language": "Find roads that are longer than eighteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 18500"
  },
  {
    "natural-language": "Find roads that are longer than nineteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 19000"
  },
  {
    "natural-language": "Find roads that are longer than nineteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 19500"
  },
  {
    "natural-language": "Find roads that are longer than twenty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 20000"
  },
  {
    "natural-language": "Find roads that are longer than twenty and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 20500"
  },
  {
    "natural-language": "Find roads that are longer than twenty one kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 21000"
  },
  {
    "natural-language": "Find roads that are longer than twenty two kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 22000"
  },
  {
    "natural-language": "Find roads that are longer than twenty three kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 23000"
  },
  {
    "natural-language": "Find roads that are longer than twenty four kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 24000"
  },
  {
    "natural-language": "Find roads that are longer than twenty five kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 25000"
  },
  {
    "natural-language": "Find roads that are longer than twenty six kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 26000"
  },
  {
    "natural-language": "Find roads that are longer than twenty seven kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 27000"
  },
  {
    "natural-language": "Find roads that are longer than twenty eight kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 28000"
  },
  {
    "natural-language": "Find roads that are longer than twenty nine kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 29000"
  },
  {
    "natural-language": "Find roads that are longer than thirty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 30000"
  },
  {
    "natural-language": "Find roads that are longer than forty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 40000"
  },
  {
    "natural-language": "Find roads that are longer than fifty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 50000"
  },
  {
    "natural-language": "Find roads that are longer than sixty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 60000"
  },
  {
    "natural-language": "Find roads that are longer than seventy kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 70000"
  },
  {
    "natural-language": "Find roads that are longer than eighty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 80000"
  },
  {
    "natural-language": "Find roads that are longer than ninety kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 90000"
  },
  {
    "natural-language": "Find roads that are longer than one hundred kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 100000"
  },
  {
    "natural-language": "Find roads that are longer than one hundred ten kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 110000"
  },
  {
    "natural-language": "Find roads that are longer than one hundred twenty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 120000"
  },
  {
    "natural-language": "Find roads that are longer than one hundred thirty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 130000"
  },
  {
    "natural-language": "Find roads that are longer than one hundred forty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 140000"
  },
  {
    "natural-language": "Find roads that are longer than one hundred fifty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 150000"
  },
  {
    "natural-language": "Find roads that are longer than two hundred kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 200000"
  },
  {
    "natural-language": "Find roads that are longer than three hundred kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 300000"
  },
  {
    "natural-language": "Find roads that are longer than .5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 500"
  },
  {
    "natural-language": "Find roads that are longer than 1 kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 1000"
  },
  {
    "natural-language": "Find roads that are longer than 1.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 1500"
  },
  {
    "natural-language": "Find roads that are longer than 2 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 2000"
  },
  {
    "natural-language": "Find roads that are longer than 2.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 2500"
  },
  {
    "natural-language": "Find roads that are longer than 3 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 3000"
  },
  {
    "natural-language": "Find roads that are longer than 3.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 3500"
  },
  {
    "natural-language": "Find roads that are longer than 4 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 4000"
  },
  {
    "natural-language": "Find roads that are longer than 4.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 4500"
  },
  {
    "natural-language": "Find roads that are longer than 5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 5000"
  },
  {
    "natural-language": "Find roads that are longer than 5.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 5500"
  },
  {
    "natural-language": "Find roads that are longer than 6 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 6000"
  },
  {
    "natural-language": "Find roads that are longer than 6.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 6500"
  },
  {
    "natural-language": "Find roads that are longer than 7 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 7000"
  },
  {
    "natural-language": "Find roads that are longer than 7.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 7500"
  },
  {
    "natural-language": "Find roads that are longer than 8 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 8000"
  },
  {
    "natural-language": "Find roads that are longer than 8.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 8500"
  },
  {
    "natural-language": "Find roads that are longer than 9 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 9000"
  },
  {
    "natural-language": "Find roads that are longer than 9.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 9500"
  },
  {
    "natural-language": "Find roads that are longer than 10 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 10000"
  },
  {
    "natural-language": "Find roads that are longer than 10.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 10500"
  },
  {
    "natural-language": "Find roads that are longer than 11 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 11000"
  },
  {
    "natural-language": "Find roads that are longer than 11.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 11500"
  },
  {
    "natural-language": "Find roads that are longer than 12 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 12000"
  },
  {
    "natural-language": "Find roads that are longer than 12.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 12500"
  },
  {
    "natural-language": "Find roads that are longer than 13 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 13000"
  },
  {
    "natural-language": "Find roads that are longer than 13.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 13500"
  },
  {
    "natural-language": "Find roads that are longer than 14 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 14000"
  },
  {
    "natural-language": "Find roads that are longer than 14.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 14500"
  },
  {
    "natural-language": "Find roads that are longer than 15 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 15000"
  },
  {
    "natural-language": "Find roads that are longer than 15.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 15500"
  },
  {
    "natural-language": "Find roads that are longer than 16 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 16000"
  },
  {
    "natural-language": "Find roads that are longer than 16.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 16500"
  },
  {
    "natural-language": "Find roads that are longer than 17 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 17000"
  },
  {
    "natural-language": "Find roads that are longer than 17.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 17500"
  },
  {
    "natural-language": "Find roads that are longer than 18 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 18000"
  },
  {
    "natural-language": "Find roads that are longer than 18.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 18500"
  },
  {
    "natural-language": "Find roads that are longer than 19 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 19000"
  },
  {
    "natural-language": "Find roads that are longer than 19.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 19500"
  },
  {
    "natural-language": "Find roads that are longer than 20 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 20000"
  },
  {
    "natural-language": "Find roads that are longer than 20.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 20500"
  },
  {
    "natural-language": "Find roads that are longer than 21 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 21000"
  },
  {
    "natural-language": "Find roads that are longer than 22 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 22000"
  },
  {
    "natural-language": "Find roads that are longer than 23 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 23000"
  },
  {
    "natural-language": "Find roads that are longer than 24 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 24000"
  },
  {
    "natural-language": "Find roads that are longer than 25 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 25000"
  },
  {
    "natural-language": "Find roads that are longer than 26 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 26000"
  },
  {
    "natural-language": "Find roads that are longer than 27 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 27000"
  },
  {
    "natural-language": "Find roads that are longer than 28 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 28000"
  },
  {
    "natural-language": "Find roads that are longer than 29 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 29000"
  },
  {
    "natural-language": "Find roads that are longer than 30 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 30000"
  },
  {
    "natural-language": "Find roads that are longer than 40 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 40000"
  },
  {
    "natural-language": "Find roads that are longer than 50 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 50000"
  },
  {
    "natural-language": "Find roads that are longer than 60 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 60000"
  },
  {
    "natural-language": "Find roads that are longer than 70 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 70000"
  },
  {
    "natural-language": "Find roads that are longer than 80 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 80000"
  },
  {
    "natural-language": "Find roads that are longer than 90 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 90000"
  },
  {
    "natural-language": "Find roads that are longer than 100 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 100000"
  },
  {
    "natural-language": "Find roads that are longer than 110 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 110000"
  },
  {
    "natural-language": "Find roads that are longer than 120 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 120000"
  },
  {
    "natural-language": "Find roads that are longer than 130 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 130000"
  },
  {
    "natural-language": "Find roads that are longer than 140 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 140000"
  },
  {
    "natural-language": "Find roads that are longer than 150 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 150000"
  },
  {
    "natural-language": "Find roads that are longer than 200 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 200000"
  },
  {
    "natural-language": "Find roads that are longer than 300 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) > 300000"
  },
  {
    "natural-language": "Find roads that are at least half of a kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 500"
  },
  {
    "natural-language": "Find roads that are at least one kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 1000"
  },
  {
    "natural-language": "Find roads that are at least one and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 1500"
  },
  {
    "natural-language": "Find roads that are at least two kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 2000"
  },
  {
    "natural-language": "Find roads that are at least two and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 2500"
  },
  {
    "natural-language": "Find roads that are at least three kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 3000"
  },
  {
    "natural-language": "Find roads that are at least three and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 3500"
  },
  {
    "natural-language": "Find roads that are at least four kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 4000"
  },
  {
    "natural-language": "Find roads that are at least four and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 4500"
  },
  {
    "natural-language": "Find roads that are at least five kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 5000"
  },
  {
    "natural-language": "Find roads that are at least five and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 5500"
  },
  {
    "natural-language": "Find roads that are at least six kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 6000"
  },
  {
    "natural-language": "Find roads that are at least six and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 6500"
  },
  {
    "natural-language": "Find roads that are at least seven kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 7000"
  },
  {
    "natural-language": "Find roads that are at least seven and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 7500"
  },
  {
    "natural-language": "Find roads that are at least eight kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 8000"
  },
  {
    "natural-language": "Find roads that are at least eight and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 8500"
  },
  {
    "natural-language": "Find roads that are at least nine kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 9000"
  },
  {
    "natural-language": "Find roads that are at least nine and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 9500"
  },
  {
    "natural-language": "Find roads that are at least ten kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 10000"
  },
  {
    "natural-language": "Find roads that are at least ten and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 10500"
  },
  {
    "natural-language": "Find roads that are at least eleven kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 11000"
  },
  {
    "natural-language": "Find roads that are at least eleven and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 11500"
  },
  {
    "natural-language": "Find roads that are at least twelve kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 12000"
  },
  {
    "natural-language": "Find roads that are at least twelve and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 12500"
  },
  {
    "natural-language": "Find roads that are at least thirteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 13000"
  },
  {
    "natural-language": "Find roads that are at least thirteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 13500"
  },
  {
    "natural-language": "Find roads that are at least fourteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 14000"
  },
  {
    "natural-language": "Find roads that are at least fourteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 14500"
  },
  {
    "natural-language": "Find roads that are at least fifteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 15000"
  },
  {
    "natural-language": "Find roads that are at least fifteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 15500"
  },
  {
    "natural-language": "Find roads that are at least sixteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 16000"
  },
  {
    "natural-language": "Find roads that are at least sixteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 16500"
  },
  {
    "natural-language": "Find roads that are at least seventeen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 17000"
  },
  {
    "natural-language": "Find roads that are at least seventeen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 17500"
  },
  {
    "natural-language": "Find roads that are at least eighteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 18000"
  },
  {
    "natural-language": "Find roads that are at least eighteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 18500"
  },
  {
    "natural-language": "Find roads that are at least nineteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 19000"
  },
  {
    "natural-language": "Find roads that are at least nineteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 19500"
  },
  {
    "natural-language": "Find roads that are at least twenty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 20000"
  },
  {
    "natural-language": "Find roads that are at least twenty and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 20500"
  },
  {
    "natural-language": "Find roads that are at least twenty one kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 21000"
  },
  {
    "natural-language": "Find roads that are at least twenty two kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 22000"
  },
  {
    "natural-language": "Find roads that are at least twenty three kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 23000"
  },
  {
    "natural-language": "Find roads that are at least twenty four kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 24000"
  },
  {
    "natural-language": "Find roads that are at least twenty five kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 25000"
  },
  {
    "natural-language": "Find roads that are at least twenty six kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 26000"
  },
  {
    "natural-language": "Find roads that are at least twenty seven kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 27000"
  },
  {
    "natural-language": "Find roads that are at least twenty eight kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 28000"
  },
  {
    "natural-language": "Find roads that are at least twenty nine kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 29000"
  },
  {
    "natural-language": "Find roads that are at least thirty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 30000"
  },
  {
    "natural-language": "Find roads that are at least forty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 40000"
  },
  {
    "natural-language": "Find roads that are at least fifty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 50000"
  },
  {
    "natural-language": "Find roads that are at least sixty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 60000"
  },
  {
    "natural-language": "Find roads that are at least seventy kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 70000"
  },
  {
    "natural-language": "Find roads that are at least eighty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 80000"
  },
  {
    "natural-language": "Find roads that are at least ninety kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 90000"
  },
  {
    "natural-language": "Find roads that are at least one hundred kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 100000"
  },
  {
    "natural-language": "Find roads that are at least one hundred ten kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 110000"
  },
  {
    "natural-language": "Find roads that are at least one hundred twenty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 120000"
  },
  {
    "natural-language": "Find roads that are at least one hundred thirty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 130000"
  },
  {
    "natural-language": "Find roads that are at least one hundred forty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 140000"
  },
  {
    "natural-language": "Find roads that are at least one hundred fifty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 150000"
  },
  {
    "natural-language": "Find roads that are at least two hundred kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 200000"
  },
  {
    "natural-language": "Find roads that are at least three hundred kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 300000"
  },
  {
    "natural-language": "Find roads that are at least .5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 500"
  },
  {
    "natural-language": "Find roads that are at least 1 kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 1000"
  },
  {
    "natural-language": "Find roads that are at least 1.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 1500"
  },
  {
    "natural-language": "Find roads that are at least 2 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 2000"
  },
  {
    "natural-language": "Find roads that are at least 2.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 2500"
  },
  {
    "natural-language": "Find roads that are at least 3 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 3000"
  },
  {
    "natural-language": "Find roads that are at least 3.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 3500"
  },
  {
    "natural-language": "Find roads that are at least 4 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 4000"
  },
  {
    "natural-language": "Find roads that are at least 4.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 4500"
  },
  {
    "natural-language": "Find roads that are at least 5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 5000"
  },
  {
    "natural-language": "Find roads that are at least 5.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 5500"
  },
  {
    "natural-language": "Find roads that are at least 6 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 6000"
  },
  {
    "natural-language": "Find roads that are at least 6.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 6500"
  },
  {
    "natural-language": "Find roads that are at least 7 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 7000"
  },
  {
    "natural-language": "Find roads that are at least 7.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 7500"
  },
  {
    "natural-language": "Find roads that are at least 8 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 8000"
  },
  {
    "natural-language": "Find roads that are at least 8.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 8500"
  },
  {
    "natural-language": "Find roads that are at least 9 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 9000"
  },
  {
    "natural-language": "Find roads that are at least 9.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 9500"
  },
  {
    "natural-language": "Find roads that are at least 10 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 10000"
  },
  {
    "natural-language": "Find roads that are at least 10.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 10500"
  },
  {
    "natural-language": "Find roads that are at least 11 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 11000"
  },
  {
    "natural-language": "Find roads that are at least 11.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 11500"
  },
  {
    "natural-language": "Find roads that are at least 12 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 12000"
  },
  {
    "natural-language": "Find roads that are at least 12.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 12500"
  },
  {
    "natural-language": "Find roads that are at least 13 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 13000"
  },
  {
    "natural-language": "Find roads that are at least 13.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 13500"
  },
  {
    "natural-language": "Find roads that are at least 14 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 14000"
  },
  {
    "natural-language": "Find roads that are at least 14.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 14500"
  },
  {
    "natural-language": "Find roads that are at least 15 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 15000"
  },
  {
    "natural-language": "Find roads that are at least 15.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 15500"
  },
  {
    "natural-language": "Find roads that are at least 16 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 16000"
  },
  {
    "natural-language": "Find roads that are at least 16.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 16500"
  },
  {
    "natural-language": "Find roads that are at least 17 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 17000"
  },
  {
    "natural-language": "Find roads that are at least 17.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 17500"
  },
  {
    "natural-language": "Find roads that are at least 18 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 18000"
  },
  {
    "natural-language": "Find roads that are at least 18.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 18500"
  },
  {
    "natural-language": "Find roads that are at least 19 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 19000"
  },
  {
    "natural-language": "Find roads that are at least 19.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 19500"
  },
  {
    "natural-language": "Find roads that are at least 20 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 20000"
  },
  {
    "natural-language": "Find roads that are at least 20.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 20500"
  },
  {
    "natural-language": "Find roads that are at least 21 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 21000"
  },
  {
    "natural-language": "Find roads that are at least 22 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 22000"
  },
  {
    "natural-language": "Find roads that are at least 23 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 23000"
  },
  {
    "natural-language": "Find roads that are at least 24 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 24000"
  },
  {
    "natural-language": "Find roads that are at least 25 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 25000"
  },
  {
    "natural-language": "Find roads that are at least 26 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 26000"
  },
  {
    "natural-language": "Find roads that are at least 27 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 27000"
  },
  {
    "natural-language": "Find roads that are at least 28 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 28000"
  },
  {
    "natural-language": "Find roads that are at least 29 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 29000"
  },
  {
    "natural-language": "Find roads that are at least 30 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 30000"
  },
  {
    "natural-language": "Find roads that are at least 40 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 40000"
  },
  {
    "natural-language": "Find roads that are at least 50 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 50000"
  },
  {
    "natural-language": "Find roads that are at least 60 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 60000"
  },
  {
    "natural-language": "Find roads that are at least 70 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 70000"
  },
  {
    "natural-language": "Find roads that are at least 80 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 80000"
  },
  {
    "natural-language": "Find roads that are at least 90 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 90000"
  },
  {
    "natural-language": "Find roads that are at least 100 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 100000"
  },
  {
    "natural-language": "Find roads that are at least 110 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 110000"
  },
  {
    "natural-language": "Find roads that are at least 120 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 120000"
  },
  {
    "natural-language": "Find roads that are at least 130 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 130000"
  },
  {
    "natural-language": "Find roads that are at least 140 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 140000"
  },
  {
    "natural-language": "Find roads that are at least 150 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 150000"
  },
  {
    "natural-language": "Find roads that are at least 200 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 200000"
  },
  {
    "natural-language": "Find roads that are at least 300 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) >= 300000"
  },
  {
    "natural-language": "Find roads that are shorter than half of a kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 500"
  },
  {
    "natural-language": "Find roads that are shorter than one kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 1000"
  },
  {
    "natural-language": "Find roads that are shorter than one and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 1500"
  },
  {
    "natural-language": "Find roads that are shorter than two kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 2000"
  },
  {
    "natural-language": "Find roads that are shorter than two and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 2500"
  },
  {
    "natural-language": "Find roads that are shorter than three kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 3000"
  },
  {
    "natural-language": "Find roads that are shorter than three and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 3500"
  },
  {
    "natural-language": "Find roads that are shorter than four kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 4000"
  },
  {
    "natural-language": "Find roads that are shorter than four and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 4500"
  },
  {
    "natural-language": "Find roads that are shorter than five kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 5000"
  },
  {
    "natural-language": "Find roads that are shorter than five and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 5500"
  },
  {
    "natural-language": "Find roads that are shorter than six kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 6000"
  },
  {
    "natural-language": "Find roads that are shorter than six and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 6500"
  },
  {
    "natural-language": "Find roads that are shorter than seven kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 7000"
  },
  {
    "natural-language": "Find roads that are shorter than seven and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 7500"
  },
  {
    "natural-language": "Find roads that are shorter than eight kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 8000"
  },
  {
    "natural-language": "Find roads that are shorter than eight and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 8500"
  },
  {
    "natural-language": "Find roads that are shorter than nine kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 9000"
  },
  {
    "natural-language": "Find roads that are shorter than nine and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 9500"
  },
  {
    "natural-language": "Find roads that are shorter than ten kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 10000"
  },
  {
    "natural-language": "Find roads that are shorter than ten and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 10500"
  },
  {
    "natural-language": "Find roads that are shorter than eleven kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 11000"
  },
  {
    "natural-language": "Find roads that are shorter than eleven and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 11500"
  },
  {
    "natural-language": "Find roads that are shorter than twelve kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 12000"
  },
  {
    "natural-language": "Find roads that are shorter than twelve and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 12500"
  },
  {
    "natural-language": "Find roads that are shorter than thirteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 13000"
  },
  {
    "natural-language": "Find roads that are shorter than thirteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 13500"
  },
  {
    "natural-language": "Find roads that are shorter than fourteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 14000"
  },
  {
    "natural-language": "Find roads that are shorter than fourteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 14500"
  },
  {
    "natural-language": "Find roads that are shorter than fifteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 15000"
  },
  {
    "natural-language": "Find roads that are shorter than fifteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 15500"
  },
  {
    "natural-language": "Find roads that are shorter than sixteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 16000"
  },
  {
    "natural-language": "Find roads that are shorter than sixteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 16500"
  },
  {
    "natural-language": "Find roads that are shorter than seventeen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 17000"
  },
  {
    "natural-language": "Find roads that are shorter than seventeen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 17500"
  },
  {
    "natural-language": "Find roads that are shorter than eighteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 18000"
  },
  {
    "natural-language": "Find roads that are shorter than eighteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 18500"
  },
  {
    "natural-language": "Find roads that are shorter than nineteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 19000"
  },
  {
    "natural-language": "Find roads that are shorter than nineteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 19500"
  },
  {
    "natural-language": "Find roads that are shorter than twenty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 20000"
  },
  {
    "natural-language": "Find roads that are shorter than twenty and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 20500"
  },
  {
    "natural-language": "Find roads that are shorter than twenty one kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 21000"
  },
  {
    "natural-language": "Find roads that are shorter than twenty two kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 22000"
  },
  {
    "natural-language": "Find roads that are shorter than twenty three kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 23000"
  },
  {
    "natural-language": "Find roads that are shorter than twenty four kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 24000"
  },
  {
    "natural-language": "Find roads that are shorter than twenty five kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 25000"
  },
  {
    "natural-language": "Find roads that are shorter than twenty six kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 26000"
  },
  {
    "natural-language": "Find roads that are shorter than twenty seven kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 27000"
  },
  {
    "natural-language": "Find roads that are shorter than twenty eight kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 28000"
  },
  {
    "natural-language": "Find roads that are shorter than twenty nine kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 29000"
  },
  {
    "natural-language": "Find roads that are shorter than thirty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 30000"
  },
  {
    "natural-language": "Find roads that are shorter than forty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 40000"
  },
  {
    "natural-language": "Find roads that are shorter than fifty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 50000"
  },
  {
    "natural-language": "Find roads that are shorter than sixty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 60000"
  },
  {
    "natural-language": "Find roads that are shorter than seventy kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 70000"
  },
  {
    "natural-language": "Find roads that are shorter than eighty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 80000"
  },
  {
    "natural-language": "Find roads that are shorter than ninety kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 90000"
  },
  {
    "natural-language": "Find roads that are shorter than one hundred kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 100000"
  },
  {
    "natural-language": "Find roads that are shorter than one hundred ten kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 110000"
  },
  {
    "natural-language": "Find roads that are shorter than one hundred twenty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 120000"
  },
  {
    "natural-language": "Find roads that are shorter than one hundred thirty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 130000"
  },
  {
    "natural-language": "Find roads that are shorter than one hundred forty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 140000"
  },
  {
    "natural-language": "Find roads that are shorter than one hundred fifty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 150000"
  },
  {
    "natural-language": "Find roads that are shorter than two hundred kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 200000"
  },
  {
    "natural-language": "Find roads that are shorter than three hundred kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 300000"
  },
  {
    "natural-language": "Find roads that are shorter than .5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 500"
  },
  {
    "natural-language": "Find roads that are shorter than 1 kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 1000"
  },
  {
    "natural-language": "Find roads that are shorter than 1.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 1500"
  },
  {
    "natural-language": "Find roads that are shorter than 2 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 2000"
  },
  {
    "natural-language": "Find roads that are shorter than 2.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 2500"
  },
  {
    "natural-language": "Find roads that are shorter than 3 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 3000"
  },
  {
    "natural-language": "Find roads that are shorter than 3.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 3500"
  },
  {
    "natural-language": "Find roads that are shorter than 4 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 4000"
  },
  {
    "natural-language": "Find roads that are shorter than 4.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 4500"
  },
  {
    "natural-language": "Find roads that are shorter than 5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 5000"
  },
  {
    "natural-language": "Find roads that are shorter than 5.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 5500"
  },
  {
    "natural-language": "Find roads that are shorter than 6 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 6000"
  },
  {
    "natural-language": "Find roads that are shorter than 6.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 6500"
  },
  {
    "natural-language": "Find roads that are shorter than 7 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 7000"
  },
  {
    "natural-language": "Find roads that are shorter than 7.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 7500"
  },
  {
    "natural-language": "Find roads that are shorter than 8 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 8000"
  },
  {
    "natural-language": "Find roads that are shorter than 8.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 8500"
  },
  {
    "natural-language": "Find roads that are shorter than 9 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 9000"
  },
  {
    "natural-language": "Find roads that are shorter than 9.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 9500"
  },
  {
    "natural-language": "Find roads that are shorter than 10 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 10000"
  },
  {
    "natural-language": "Find roads that are shorter than 10.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 10500"
  },
  {
    "natural-language": "Find roads that are shorter than 11 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 11000"
  },
  {
    "natural-language": "Find roads that are shorter than 11.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 11500"
  },
  {
    "natural-language": "Find roads that are shorter than 12 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 12000"
  },
  {
    "natural-language": "Find roads that are shorter than 12.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 12500"
  },
  {
    "natural-language": "Find roads that are shorter than 13 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 13000"
  },
  {
    "natural-language": "Find roads that are shorter than 13.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 13500"
  },
  {
    "natural-language": "Find roads that are shorter than 14 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 14000"
  },
  {
    "natural-language": "Find roads that are shorter than 14.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 14500"
  },
  {
    "natural-language": "Find roads that are shorter than 15 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 15000"
  },
  {
    "natural-language": "Find roads that are shorter than 15.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 15500"
  },
  {
    "natural-language": "Find roads that are shorter than 16 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 16000"
  },
  {
    "natural-language": "Find roads that are shorter than 16.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 16500"
  },
  {
    "natural-language": "Find roads that are shorter than 17 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 17000"
  },
  {
    "natural-language": "Find roads that are shorter than 17.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 17500"
  },
  {
    "natural-language": "Find roads that are shorter than 18 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 18000"
  },
  {
    "natural-language": "Find roads that are shorter than 18.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 18500"
  },
  {
    "natural-language": "Find roads that are shorter than 19 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 19000"
  },
  {
    "natural-language": "Find roads that are shorter than 19.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 19500"
  },
  {
    "natural-language": "Find roads that are shorter than 20 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 20000"
  },
  {
    "natural-language": "Find roads that are shorter than 20.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 20500"
  },
  {
    "natural-language": "Find roads that are shorter than 21 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 21000"
  },
  {
    "natural-language": "Find roads that are shorter than 22 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 22000"
  },
  {
    "natural-language": "Find roads that are shorter than 23 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 23000"
  },
  {
    "natural-language": "Find roads that are shorter than 24 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 24000"
  },
  {
    "natural-language": "Find roads that are shorter than 25 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 25000"
  },
  {
    "natural-language": "Find roads that are shorter than 26 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 26000"
  },
  {
    "natural-language": "Find roads that are shorter than 27 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 27000"
  },
  {
    "natural-language": "Find roads that are shorter than 28 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 28000"
  },
  {
    "natural-language": "Find roads that are shorter than 29 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 29000"
  },
  {
    "natural-language": "Find roads that are shorter than 30 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 30000"
  },
  {
    "natural-language": "Find roads that are shorter than 40 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 40000"
  },
  {
    "natural-language": "Find roads that are shorter than 50 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 50000"
  },
  {
    "natural-language": "Find roads that are shorter than 60 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 60000"
  },
  {
    "natural-language": "Find roads that are shorter than 70 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 70000"
  },
  {
    "natural-language": "Find roads that are shorter than 80 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 80000"
  },
  {
    "natural-language": "Find roads that are shorter than 90 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 90000"
  },
  {
    "natural-language": "Find roads that are shorter than 100 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 100000"
  },
  {
    "natural-language": "Find roads that are shorter than 110 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 110000"
  },
  {
    "natural-language": "Find roads that are shorter than 120 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 120000"
  },
  {
    "natural-language": "Find roads that are shorter than 130 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 130000"
  },
  {
    "natural-language": "Find roads that are shorter than 140 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 140000"
  },
  {
    "natural-language": "Find roads that are shorter than 150 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 150000"
  },
  {
    "natural-language": "Find roads that are shorter than 200 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 200000"
  },
  {
    "natural-language": "Find roads that are shorter than 300 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) < 300000"
  },
  {
    "natural-language": "Find roads that are at most half of a kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 500"
  },
  {
    "natural-language": "Find roads that are at most one kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 1000"
  },
  {
    "natural-language": "Find roads that are at most one and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 1500"
  },
  {
    "natural-language": "Find roads that are at most two kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 2000"
  },
  {
    "natural-language": "Find roads that are at most two and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 2500"
  },
  {
    "natural-language": "Find roads that are at most three kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 3000"
  },
  {
    "natural-language": "Find roads that are at most three and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 3500"
  },
  {
    "natural-language": "Find roads that are at most four kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 4000"
  },
  {
    "natural-language": "Find roads that are at most four and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 4500"
  },
  {
    "natural-language": "Find roads that are at most five kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 5000"
  },
  {
    "natural-language": "Find roads that are at most five and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 5500"
  },
  {
    "natural-language": "Find roads that are at most six kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 6000"
  },
  {
    "natural-language": "Find roads that are at most six and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 6500"
  },
  {
    "natural-language": "Find roads that are at most seven kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 7000"
  },
  {
    "natural-language": "Find roads that are at most seven and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 7500"
  },
  {
    "natural-language": "Find roads that are at most eight kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 8000"
  },
  {
    "natural-language": "Find roads that are at most eight and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 8500"
  },
  {
    "natural-language": "Find roads that are at most nine kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 9000"
  },
  {
    "natural-language": "Find roads that are at most nine and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 9500"
  },
  {
    "natural-language": "Find roads that are at most ten kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 10000"
  },
  {
    "natural-language": "Find roads that are at most ten and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 10500"
  },
  {
    "natural-language": "Find roads that are at most eleven kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 11000"
  },
  {
    "natural-language": "Find roads that are at most eleven and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 11500"
  },
  {
    "natural-language": "Find roads that are at most twelve kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 12000"
  },
  {
    "natural-language": "Find roads that are at most twelve and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 12500"
  },
  {
    "natural-language": "Find roads that are at most thirteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 13000"
  },
  {
    "natural-language": "Find roads that are at most thirteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 13500"
  },
  {
    "natural-language": "Find roads that are at most fourteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 14000"
  },
  {
    "natural-language": "Find roads that are at most fourteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 14500"
  },
  {
    "natural-language": "Find roads that are at most fifteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 15000"
  },
  {
    "natural-language": "Find roads that are at most fifteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 15500"
  },
  {
    "natural-language": "Find roads that are at most sixteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 16000"
  },
  {
    "natural-language": "Find roads that are at most sixteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 16500"
  },
  {
    "natural-language": "Find roads that are at most seventeen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 17000"
  },
  {
    "natural-language": "Find roads that are at most seventeen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 17500"
  },
  {
    "natural-language": "Find roads that are at most eighteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 18000"
  },
  {
    "natural-language": "Find roads that are at most eighteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 18500"
  },
  {
    "natural-language": "Find roads that are at most nineteen kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 19000"
  },
  {
    "natural-language": "Find roads that are at most nineteen and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 19500"
  },
  {
    "natural-language": "Find roads that are at most twenty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 20000"
  },
  {
    "natural-language": "Find roads that are at most twenty and a half kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 20500"
  },
  {
    "natural-language": "Find roads that are at most twenty one kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 21000"
  },
  {
    "natural-language": "Find roads that are at most twenty two kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 22000"
  },
  {
    "natural-language": "Find roads that are at most twenty three kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 23000"
  },
  {
    "natural-language": "Find roads that are at most twenty four kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 24000"
  },
  {
    "natural-language": "Find roads that are at most twenty five kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 25000"
  },
  {
    "natural-language": "Find roads that are at most twenty six kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 26000"
  },
  {
    "natural-language": "Find roads that are at most twenty seven kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 27000"
  },
  {
    "natural-language": "Find roads that are at most twenty eight kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 28000"
  },
  {
    "natural-language": "Find roads that are at most twenty nine kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 29000"
  },
  {
    "natural-language": "Find roads that are at most thirty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 30000"
  },
  {
    "natural-language": "Find roads that are at most forty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 40000"
  },
  {
    "natural-language": "Find roads that are at most fifty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 50000"
  },
  {
    "natural-language": "Find roads that are at most sixty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 60000"
  },
  {
    "natural-language": "Find roads that are at most seventy kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 70000"
  },
  {
    "natural-language": "Find roads that are at most eighty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 80000"
  },
  {
    "natural-language": "Find roads that are at most ninety kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 90000"
  },
  {
    "natural-language": "Find roads that are at most one hundred kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 100000"
  },
  {
    "natural-language": "Find roads that are at most one hundred ten kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 110000"
  },
  {
    "natural-language": "Find roads that are at most one hundred twenty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 120000"
  },
  {
    "natural-language": "Find roads that are at most one hundred thirty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 130000"
  },
  {
    "natural-language": "Find roads that are at most one hundred forty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 140000"
  },
  {
    "natural-language": "Find roads that are at most one hundred fifty kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 150000"
  },
  {
    "natural-language": "Find roads that are at most two hundred kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 200000"
  },
  {
    "natural-language": "Find roads that are at most three hundred kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 300000"
  },
  {
    "natural-language": "Find roads that are at most .5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 500"
  },
  {
    "natural-language": "Find roads that are at most 1 kilometer",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 1000"
  },
  {
    "natural-language": "Find roads that are at most 1.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 1500"
  },
  {
    "natural-language": "Find roads that are at most 2 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 2000"
  },
  {
    "natural-language": "Find roads that are at most 2.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 2500"
  },
  {
    "natural-language": "Find roads that are at most 3 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 3000"
  },
  {
    "natural-language": "Find roads that are at most 3.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 3500"
  },
  {
    "natural-language": "Find roads that are at most 4 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 4000"
  },
  {
    "natural-language": "Find roads that are at most 4.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 4500"
  },
  {
    "natural-language": "Find roads that are at most 5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 5000"
  },
  {
    "natural-language": "Find roads that are at most 5.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 5500"
  },
  {
    "natural-language": "Find roads that are at most 6 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 6000"
  },
  {
    "natural-language": "Find roads that are at most 6.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 6500"
  },
  {
    "natural-language": "Find roads that are at most 7 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 7000"
  },
  {
    "natural-language": "Find roads that are at most 7.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 7500"
  },
  {
    "natural-language": "Find roads that are at most 8 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 8000"
  },
  {
    "natural-language": "Find roads that are at most 8.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 8500"
  },
  {
    "natural-language": "Find roads that are at most 9 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 9000"
  },
  {
    "natural-language": "Find roads that are at most 9.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 9500"
  },
  {
    "natural-language": "Find roads that are at most 10 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 10000"
  },
  {
    "natural-language": "Find roads that are at most 10.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 10500"
  },
  {
    "natural-language": "Find roads that are at most 11 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 11000"
  },
  {
    "natural-language": "Find roads that are at most 11.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 11500"
  },
  {
    "natural-language": "Find roads that are at most 12 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 12000"
  },
  {
    "natural-language": "Find roads that are at most 12.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 12500"
  },
  {
    "natural-language": "Find roads that are at most 13 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 13000"
  },
  {
    "natural-language": "Find roads that are at most 13.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 13500"
  },
  {
    "natural-language": "Find roads that are at most 14 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 14000"
  },
  {
    "natural-language": "Find roads that are at most 14.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 14500"
  },
  {
    "natural-language": "Find roads that are at most 15 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 15000"
  },
  {
    "natural-language": "Find roads that are at most 15.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 15500"
  },
  {
    "natural-language": "Find roads that are at most 16 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 16000"
  },
  {
    "natural-language": "Find roads that are at most 16.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 16500"
  },
  {
    "natural-language": "Find roads that are at most 17 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 17000"
  },
  {
    "natural-language": "Find roads that are at most 17.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 17500"
  },
  {
    "natural-language": "Find roads that are at most 18 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 18000"
  },
  {
    "natural-language": "Find roads that are at most 18.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 18500"
  },
  {
    "natural-language": "Find roads that are at most 19 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 19000"
  },
  {
    "natural-language": "Find roads that are at most 19.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 19500"
  },
  {
    "natural-language": "Find roads that are at most 20 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 20000"
  },
  {
    "natural-language": "Find roads that are at most 20.5 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 20500"
  },
  {
    "natural-language": "Find roads that are at most 21 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 21000"
  },
  {
    "natural-language": "Find roads that are at most 22 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 22000"
  },
  {
    "natural-language": "Find roads that are at most 23 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 23000"
  },
  {
    "natural-language": "Find roads that are at most 24 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 24000"
  },
  {
    "natural-language": "Find roads that are at most 25 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 25000"
  },
  {
    "natural-language": "Find roads that are at most 26 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 26000"
  },
  {
    "natural-language": "Find roads that are at most 27 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 27000"
  },
  {
    "natural-language": "Find roads that are at most 28 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 28000"
  },
  {
    "natural-language": "Find roads that are at most 29 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 29000"
  },
  {
    "natural-language": "Find roads that are at most 30 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 30000"
  },
  {
    "natural-language": "Find roads that are at most 40 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 40000"
  },
  {
    "natural-language": "Find roads that are at most 50 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 50000"
  },
  {
    "natural-language": "Find roads that are at most 60 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 60000"
  },
  {
    "natural-language": "Find roads that are at most 70 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 70000"
  },
  {
    "natural-language": "Find roads that are at most 80 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 80000"
  },
  {
    "natural-language": "Find roads that are at most 90 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 90000"
  },
  {
    "natural-language": "Find roads that are at most 100 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 100000"
  },
  {
    "natural-language": "Find roads that are at most 110 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 110000"
  },
  {
    "natural-language": "Find roads that are at most 120 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 120000"
  },
  {
    "natural-language": "Find roads that are at most 130 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 130000"
  },
  {
    "natural-language": "Find roads that are at most 140 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 140000"
  },
  {
    "natural-language": "Find roads that are at most 150 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 150000"
  },
  {
    "natural-language": "Find roads that are at most 200 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 200000"
  },
  {
    "natural-language": "Find roads that are at most 300 kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Length(ST_Transform(route, 3857)) <= 300000"
  },

  # Roads that are km long and city with population
  {
    "natural-language": "Find roads that span at least one kilometer through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1000"
  },
  {
    "natural-language": "Find roads that span at least one and a half kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1500"
  },
  {
    "natural-language": "Find roads that span at least two kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 2000"
  },
  {
    "natural-language": "Find roads that span at least three kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 3000"
  },
  {
    "natural-language": "Find roads that span at least four kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 4000"
  },
  {
    "natural-language": "Find roads that span at least five kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 5000"
  },
  {
    "natural-language": "Find roads that span at least six kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 6000"
  },
  {
    "natural-language": "Find roads that span at least seven kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 7000"
  },
  {
    "natural-language": "Find roads that span at least eight kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 8000"
  },
  {
    "natural-language": "Find roads that span at least nine kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 9000"
  },
  {
    "natural-language": "Find roads that span at least ten kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 10000"
  },
  {
    "natural-language": "Find roads that span at least one kilometer through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1000"
  },
  {
    "natural-language": "Find roads that span at least one and a half kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1500"
  },
  {
    "natural-language": "Find roads that span at least two kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 2000"
  },
  {
    "natural-language": "Find roads that span at least three kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 3000"
  },
  {
    "natural-language": "Find roads that span at least four kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 4000"
  },
  {
    "natural-language": "Find roads that span at least five kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 5000"
  },
  {
    "natural-language": "Find roads that span at least six kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 6000"
  },
  {
    "natural-language": "Find roads that span at least seven kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 7000"
  },
  {
    "natural-language": "Find roads that span at least eight kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 8000"
  },
  {
    "natural-language": "Find roads that span at least nine kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 9000"
  },
  {
    "natural-language": "Find roads that span at least ten kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 10000"
  },
  {
    "natural-language": "Find roads that span at least one kilometer through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1000"
  },
  {
    "natural-language": "Find roads that span at least one and a half kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1500"
  },
  {
    "natural-language": "Find roads that span at least two kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 2000"
  },
  {
    "natural-language": "Find roads that span at least three kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 3000"
  },
  {
    "natural-language": "Find roads that span at least four kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 4000"
  },
  {
    "natural-language": "Find roads that span at least five kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 5000"
  },
  {
    "natural-language": "Find roads that span at least six kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 6000"
  },
  {
    "natural-language": "Find roads that span at least seven kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 7000"
  },
  {
    "natural-language": "Find roads that span at least eight kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 8000"
  },
  {
    "natural-language": "Find roads that span at least nine kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 9000"
  },
  {
    "natural-language": "Find roads that span at least ten kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 10000"
  },
  {
    "natural-language": "Find roads that span at least one kilometer through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1000"
  },
  {
    "natural-language": "Find roads that span at least one and a half kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1500"
  },
  {
    "natural-language": "Find roads that span at least two kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 2000"
  },
  {
    "natural-language": "Find roads that span at least three kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 3000"
  },
  {
    "natural-language": "Find roads that span at least four kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 4000"
  },
  {
    "natural-language": "Find roads that span at least five kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 5000"
  },
  {
    "natural-language": "Find roads that span at least six kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 6000"
  },
  {
    "natural-language": "Find roads that span at least seven kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 7000"
  },
  {
    "natural-language": "Find roads that span at least eight kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 8000"
  },
  {
    "natural-language": "Find roads that span at least nine kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 9000"
  },
  {
    "natural-language": "Find roads that span at least ten kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 10000"
  },
  {
    "natural-language": "Find roads that span at least 1 kilometer through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1000"
  },
  {
    "natural-language": "Find roads that span at least 1.5 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1500"
  },
  {
    "natural-language": "Find roads that span at least 2 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 2000"
  },
  {
    "natural-language": "Find roads that span at least 3 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 3000"
  },
  {
    "natural-language": "Find roads that span at least 4 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 4000"
  },
  {
    "natural-language": "Find roads that span at least 5 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 5000"
  },
  {
    "natural-language": "Find roads that span at least 6 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 6000"
  },
  {
    "natural-language": "Find roads that span at least 7 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 7000"
  },
  {
    "natural-language": "Find roads that span at least 8 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 8000"
  },
  {
    "natural-language": "Find roads that span at least 9 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 9000"
  },
  {
    "natural-language": "Find roads that span at least 10 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 10000"
  },
  {
    "natural-language": "Find roads that span at least 1 kilometer through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1000"
  },
  {
    "natural-language": "Find roads that span at least 1.5 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1500"
  },
  {
    "natural-language": "Find roads that span at least 2 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 2000"
  },
  {
    "natural-language": "Find roads that span at least 3 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 3000"
  },
  {
    "natural-language": "Find roads that span at least 4 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 4000"
  },
  {
    "natural-language": "Find roads that span at least 5 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 5000"
  },
  {
    "natural-language": "Find roads that span at least 6 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 6000"
  },
  {
    "natural-language": "Find roads that span at least 7 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 7000"
  },
  {
    "natural-language": "Find roads that span at least 8 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 8000"
  },
  {
    "natural-language": "Find roads that span at least 9 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 9000"
  },
  {
    "natural-language": "Find roads that span at least 10 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 10000"
  },
  {
    "natural-language": "Find roads that span at least 1 kilometer through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1000"
  },
  {
    "natural-language": "Find roads that span at least 1.5 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1500"
  },
  {
    "natural-language": "Find roads that span at least 2 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 2000"
  },
  {
    "natural-language": "Find roads that span at least 3 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 3000"
  },
  {
    "natural-language": "Find roads that span at least 4 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 4000"
  },
  {
    "natural-language": "Find roads that span at least 5 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 5000"
  },
  {
    "natural-language": "Find roads that span at least 6 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 6000"
  },
  {
    "natural-language": "Find roads that span at least 7 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 7000"
  },
  {
    "natural-language": "Find roads that span at least 8 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 8000"
  },
  {
    "natural-language": "Find roads that span at least 9 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 9000"
  },
  {
    "natural-language": "Find roads that span at least 10 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 10000"
  },
  {
    "natural-language": "Find roads that span at least 1 kilometer through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1000"
  },
  {
    "natural-language": "Find roads that span at least 1.5 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 1500"
  },
  {
    "natural-language": "Find roads that span at least 2 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 2000"
  },
  {
    "natural-language": "Find roads that span at least 3 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 3000"
  },
  {
    "natural-language": "Find roads that span at least 4 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 4000"
  },
  {
    "natural-language": "Find roads that span at least 5 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 5000"
  },
  {
    "natural-language": "Find roads that span at least 6 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 6000"
  },
  {
    "natural-language": "Find roads that span at least 7 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 7000"
  },
  {
    "natural-language": "Find roads that span at least 8 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 8000"
  },
  {
    "natural-language": "Find roads that span at least 9 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 9000"
  },
  {
    "natural-language": "Find roads that span at least 10 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) >= 10000"
  },
  {
    "natural-language": "Find roads that span at most one kilometer through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1000"
  },
  {
    "natural-language": "Find roads that span at most one and a half kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1500"
  },
  {
    "natural-language": "Find roads that span at most two kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 2000"
  },
  {
    "natural-language": "Find roads that span at most three kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 3000"
  },
  {
    "natural-language": "Find roads that span at most four kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 4000"
  },
  {
    "natural-language": "Find roads that span at most five kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 5000"
  },
  {
    "natural-language": "Find roads that span at most six kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 6000"
  },
  {
    "natural-language": "Find roads that span at most seven kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 7000"
  },
  {
    "natural-language": "Find roads that span at most eight kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 8000"
  },
  {
    "natural-language": "Find roads that span at most nine kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 9000"
  },
  {
    "natural-language": "Find roads that span at most ten kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 10000"
  },
  {
    "natural-language": "Find roads that span at most one kilometer through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1000"
  },
  {
    "natural-language": "Find roads that span at most one and a half kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1500"
  },
  {
    "natural-language": "Find roads that span at most two kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 2000"
  },
  {
    "natural-language": "Find roads that span at most three kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 3000"
  },
  {
    "natural-language": "Find roads that span at most four kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 4000"
  },
  {
    "natural-language": "Find roads that span at most five kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 5000"
  },
  {
    "natural-language": "Find roads that span at most six kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 6000"
  },
  {
    "natural-language": "Find roads that span at most seven kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 7000"
  },
  {
    "natural-language": "Find roads that span at most eight kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 8000"
  },
  {
    "natural-language": "Find roads that span at most nine kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 9000"
  },
  {
    "natural-language": "Find roads that span at most ten kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 10000"
  },
  {
    "natural-language": "Find roads that span at most one kilometer through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1000"
  },
  {
    "natural-language": "Find roads that span at most one and a half kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1500"
  },
  {
    "natural-language": "Find roads that span at most two kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 2000"
  },
  {
    "natural-language": "Find roads that span at most three kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 3000"
  },
  {
    "natural-language": "Find roads that span at most four kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 4000"
  },
  {
    "natural-language": "Find roads that span at most five kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 5000"
  },
  {
    "natural-language": "Find roads that span at most six kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 6000"
  },
  {
    "natural-language": "Find roads that span at most seven kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 7000"
  },
  {
    "natural-language": "Find roads that span at most eight kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 8000"
  },
  {
    "natural-language": "Find roads that span at most nine kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 9000"
  },
  {
    "natural-language": "Find roads that span at most ten kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 10000"
  },
  {
    "natural-language": "Find roads that span at most one kilometer through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1000"
  },
  {
    "natural-language": "Find roads that span at most one and a half kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1500"
  },
  {
    "natural-language": "Find roads that span at most two kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 2000"
  },
  {
    "natural-language": "Find roads that span at most three kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 3000"
  },
  {
    "natural-language": "Find roads that span at most four kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 4000"
  },
  {
    "natural-language": "Find roads that span at most five kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 5000"
  },
  {
    "natural-language": "Find roads that span at most six kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 6000"
  },
  {
    "natural-language": "Find roads that span at most seven kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 7000"
  },
  {
    "natural-language": "Find roads that span at most eight kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 8000"
  },
  {
    "natural-language": "Find roads that span at most nine kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 9000"
  },
  {
    "natural-language": "Find roads that span at most ten kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 10000"
  },
  {
    "natural-language": "Find roads that span at most 1 kilometer through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1000"
  },
  {
    "natural-language": "Find roads that span at most 1.5 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1500"
  },
  {
    "natural-language": "Find roads that span at most 2 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 2000"
  },
  {
    "natural-language": "Find roads that span at most 3 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 3000"
  },
  {
    "natural-language": "Find roads that span at most 4 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 4000"
  },
  {
    "natural-language": "Find roads that span at most 5 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 5000"
  },
  {
    "natural-language": "Find roads that span at most 6 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 6000"
  },
  {
    "natural-language": "Find roads that span at most 7 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 7000"
  },
  {
    "natural-language": "Find roads that span at most 8 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 8000"
  },
  {
    "natural-language": "Find roads that span at most 9 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 9000"
  },
  {
    "natural-language": "Find roads that span at most 10 kilometers through a city with a population less than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 10000"
  },
  {
    "natural-language": "Find roads that span at most 1 kilometer through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1000"
  },
  {
    "natural-language": "Find roads that span at most 1.5 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1500"
  },
  {
    "natural-language": "Find roads that span at most 2 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 2000"
  },
  {
    "natural-language": "Find roads that span at most 3 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 3000"
  },
  {
    "natural-language": "Find roads that span at most 4 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 4000"
  },
  {
    "natural-language": "Find roads that span at most 5 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 5000"
  },
  {
    "natural-language": "Find roads that span at most 6 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 6000"
  },
  {
    "natural-language": "Find roads that span at most 7 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 7000"
  },
  {
    "natural-language": "Find roads that span at most 8 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 8000"
  },
  {
    "natural-language": "Find roads that span at most 9 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 9000"
  },
  {
    "natural-language": "Find roads that span at most 10 kilometers through a city with a population of at most one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population <= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 10000"
  },
  {
    "natural-language": "Find roads that span at most 1 kilometer through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1000"
  },
  {
    "natural-language": "Find roads that span at most 1.5 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1500"
  },
  {
    "natural-language": "Find roads that span at most 2 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 2000"
  },
  {
    "natural-language": "Find roads that span at most 3 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 3000"
  },
  {
    "natural-language": "Find roads that span at most 4 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 4000"
  },
  {
    "natural-language": "Find roads that span at most 5 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 5000"
  },
  {
    "natural-language": "Find roads that span at most 6 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 6000"
  },
  {
    "natural-language": "Find roads that span at most 7 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 7000"
  },
  {
    "natural-language": "Find roads that span at most 8 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 8000"
  },
  {
    "natural-language": "Find roads that span at most 9 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 9000"
  },
  {
    "natural-language": "Find roads that span at most 10 kilometers through a city with a population greater than one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 10000"
  },
  {
    "natural-language": "Find roads that span at most 1 kilometer through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1000"
  },
  {
    "natural-language": "Find roads that span at most 1.5 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 1500"
  },
  {
    "natural-language": "Find roads that span at most 2 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 2000"
  },
  {
    "natural-language": "Find roads that span at most 3 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 3000"
  },
  {
    "natural-language": "Find roads that span at most 4 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 4000"
  },
  {
    "natural-language": "Find roads that span at most 5 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 5000"
  },
  {
    "natural-language": "Find roads that span at most 6 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 6000"
  },
  {
    "natural-language": "Find roads that span at most 7 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 7000"
  },
  {
    "natural-language": "Find roads that span at most 8 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 8000"
  },
  {
    "natural-language": "Find roads that span at most 9 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 9000"
  },
  {
    "natural-language": "Find roads that span at most 10 kilometers through a city with a population of at least one hundred thousand people",
    "sql": "SELECT r.id, r.name, ST_Length(ST_Intersection(r.route, c.boundary)::geography) AS intersect_length_km FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000 AND ST_Length(ST_Intersection(r.route, c.boundary)::geography) <= 10000"
  },

  # Roads within a distance of a park TODO: Add queries
  {
    "natural-language": "Find roads within one kilometer of a park",
    "sql": "SELECT r.name, ST_AsGeoJSON(r.route) AS route FROM roads r JOIN parks p ON ST_DWithin(ST_Transform(r.route, 4326), ST_Transform(p.boundary, 4326), 1000)"
  },
  # Start
  # End
  

  # Roads by distance and city TODO: Add queries
  {
    "natural-language": "Find the longest road",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads ORDER BY ST_Length(route) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the shortest road",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads ORDER BY ST_Length(route) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the shortest road within Ventura",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Ventura'), 4326)) ORDER BY ST_Length(route) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the shortest road in Ojai",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Ojai'), 4326)) ORDER BY ST_Length(route) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the longest road within Oxnard",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Oxnard'), 4326)) ORDER BY ST_Length(route) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the longest road in Camarillo",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Camarillo')) ORDER BY ST_Length(route) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the longest road within the busiest city",
    "sql": "SELECT r.name, ST_AsGeoJSON(r.route) AS route FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population = (SELECT MAX(population) FROM cities) ORDER BY ST_Length(r.route) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the longest road in the quietest city",
    "sql": "SELECT r.name, ST_AsGeoJSON(r.route) AS route FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population = (SELECT MIN(population) FROM cities) ORDER BY ST_Length(r.route) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the shortest road in the busiest city",
    "sql": "SELECT r.name, ST_AsGeoJSON(r.route) AS route FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population = (SELECT MAX(population) FROM cities) ORDER BY ST_Length(r.route) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the shortest road within the quietest city",
    "sql": "SELECT r.name, ST_AsGeoJSON(r.route) AS route FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population = (SELECT MIN(population) FROM cities) ORDER BY ST_Length(r.route) ASC LIMIT 1"
  },
  {
    "natural-language": "Find all roads within ten kilometers of Camarillo",
    "sql": "SELECT r.name, ST_Length(r.route) AS road_length FROM roads r JOIN cities c ON ST_DWithin(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326), 10000) WHERE c.name = 'Camarillo'"
  },
  {
    "natural-language": "Find all roads within five kilometers of Ventura",
    "sql": "SELECT r.name, ST_Length(r.route) AS road_length FROM roads r JOIN cities c ON ST_DWithin(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326), 5000) WHERE c.name = 'Ventura'"
  },
  {
    "natural-language": "Find roads within ten kilometers of Oxnard",
    "sql": "SELECT r.name, ST_Length(r.route) AS road_length FROM roads r JOIN cities c ON ST_DWithin(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326), 10000) WHERE c.name = 'Oxnard'"
  },
  {
    "natural-language": "Find roads within eight kilometers of Ojai",
    "sql": "SELECT r.name, ST_Length(r.route) AS road_length FROM roads r JOIN cities c ON ST_DWithin(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326), 8000) WHERE c.name = 'Ojai'"
  },
  {
    "natural-language": "Find roads within 10 km of Camarillo",
    "sql": "SELECT r.name, ST_Length(r.route) AS road_length FROM roads r JOIN cities c ON ST_DWithin(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326), 10000) WHERE c.name = 'Camarillo'"
  },
  {
    "natural-language": "Find roads within 5 km of Ventura",
    "sql": "SELECT r.name, ST_Length(r.route) AS road_length FROM roads r JOIN cities c ON ST_DWithin(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326), 5000) WHERE c.name = 'Ventura'"
  },
  {
    "natural-language": "Find all roads within 12 km of Oxnard",
    "sql": "SELECT r.name, ST_Length(r.route) AS road_length FROM roads r JOIN cities c ON ST_DWithin(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326), 12000) WHERE c.name = 'Oxnard'"
  },
  {
    "natural-language": "Find all roads within 3 km of Ojai",
    "sql": "SELECT r.name, ST_Length(r.route) AS road_length FROM roads r JOIN cities c ON ST_DWithin(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326), 3000) WHERE c.name = 'Ojai'"
  },

  # Find roads in city TODO: Add queries
  {
    "natural-language": "Find roads in Ojai",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Ojai'), 4326))"
  },
  {
    "natural-language": "Find all roads in Camarillo",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Camarillo'), 4326))"
  },
  {
    "natural-language": "Find roads in Oxnard",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Oxnard'), 4326))"
  },
  {
    "natural-language": "Find roads in Ventura",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE ST_Intersects(ST_Transform(route, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Ventura'), 4326))"
  },
  # Find roads by buildings TODO: Add queries
  {
    "natural-language": "Find all roads that have multiple buildings that are owned by the same group",
    "sql": "SELECT r.name, ST_AsGeoJSON(r.route) AS route FROM roads r JOIN buildings b ON ST_Intersects(ST_Transform(b.location, 4326), ST_Transform(r.route, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = TRUE GROUP BY r.id HAVING COUNT(DISTINCT b.id) > 1"
  },
  {
    "natural-language": "Find all roads that have buildings that are not owned by groups",
    "sql": "SELECT r.name, ST_AsGeoJSON(r.route) AS route FROM roads r JOIN buildings b ON ST_Intersects(ST_Transform(b.location, 4326), ST_Transform(r.route, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE"
  },
  {
    "natural-language": "Find the road with the most buildings",
    "sql": "SELECT r.name, ST_AsGeoJSON(r.route) AS route FROM roads r JOIN buildings b ON ST_Intersects(ST_Transform(b.location, 4326), ST_Transform(r.route, 4326)) GROUP BY r.id ORDER BY COUNT(b.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the road with the least buildings",
    "sql": "SELECT r.name, ST_AsGeoJSON(r.route) AS route FROM roads r JOIN buildings b ON ST_Intersects(ST_Transform(b.location, 4326), ST_Transform(r.route, 4326)) GROUP BY r.id ORDER BY COUNT(b.id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the road with the most individual owners",
    "sql": "SELECT r.name, ST_AsGeoJSON(r.route) AS route FROM roads r JOIN buildings b ON ST_Intersects(ST_Transform(b.location, 4326), ST_Transform(r.route, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY r.id ORDER BY COUNT(DISTINCT b.owning_entity_id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the road with the least individual owners",
    "sql": "SELECT r.name, ST_AsGeoJSON(r.route) AS route FROM roads r JOIN buildings b ON ST_Intersects(ST_Transform(b.location, 4326), ST_Transform(r.route, 4326)) JOIN owning_entities o ON b.owning_entity_id = o.id WHERE o.is_group = FALSE GROUP BY r.id ORDER BY COUNT(DISTINCT b.owning_entity_id) ASC LIMIT 1"
  },
  {
    "natural-language": "Find roads with no buildings",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads WHERE NOT EXISTS (SELECT 1 FROM buildings b WHERE ST_Intersects(ST_Transform(b.location, 4326), ST_Transform(roads.route, 4326)))"
  },

  # Easternmost, westernmost, etc.
  {
    "natural-language": "Find the easternmost road",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads ORDER BY ST_X(ST_Transform(ST_StartPoint(route), 4326)) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the westernmost road",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads ORDER BY ST_X(ST_Transform(ST_StartPoint(route), 4326)) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the southernmost road",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads ORDER BY ST_Y(ST_Transform(ST_StartPoint(route), 4326)) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the norhternmost road",
    "sql": "SELECT name, ST_AsGeoJSON(route) AS route FROM roads ORDER BY ST_Y(ST_Transform(ST_StartPoint(route), 4326)) DESC LIMIT 1"
  },

  # Parks
  {
    "natural-language": "Find parks with an area less than ten square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks WHERE ST_Area(ST_Transform(boundary, 3857)) < 10000000"
  },
  {
    "natural-language": "Find parks with an area of at least ten square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks WHERE ST_Area(ST_Transform(boundary, 3857)) >= 10000000"
  },
  {
    "natural-language": "Find parks with an area greater than ten square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks WHERE ST_Area(ST_Transform(boundary, 3857)) > 10000000"
  },
  {
    "natural-language": "Find parks with an area less than nine square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks WHERE ST_Area(ST_Transform(boundary, 3857)) < 9000000"
  },
  {
    "natural-language": "Find parks with an area of at least nine square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks WHERE ST_Area(ST_Transform(boundary, 3857)) >= 9000000"
  },
  {
    "natural-language": "Find parks with an area greater than nine square kilometers",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks WHERE ST_Area(ST_Transform(boundary, 3857)) > 9000000"
  },
  {
    "natural-language": "Find parks with an area less than 8 sq km",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks WHERE ST_Area(ST_Transform(boundary, 3857)) < 8000000"
  },
  {
    "natural-language": "Find parks with an area of at least 8 sq km",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks WHERE ST_Area(ST_Transform(boundary, 3857)) >= 8000000"
  },
  {
    "natural-language": "Find parks with an area greater than 8 sq km",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks WHERE ST_Area(ST_Transform(boundary, 3857)) > 8000000"
  },
  {
    "natural-language": "Find parks with an area less than 7 sq km",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks WHERE ST_Area(ST_Transform(boundary, 3857)) < 7000000"
  },
  {
    "natural-language": "Find parks with an area of at least 7 sq km",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks WHERE ST_Area(ST_Transform(boundary, 3857)) >= 7000000"
  },
  {
    "natural-language": "Find parks with an area greater than 7 sq km",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks WHERE ST_Area(ST_Transform(boundary, 3857)) > 7000000"
  },
  {
    "natural-language": "Find parks containing a road that is at least 2 km",
    "sql": "SELECT p.id, p.name FROM parks p JOIN roads r ON ST_Contains(ST_Transform(p.boundary, 4326), ST_Transform(r.route, 4326)) WHERE ST_Length(r.route::geography) >= 2000"
  },
  {
    "natural-language": "Find parks containing a road that is at least 5 km",
    "sql": "SELECT p.id, p.name FROM parks p JOIN roads r ON ST_Contains(ST_Transform(p.boundary, 4326), ST_Transform(r.route, 4326)) WHERE ST_Length(r.route::geography) >= 5000"
  },
  {
    "natural-language": "Find parks containing a road that is less than 4 km",
    "sql": "SELECT p.id, p.name FROM parks p JOIN roads r ON ST_Contains(ST_Transform(p.boundary, 4326), ST_Transform(r.route, 4326)) WHERE ST_Length(r.route::geography) < 4000"
  },
  {
    "natural-language": "Find parks containing a road that is at least nineteen kilometers",
    "sql": "SELECT p.id, p.name FROM parks p JOIN roads r ON ST_Contains(ST_Transform(p.boundary, 4326), ST_Transform(r.route, 4326)) WHERE ST_Length(r.route::geography) >= 19000"
  },
  {
    "natural-language": "Find parks containing a road that is less than three hundred kilometers",
    "sql": "SELECT p.id, p.name FROM parks p JOIN roads r ON ST_Contains(ST_Transform(p.boundary, 4326), ST_Transform(r.route, 4326)) WHERE ST_Length(r.route::geography) < 300000"
  },
  {
    "natural-language": "Find parks containing a road that is shorter than five kilometers",
    "sql": "SELECT p.id, p.name FROM parks p JOIN roads r ON ST_Contains(ST_Transform(p.boundary, 4326), ST_Transform(r.route, 4326)) WHERE ST_Length(r.route::geography) < 5000"
  },
  {
    "natural-language": "Find parks containing a road that is greater than six kilometers",
    "sql": "SELECT p.id, p.name FROM parks p JOIN roads r ON ST_Contains(ST_Transform(p.boundary, 4326), ST_Transform(r.route, 4326)) WHERE ST_Length(r.route::geography) >= 6000"
  },
  {
    "natural-language": "Find all parks within 10 km of Oxnard",
    "sql": "SELECT p.id, p.name FROM parks p JOIN cities c ON c.name = 'Oxnard' WHERE ST_DWithin(p.boundary::geography, c.boundary::geography, 10000)"
  },
  {
    "natural-language": "Find parks within fifteen kilometers of Ojai",
    "sql": "SELECT p.id, p.name FROM parks p JOIN cities c ON c.name = 'Ojai' WHERE ST_DWithin(p.boundary::geography, c.boundary::geography, 15000)"
  },
  {
    "natural-language": "Find all parks within 8 km of Camarillo",
    "sql": "SELECT p.id, p.name FROM parks p JOIN cities c ON c.name = 'Camarillo' WHERE ST_DWithin(p.boundary::geography, c.boundary::geography, 8000)"
  },
  {
    "natural-language": "Find parks within 6 km of Ventura",
    "sql": "SELECT p.id, p.name FROM parks p JOIN cities c ON c.name = 'Ventura' WHERE ST_DWithin(p.boundary::geography, c.boundary::geography, 000)"
  },
  {
    "natural-language": "Find parks in Ventura",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks p WHERE ST_Within(ST_Transform(p.boundary, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Ventura' LIMIT 1), 4326))"
  },
  {
    "natural-language": "Find all parks in Ojai",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks p WHERE ST_Within(ST_Transform(p.boundary, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Ojai' LIMIT 1), 4326))"
  },
  {
    "natural-language": "Find parks in Oxnard",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks p WHERE ST_Within(ST_Transform(p.boundary, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Oxnard' LIMIT 1), 4326))"
  },
  {
    "natural-language": "Find all parks in Camarillo",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks p WHERE ST_Within(ST_Transform(p.boundary, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Camarillo' LIMIT 1), 4326))"
  },
  {
    "natural-language": "Find parks within a city that has a population of less than two hundred thousand",
    "sql": "SELECT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p JOIN cities c ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 200000"
  },
  {
    "natural-language": "Find parks within a city that has a population of less than 300,000",
    "sql": "SELECT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p JOIN cities c ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population < 300000"
  },
  {
    "natural-language": "Find parks within a city that has a population of at least one hundred thousand",
    "sql": "SELECT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p JOIN cities c ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 100000"
  },
  {
    "natural-language": "Find parks within a city that has a population of at least 50,000",
    "sql": "SELECT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p JOIN cities c ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population >= 50000"
  },
  {
    "natural-language": "Find parks within a city that has a population greater than ninety thousand",
    "sql": "SELECT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p JOIN cities c ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 90000"
  },
  {
    "natural-language": "Find parks within a city that has a population greater than 115,000",
    "sql": "SELECT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p JOIN cities c ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 115000"
  },
  {
    "natural-language": "Find parks in a city with a population that is greater than 200,000",
    "sql": "SELECT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p JOIN cities c ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population > 200000"
  },
  {
    "natural-language": "Find parks within the city that has the highest population",
    "sql": "SELECT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p JOIN cities c ON ST_Within(ST_Transform(p.boundary, 4326), ST_Transform(c.boundary, 4326)) WHERE c.population = (SELECT MAX(population) FROM cities)"
  },
  {
    "natural-language": "Find the largest park",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks ORDER BY ST_Area(ST_Transform(boundary, 3857)) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the smallest park",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks ORDER BY ST_Area(ST_Transform(boundary, 3857)) ASC LIMIT 1"
  },
  {
    "natural-language": "Find parks that are within one kilometer of a building that is owned by a group who owns multiple buildings",
    "sql": "SELECT DISTINCT ON (p.name) p.name, ST_AsGeoJSON(p.boundary) AS boundary, b.street_number, ST_Distance(ST_Transform(b.location, 3857), ST_Transform(p.boundary, 3857)) AS distance_in_meters FROM parks p JOIN buildings b ON ST_DWithin(ST_Transform(b.location, 3857), ST_Transform(p.boundary, 3857), 1000) JOIN owning_entities oe ON b.owning_entity_id = oe.id WHERE oe.is_group = TRUE ORDER BY p.name, distance_in_meters"
  },
  {
    "natural-language": "Find parks that are within two kilometers of a building that is owned by a group who owns multiple buildings",
    "sql": "SELECT DISTINCT ON (p.name) p.name, ST_AsGeoJSON(p.boundary) AS boundary, b.street_number, ST_Distance(ST_Transform(b.location, 3857), ST_Transform(p.boundary, 3857)) AS distance_in_meters FROM parks p JOIN buildings b ON ST_DWithin(ST_Transform(b.location, 3857), ST_Transform(p.boundary, 3857), 2000) JOIN owning_entities oe ON b.owning_entity_id = oe.id WHERE oe.is_group = TRUE ORDER BY p.name, distance_in_meters"
  },
  {
    "natural-language": "Find parks that are within 3 km of a building that is owned by a group who owns multiple buildings",
    "sql": "SELECT DISTINCT ON (p.name) p.name, ST_AsGeoJSON(p.boundary) AS boundary, b.street_number, ST_Distance(ST_Transform(b.location, 3857), ST_Transform(p.boundary, 3857)) AS distance_in_meters FROM parks p JOIN buildings b ON ST_DWithin(ST_Transform(b.location, 3857), ST_Transform(p.boundary, 3857), 3000) JOIN owning_entities oe ON b.owning_entity_id = oe.id WHERE oe.is_group = TRUE ORDER BY p.name, distance_in_meters"
  },
  {
    "natural-language": "Find parks with no roads running through them",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks p WHERE NOT EXISTS (SELECT 1 FROM roads r WHERE ST_Intersects(ST_Transform(p.boundary, 4326), ST_Transform(r.route, 4326)))"
  },
  {
    "natural-language": "Find all parks with at least one road running through them",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks p WHERE EXISTS (SELECT 1 FROM roads r WHERE ST_Intersects(ST_Transform(p.boundary, 4326), ST_Transform(r.route, 4326)))"
  },
  {
    "natural-language": "Find the westernmost park",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks ORDER BY ST_X(ST_PointN(ST_ExteriorRing(boundary), (SELECT i FROM generate_series(1, ST_NumPoints(ST_ExteriorRing(boundary))) AS i ORDER BY ST_X(ST_PointN(ST_ExteriorRing(boundary), i)) LIMIT 1))) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the easternmost park",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks ORDER BY ST_X(ST_PointN(ST_ExteriorRing(boundary), (SELECT i FROM generate_series(1, ST_NumPoints(ST_ExteriorRing(boundary))) AS i ORDER BY ST_X(ST_PointN(ST_ExteriorRing(boundary), i)) DESC LIMIT 1))) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the northernmost park",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks ORDER BY ST_Y(ST_PointN(ST_ExteriorRing(boundary), (SELECT i FROM generate_series(1, ST_NumPoints(ST_ExteriorRing(boundary))) AS i ORDER BY ST_Y(ST_PointN(ST_ExteriorRing(boundary), i)) DESC LIMIT 1))) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the southernmost park",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks ORDER BY ST_Y(ST_PointN(ST_ExteriorRing(boundary), (SELECT i FROM generate_series(1, ST_NumPoints(ST_ExteriorRing(boundary))) AS i ORDER BY ST_Y(ST_PointN(ST_ExteriorRing(boundary), i)) LIMIT 1))) ASC LIMIT 1"
  },
  {
    "natural-language": "Find parks north of Ventura",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks p WHERE ST_Y(ST_Centroid(p.boundary)) > (SELECT ST_Y(ST_Centroid(boundary)) FROM cities WHERE name = 'Ventura' LIMIT 1)"
  },
  {
    "natural-language": "Find parks south of Ojai",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks p WHERE ST_Y(ST_Centroid(p.boundary)) < (SELECT ST_Y(ST_Centroid(boundary)) FROM cities WHERE name = 'Ojai' LIMIT 1)"
  },
  {
    "natural-language": "Find parks south of Ventura",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks p WHERE ST_Y(ST_Centroid(p.boundary)) < (SELECT ST_Y(ST_Centroid(boundary)) FROM cities WHERE name = 'Ventura' LIMIT 1)"
  },
  {
    "natural-language": "Find parks within one kilometer of a building",
    "sql": "SELECT DISTINCT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p JOIN buildings b ON ST_DWithin(ST_Transform(p.boundary, 3857), ST_Transform(b.location, 3857), 1000)"
  },
  {
    "natural-language": "Find parks within 2 km of a building",
    "sql": "SELECT DISTINCT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p JOIN buildings b ON ST_DWithin(ST_Transform(p.boundary, 3857), ST_Transform(b.location, 3857), 2000)"
  },
  {
    "natural-language": "Find parks within three kilometers of a building",
    "sql": "SELECT DISTINCT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p JOIN buildings b ON ST_DWithin(ST_Transform(p.boundary, 3857), ST_Transform(b.location, 3857), 3000)"
  },
  {
    "natural-language": "Find parks within 4 km of a building",
    "sql": "SELECT DISTINCT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p JOIN buildings b ON ST_DWithin(ST_Transform(p.boundary, 3857), ST_Transform(b.location, 3857), 4000)"
  },
  {
    "natural-language": "Find parks that are at least one kilometer from the nearest building",
    "sql": "SELECT p.name, ST_AsGeoJSON(p.boundary) AS boundary FROM parks p WHERE NOT EXISTS (SELECT 1 FROM buildings b WHERE ST_DWithin(ST_Transform(p.boundary, 3857), ST_Transform(b.location, 3857), 1000))"
  },
  {
    "natural-language": "Find the park with the most buildings within two kilometers",
    "sql": "SELECT p.name, ST_AsGeoJSON(p.boundary) AS boundary, COUNT(b.id) AS building_count FROM parks p JOIN buildings b ON ST_DWithin(p.boundary, b.location, 2000) GROUP BY p.id ORDER BY building_count DESC LIMIT 1"
  },
  {
    "natural-language": "Find parks that are not in Ojai",
    "sql": "SELECT name, ST_AsGeoJSON(boundary) AS boundary FROM parks p WHERE NOT ST_Within(ST_Transform(p.boundary, 4326), ST_Transform((SELECT boundary FROM cities WHERE name = 'Ojai' LIMIT 1), 4326))"
  },

  {
    "natural-language": "Find buildings within 10 km of Ventura",
    "sql": "SELECT b.id, b.street_number, b.location FROM buildings b JOIN cities c ON c.name = 'Ventura' WHERE ST_DWithin(b.location::geography, c.boundary::geography, 10000)"
  },
  {
    "natural-language": "Find buildings within 10 km of Ojai",
    "sql": "SELECT b.id, b.street_number, b.location FROM buildings b JOIN cities c ON c.name = 'Ojai' WHERE ST_DWithin(b.location::geography, c.boundary::geography, 10000)"
  },
  {
    "natural-language": "Find buildings within 10 km of Camarillo",
    "sql": "SELECT b.id, b.street_number, b.location FROM buildings b JOIN cities c ON c.name = 'Camarillo' WHERE ST_DWithin(b.location::geography, c.boundary::geography, 10000)"
  },
  {
    "natural-language": "Find buildings within 10 km of Oxnard",
    "sql": "SELECT b.id, b.street_number, b.location FROM buildings b JOIN cities c ON c.name = 'Oxnard' WHERE ST_DWithin(b.location::geography, c.boundary::geography, 10000)"
  },
  {
    "natural-language": "Find buildings in Ojai",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_Within(location, (SELECT boundary FROM cities WHERE name = 'Ojai'))"
  },
  {
    "natural-language": "Find buildings in Ventura",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_Within(location, (SELECT boundary FROM cities WHERE name = 'Ventura'))"
  },
  {
    "natural-language": "Find all buildings in Camarillo",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_Within(location, (SELECT boundary FROM cities WHERE name = 'Camarillo'))"
  },
  {
    "natural-language": "Find all buildings in Oxnard",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_Within(location, (SELECT boundary FROM cities WHERE name = 'Oxnard'))"
  },
  {
    "natural-language": "Find buildings within half of a kilometer of a park",
    "sql": "SELECT b.street_number, ST_AsGeoJSON(b.location) AS location FROM buildings b JOIN parks p ON ST_DWithin(ST_Transform(b.location, 3857), ST_Transform(p.boundary, 3857), 500)"
  },
  {
    "natural-language": "Find buildings within 1 km of a park",
    "sql": "SELECT b.street_number, ST_AsGeoJSON(b.location) AS location FROM buildings b JOIN parks p ON ST_DWithin(ST_Transform(b.location, 3857), ST_Transform(p.boundary, 3857), 1000)"
  },
  {
    "natural-language": "Find buildings within 2 km of a park",
    "sql": "SELECT b.street_number, ST_AsGeoJSON(b.location) AS location FROM buildings b JOIN parks p ON ST_DWithin(ST_Transform(b.location, 3857), ST_Transform(p.boundary, 3857), 2000)"
  },
  {
    "natural-language": "Find buildings within three kilometers of a park",
    "sql": "SELECT b.street_number, ST_AsGeoJSON(b.location) AS location FROM buildings b JOIN parks p ON ST_DWithin(ST_Transform(b.location, 3857), ST_Transform(p.boundary, 3857), 3000)"
  },
  {
    "natural-language": "Find buildings within the most populated town",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_Within(location, (SELECT boundary FROM cities ORDER BY population DESC LIMIT 1))"
  },
  {
    "natural-language": "Find buildings within the least populated town",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_Within(location, (SELECT boundary FROM cities ORDER BY population ASC LIMIT 1))"
  },
  {
    "natural-language": "Find buildings that are owned by a group",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE owning_entity_id IN (SELECT id FROM owning_entities WHERE is_group = TRUE)"
  },
  {
    "natural-language": "Find buildings that are owned by an individual",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE owning_entity_id IN (SELECT id FROM owning_entities WHERE is_group = FALSE)"
  },
  {
    "natural-language": "Find buildings that are owned by a group within one kilometer of Oxnard",
    "sql": "SELECT b.id, b.street_number, ST_AsGeoJSON(b.location) AS location, oe.name AS owner_name FROM buildings b JOIN owning_entities oe ON b.owning_entity_id = oe.id JOIN cities c ON c.name = 'Oxnard' WHERE ST_DWithin(c.boundary::geography, b.location::geography, 1000) AND oe.is_group = TRUE"
  },
  {
    "natural-language": "Find buildings that are owned by individuals within one kilometer of Oxnard",
    "sql": "SELECT b.id,b.street_number, ST_AsGeoJSON(b.location) AS location, oe.name AS owner_name FROM buildings b JOIN owning_entities oe ON b.owning_entity_id = oe.id JOIN cities c ON c.name = 'Oxnard' WHERE ST_DWithin(c.boundary::geography, b.location::geography, 1000) AND oe.is_group = FALSE"
  },
  {
    "natural-language": "Find buildings that are owned by a group within two kilometers of Ventura",
    "sql": "SELECT b.id, b.street_number, ST_AsGeoJSON(b.location) AS location, oe.name AS owner_name FROM buildings b JOIN owning_entities oe ON b.owning_entity_id = oe.id JOIN cities c ON c.name = 'Ventura' WHERE ST_DWithin(c.boundary::geography, b.location::geography, 2000) AND oe.is_group = TRUE"
  },
  {
    "natural-language": "Find buildings that are owned by individuals within 2 km of Ventura",
    "sql": "SELECT b.id, b.street_number, ST_AsGeoJSON(b.location) AS location, oe.name AS owner_name FROM buildings b JOIN owning_entities oe ON b.owning_entity_id = oe.id JOIN cities c ON c.name = 'Ventura' WHERE ST_DWithin(c.boundary::geography, b.location::geography, 2000) AND oe.is_group = FALSE"
  },
  {
    "natural-language": "Find buildings that are owned by a group within three kilometers of Ojai",
    "sql": "SELECT b.id, b.street_number, ST_AsGeoJSON(b.location) AS location, oe.name AS owner_name FROM buildings b JOIN owning_entities oe ON b.owning_entity_id = oe.id JOIN cities c ON c.name = 'Ojai' WHERE ST_DWithin(c.boundary::geography, b.location::geography, 3000) AND oe.is_group = TRUE"
  },
  {
    "natural-language": "Find buildings that are owned by individuals within 3 km of Ojai",
    "sql": "SELECT b.id, b.street_number, ST_AsGeoJSON(b.location) AS location, oe.name AS owner_name FROM buildings b JOIN owning_entities oe ON b.owning_entity_id = oe.id JOIN cities c ON c.name = 'Ojai' WHERE ST_DWithin(c.boundary::geography, b.location::geography, 3000) AND oe.is_group = FALSE"
  },
  {
    "natural-language": "Find buildings with a street number in the one hundreds",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE street_number LIKE '1%' AND LENGTH(street_number) = 3"
  },
  {
    "natural-language": "Find buildings with a street number in the two hundreds",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE street_number LIKE '2%' AND LENGTH(street_number) = 3"
  },
  {
    "natural-language": "Find buildings with a street number in the 300s",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE street_number LIKE '3%' AND LENGTH(street_number) = 3"
  },
  {
    "natural-language": "Find buildings with a street number in the 400s",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE street_number LIKE '4%' AND LENGTH(street_number) = 3"
  },
  {
    "natural-language": "Find buildings on the longest road",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE road_id = (SELECT id FROM roads ORDER BY ST_Length(route) DESC LIMIT 1)"
  },
  {
    "natural-language": "Find buildings within two kilometers of any intersection",
    "sql": "WITH road_intersections AS (SELECT r1.id AS road1_id, r2.id AS road2_id, ST_Intersection(r1.route, r2.route) AS intersection_point FROM roads r1, roads r2 WHERE r1.id < r2.id AND ST_Intersects(ST_Transform(r1.route, 4326), ST_Transform(r2.route, 4326))), buildings_near_intersection AS (SELECT b.id AS building_id, b.street_number, ST_AsGeoJSON(b.location) AS location, b.road_id, ST_Distance(ST_Transform(b.location, 3857), ST_Transform(ri.intersection_point, 3857)) AS distance_to_intersection_in_meters FROM buildings b JOIN road_intersections ri ON ST_DWithin(ST_Transform(b.location, 3857), ST_Transform(ri.intersection_point, 3857), 2000)) SELECT bi.building_id, bi.street_number, bi.location, bi.distance_to_intersection_in_meters FROM buildings_near_intersection bi ORDER BY bi.distance_to_intersection_in_meters"
  },
  {
    "natural-language": "Find buildings within three kilometers of any intersection",
    "sql": "WITH road_intersections AS (SELECT r1.id AS road1_id, r2.id AS road2_id, ST_Intersection(r1.route, r2.route) AS intersection_point FROM roads r1, roads r2 WHERE r1.id < r2.id AND ST_Intersects(ST_Transform(r1.route, 4326), ST_Transform(r2.route, 4326))), buildings_near_intersection AS (SELECT b.id AS building_id, b.street_number, ST_AsGeoJSON(b.location) AS location, b.road_id, ST_Distance(ST_Transform(b.location, 3857), ST_Transform(ri.intersection_point, 3857)) AS distance_to_intersection_in_meters FROM buildings b JOIN road_intersections ri ON ST_DWithin(ST_Transform(b.location, 3857), ST_Transform(ri.intersection_point, 3857), 3000)) SELECT bi.building_id, bi.street_number, bi.location, bi.distance_to_intersection_in_meters FROM buildings_near_intersection bi ORDER BY bi.distance_to_intersection_in_meters"
  },
  {
    "natural-language": "Find buildings within 4 km of any intersection",
    "sql": "WITH road_intersections AS (SELECT r1.id AS road1_id, r2.id AS road2_id, ST_Intersection(r1.route, r2.route) AS intersection_point FROM roads r1, roads r2 WHERE r1.id < r2.id AND ST_Intersects(ST_Transform(r1.route, 4326), ST_Transform(r2.route, 4326))), buildings_near_intersection AS (SELECT b.id AS building_id, b.street_number, ST_AsGeoJSON(b.location) AS location, b.road_id, ST_Distance(ST_Transform(b.location, 3857), ST_Transform(ri.intersection_point, 3857)) AS distance_to_intersection_in_meters FROM buildings b JOIN road_intersections ri ON ST_DWithin(ST_Transform(b.location, 3857), ST_Transform(ri.intersection_point, 3857), 4000)) SELECT bi.building_id, bi.street_number, bi.location, bi.distance_to_intersection_in_meters FROM buildings_near_intersection bi ORDER BY bi.distance_to_intersection_in_meters"
  },
  {
    "natural-language": "Find buildings on Seaward Ave",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE road_id = (SELECT id FROM roads WHERE name = 'Seaward Ave')"
  },
  {
    "natural-language": "Find buildings off of Ojai Ave",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE road_id = (SELECT id FROM roads WHERE name = 'Ojai Ave')"
  },
  {
    "natural-language": "Find buildings on Maricopa Hwy",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE road_id = (SELECT id FROM roads WHERE name = 'Maricopa Hwy')"
  },
  {
    "natural-language": "Find buildings off of Grand Ave",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE road_id = (SELECT id FROM roads WHERE name = 'Grand Ave')"
  },
  {
    "natural-language": "Find buildings in the most populated city that are owned by groups",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE owning_entity_id IN (SELECT id FROM owning_entities WHERE is_group = TRUE) AND ST_Within(location, (SELECT boundary FROM cities ORDER BY population DESC LIMIT 1))"
  },
  {
    "natural-language": "Find buildings in the most populated city that are owned by individuals",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE owning_entity_id IN (SELECT id FROM owning_entities WHERE is_group = FALSE) AND ST_Within(location, (SELECT boundary FROM cities ORDER BY population DESC LIMIT 1))"
  },
  {
    "natural-language": "Find buildings on any road that spans multiple cities",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE road_id IN (SELECT r.id FROM roads r JOIN cities c1 ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c1.boundary, 4326)) JOIN cities c2 ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c2.boundary, 4326)) WHERE c1.id != c2.id)"
  },
  {
    "natural-language": "Find buildings on any road that spans a single city",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE road_id IN (SELECT r.id FROM roads r JOIN cities c ON ST_Intersects(ST_Transform(r.route, 4326), ST_Transform(c.boundary, 4326)) GROUP BY r.id HAVING COUNT(DISTINCT c.id) = 1)"
  },
  {
    "natural-language": "Find buildings within one kilometer of three or more roads",
    "sql": "SELECT b.street_number, ST_AsGeoJSON(b.location) AS location FROM buildings b JOIN roads r ON ST_DWithin(ST_Transform(b.location, 4326), ST_Transform(r.route, 4326), 1000) GROUP BY b.id HAVING COUNT(r.id) >= 3"
  },
  {
    "natural-language": "Find the westernmost building in Ventura",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_X(location) = (SELECT MIN(ST_X(location)) FROM buildings WHERE ST_Within(location, (SELECT boundary FROM cities WHERE name = 'Ventura')))"
  },
  {
    "natural-language": "Find the easternmost building in Camarillo",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_X(location) = (SELECT MAX(ST_X(location)) FROM buildings WHERE ST_Within(location, (SELECT boundary FROM cities WHERE name = 'Camarillo')))"
  },
  {
    "natural-language": "Find the northernmost building in Ojai",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_Y(location) = (SELECT MAX(ST_Y(location)) FROM buildings WHERE ST_Within(location, (SELECT boundary FROM cities WHERE name = 'Ojai')))"
  },
  {
    "natural-language": "Find the southernmost building in Oxnard",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_Y(location) = (SELECT MIN(ST_Y(location)) FROM buildings WHERE ST_Within(location, (SELECT boundary FROM cities WHERE name = 'Oxnard')))"
  },
  {
    "natural-language": "Find buildings in the southern half of Ojai",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_Y(location) < (SELECT ST_Y(ST_Centroid(boundary)) FROM cities WHERE name = 'Ojai') AND ST_Within(location, (SELECT boundary FROM cities WHERE name = 'Ojai'))"
  },
  {
    "natural-language": "Find buildings in the northern half of Camarillo",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_Y(location) > (SELECT ST_Y(ST_Centroid(boundary)) FROM cities WHERE name = 'Camarillo') AND ST_Within(location, (SELECT boundary FROM cities WHERE name = 'Camarillo'))"
  },
  {
    "natural-language": "Find buildings in the eastern half of Ventura",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_X(location) > (SELECT ST_X(ST_Centroid(boundary)) FROM cities WHERE name = 'Ventura') AND ST_Within(location, (SELECT boundary FROM cities WHERE name = 'Ventura'))"
  },
  {
    "natural-language": "Find buildings in the western half of Oxnard",
    "sql": "SELECT street_number, ST_AsGeoJSON(location) AS location FROM buildings WHERE ST_X(location) < (SELECT ST_X(ST_Centroid(boundary)) FROM cities WHERE name = 'Oxnard') AND ST_Within(location, (SELECT boundary FROM cities WHERE name = 'Oxnard'))"
  },
  {
    "natural-language": "Find owners with buildings in Oxnard",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) WHERE c.name = 'Oxnard'"
  },
  {
    "natural-language": "Find groups that own buildings in Ventura",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) WHERE c.name = 'Ventura' AND o.is_group = TRUE"
  },
  {
    "natural-language": "Find individual owners with buildings in Ojai",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) WHERE c.name = 'Ojai' AND o.is_group = FALSE"
  },
  {
    "natural-language": "Find groups that own buildings in Camarillo",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) WHERE c.name = 'Camarillo' AND o.is_group = TRUE"
  },
  {
    "natural-language": "Find owners that have buildings in more than one city",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) GROUP BY o.id HAVING COUNT(DISTINCT c.id) > 1"
  },
  {
    "natural-language": "Find owners that have buildings in a single city",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) GROUP BY o.id HAVING COUNT(DISTINCT c.id) = 1"
  },
  {
    "natural-language": "Find groups that own more than one building",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id HAVING COUNT(b.id) > 1 AND o.is_group = TRUE"
  },
  {
    "natural-language": "Find owners that own more than three buildings",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id HAVING COUNT(b.id) > 3"
  },
  {
    "natural-language": "Find owners that own exactly one building",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id HAVING COUNT(b.id) = 1"
  },
  {
    "natural-language": "Find owners that own at least one building off of Main St",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN roads r ON b.road_id = r.id WHERE r.name = 'Main St'"
  },
  {
    "natural-language": "Find owners that own at least one building on Rose Ave",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN roads r ON b.road_id = r.id WHERE r.name = 'Rose Ave'"
  },
  {
    "natural-language": "Find owners that own at least two buildings on Rose Ave",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN roads r ON b.road_id = r.id WHERE r.name = 'Rose Ave' GROUP BY o.id HAVING COUNT(b.id) >= 2"
  },
  {
    "natural-language": "Find owners that own at least 3 buildings on Rose Ave",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN roads r ON b.road_id = r.id WHERE r.name = 'Rose Ave' GROUP BY o.id HAVING COUNT(b.id) >= 3"
  },
  {
    "natural-language": "Find owners that own at least 4 buildings on Rose Ave",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN roads r ON b.road_id = r.id WHERE r.name = 'Rose Ave' GROUP BY o.id HAVING COUNT(b.id) >= 4"
  },
  {
    "natural-language": "Find owners that own at least two buildings on Victoria Ave",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN roads r ON b.road_id = r.id WHERE r.name = 'Victoria Ave' GROUP BY o.id HAVING COUNT(b.id) >= 2"
  },
  {
    "natural-language": "Find owners that own at least 2 buildings on Telephone Rd",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN roads r ON b.road_id = r.id WHERE r.name = 'Telephone Rd' GROUP BY o.id HAVING COUNT(b.id) >= 2"
  },
  {
    "natural-language": "Find owners that own at least two buildings on Thompson Blvd",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN roads r ON b.road_id = r.id WHERE r.name = 'Thompson Blvd' GROUP BY o.id HAVING COUNT(b.id) >= 2"
  },
  {
    "natural-language": "Find owners that own at least 2 buildings on Ventura Ave",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN roads r ON b.road_id = r.id WHERE r.name = 'Ventura Ave' GROUP BY o.id HAVING COUNT(b.id) >= 2"
  },
  {
    "natural-language": "Find the owner with the most buildings within ten kilometers of Camarillo",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) WHERE c.name = 'Camarillo' AND ST_Distance(b.location, ST_SetSRID(ST_Point(-119.9895, 34.2197), 4326)) <= 10000 GROUP BY o.id ORDER BY COUNT(b.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the owner with the most buildings within eighty five kilometers of Camarillo",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) WHERE c.name = 'Camarillo' AND ST_Distance(b.location, ST_SetSRID(ST_Point(-119.9895, 34.2197), 4326)) <= 85000 GROUP BY o.id ORDER BY COUNT(b.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the owner with the most buildings within 2 km of Oxnard",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) WHERE c.name = 'Oxnard' AND ST_Distance(b.location, ST_SetSRID(ST_Point(-119.9895, 34.2197), 4326)) <= 2000 GROUP BY o.id ORDER BY COUNT(b.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the owner with the most buildings within sixty five kilometers of Camarillo",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) WHERE c.name = 'Camarillo' AND ST_Distance(b.location, ST_SetSRID(ST_Point(-119.9895, 34.2197), 4326)) <= 65000 GROUP BY o.id ORDER BY COUNT(b.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the owner with the most buildings within 2km of Ventura",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) WHERE c.name = 'Ventura' AND ST_Distance(b.location, ST_SetSRID(ST_Point(-119.9895, 34.2197), 4326)) <= 2000 GROUP BY o.id ORDER BY COUNT(b.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the owner with the most buildings",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id ORDER BY COUNT(b.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the group with the most buildings off of Vineyard Ave",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN roads r ON b.road_id = r.id WHERE r.name = 'Vineyard Ave' AND o.is_group = TRUE GROUP BY o.id ORDER BY COUNT(b.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find individual owners with one or more buildings in Ventura",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) WHERE c.name = 'Ventura' AND o.is_group = FALSE"
  },
  {
    "natural-language": "Find the owner with the most buildings in the most populated city",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) WHERE c.id = (SELECT id FROM cities ORDER BY population DESC LIMIT 1) GROUP BY o.id ORDER BY COUNT(b.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the owner with the most buildings in the least populated city",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) WHERE c.id = (SELECT id FROM cities ORDER BY population ASC LIMIT 1) GROUP BY o.id ORDER BY COUNT(b.id) DESC LIMIT 1"
  },
  {
    "natural-language": "Find individual owners that own a single building",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id HAVING COUNT(b.id) = 1 AND o.is_group = FALSE"
  },
  {
    "natural-language": "Find the group that owns the most buildings",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id HAVING COUNT(b.id) = (SELECT MAX(building_count) FROM (SELECT COUNT(b.id) AS building_count FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id) AS subquery) AND o.is_group = TRUE"
  },
  {
    "natural-language": "Find all groups that own more than one building",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id HAVING COUNT(b.id) > 1 AND o.is_group = TRUE"
  },
  {
    "natural-language": "Find the individual that owns the most buildings",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id HAVING COUNT(b.id) = (SELECT MAX(building_count) FROM (SELECT COUNT(b.id) AS building_count FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id) AS subquery) AND o.is_group = FALSE"
  },
  {
    "natural-language": "Find all owners that have a single building",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id HAVING COUNT(b.id) = 1"
  },
  {
    "natural-language": "Find all individuals that own more than one building",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id HAVING COUNT(b.id) > 1 AND o.is_group = FALSE"
  },
  {
    "natural-language": "Find owners that have more than one building on the same road",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id, b.road_id HAVING COUNT(b.id) > 1"
  },
  {
    "natural-language": "Find owners that have more than two buildings on the same road",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id, b.road_id HAVING COUNT(b.id) > 2"
  },
  {
    "natural-language": "Find owners that have buildings on two or more roads",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id HAVING COUNT(DISTINCT b.road_id) >= 2"
  },
  {
    "natural-language": "Find owners that have buildings on Seaward Ave",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN roads r ON b.road_id = r.id WHERE r.name = 'Seaward Ave' GROUP BY o.id"
  },
  {
    "natural-language": "Find owners that have more than three buildings on the same road",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id, b.road_id HAVING COUNT(b.id) > 3"
  },
  {
    "natural-language": "Find owners with two or more buildings across two or more cities",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN cities c ON ST_Within(ST_Transform(b.location, 4326), ST_Transform(c.boundary, 4326)) GROUP BY o.id HAVING COUNT(DISTINCT c.id) > 1 AND COUNT(b.id) >= 2"
  },
  {
    "natural-language": "Find groups that own more than 3 buildings",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id GROUP BY o.id HAVING COUNT(b.id) > 3 AND o.is_group = TRUE"
  },
  {
    "natural-language": "Find the owner of the northernmost building",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id ORDER BY ST_Y(b.location) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the owner of the easternmost building",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id ORDER BY ST_X(b.location) DESC LIMIT 1"
  },
  {
    "natural-language": "Find the owner of the southernmost building",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id ORDER BY ST_Y(b.location) ASC LIMIT 1"
  },
  {
    "natural-language": "Find the owner of the westernmost building",
    "sql": "SELECT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id ORDER BY ST_X(b.location) ASC LIMIT 1"
  },
  {
    "natural-language": "Find owners of buildings within one kilometer of a park",
    "sql": "SELECT DISTINCT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN parks p ON ST_DWithin(ST_Transform(b.location, 4326), ST_Transform(p.boundary, 4326), 1000)"
  },
  {
    "natural-language": "Find owners of buildings within two kilometers of a park",
    "sql": "SELECT DISTINCT o.name FROM owning_entities o JOIN buildings b ON o.id = b.owning_entity_id JOIN parks p ON ST_DWithin(ST_Transform(b.location, 4326), ST_Transform(p.boundary, 4326), 2000)"
  },
  {
    "natural-language": "Find all cities",
    "sql": "SELECT * FROM cities"
  },
  {
    "natural-language": "Find all roads",
    "sql": "SELECT * FROM roads"
  },
  {
    "natural-language": "Find parks",
    "sql": "SELECT * FROM parks"
  },
  {
    "natural-language": "Find all owners",
    "sql": "SELECT * FROM owning_entities"
  },
  {
    "natural-language": "Find buildings",
    "sql": "SELECT * FROM buildings"
  }
]